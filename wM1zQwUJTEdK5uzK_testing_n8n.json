{
  "createdAt": "2025-10-04T11:23:48.539Z",
  "updatedAt": "2025-10-08T06:56:50.000Z",
  "id": "wM1zQwUJTEdK5uzK",
  "name": "testing_n8n",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "has-nodes",
              "leftValue": "={{ $json.nodes?.length > 0 }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1808,
        384
      ],
      "id": "d2983624-3e65-44e6-8926-a2d24dc5c560",
      "name": "Has Nodes?2"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2048,
        368
      ],
      "id": "71e19a2b-0be4-49e7-9f24-53bc04df0fb5",
      "name": "Wait",
      "webhookId": "c0ee9064-0379-4c04-8e20-f8cece050e5e"
    },
    {
      "parameters": {
        "jsCode": "function replaceTriggersWithWebhook(workflow) {\n  const nodes = workflow.nodes;\n  const connections = workflow.connections;\n\n  const TRIGGER_NODE_TYPES = [\n    \"n8n-nodes-base.manualTrigger\",\n    \"n8n-nodes-base.cron\",\n    \"n8n-nodes-base.schedule\",\n    \"n8n-nodes-base.interval\",\n    \"n8n-nodes-base.webhook\",\n    \"n8n-nodes-base.respondToWebhook\",\n    \"n8n-nodes-base.waitForWebhook\",\n    \"n8n-nodes-base.fileTrigger\",\n    \"n8n-nodes-base.s3Trigger\",\n    \"n8n-nodes-base.googleDriveTrigger\",\n    \"n8n-nodes-base.emailTrigger\",\n    \"n8n-nodes-base.gmailTrigger\",\n    \"n8n-nodes-base.microsoftOutlookTrigger\",\n    \"n8n-nodes-base.rabbitMqTrigger\",\n    \"n8n-nodes-base.redisTrigger\",\n    \"n8n-nodes-base.kafkaTrigger\",\n    \"n8n-nodes-base.sqsTrigger\",\n    \"n8n-nodes-base.postgresTrigger\",\n    \"n8n-nodes-base.mySqlTrigger\",\n    \"n8n-nodes-base.mongoDbTrigger\",\n    \"n8n-nodes-base.slackTrigger\",\n    \"n8n-nodes-base.discordTrigger\",\n    \"n8n-nodes-base.telegramTrigger\",\n    \"n8n-nodes-base.microsoftTeamsTrigger\",\n    \"n8n-nodes-base.whatsAppTrigger\",\n    \"n8n-nodes-base.airtableTrigger\",\n    \"n8n-nodes-base.notionTrigger\",\n    \"n8n-nodes-base.googleSheetsTrigger\",\n    \"n8n-nodes-base.trelloTrigger\",\n    \"n8n-nodes-base.twitterTrigger\",\n    \"n8n-nodes-base.facebookTrigger\",\n    \"n8n-nodes-base.instagramTrigger\",\n    \"n8n-nodes-base.linkedinTrigger\",\n    \"n8n-nodes-base.shopifyTrigger\",\n    \"n8n-nodes-base.wooCommerceTrigger\",\n    \"n8n-nodes-base.stripeTrigger\",\n    \"n8n-nodes-base.paypalTrigger\",\n    \"n8n-nodes-base.githubTrigger\",\n    \"n8n-nodes-base.gitlabTrigger\",\n    \"n8n-nodes-base.jiraTrigger\",\n    \"n8n-nodes-base.zapierTrigger\",\n    \"n8n-nodes-base.formTrigger\",\n    \"n8n-nodes-base.googleFormsTrigger\",\n    \"n8n-nodes-base.typeformTrigger\"\n  ];\n\n  if (nodes.some(n => n.type === \"n8n-nodes-base.webhook\")) {\n    console.log(\"Workflow already contains a webhook trigger. No changes made.\");\n    return { workflow, webhookPath: null };\n  }\n\n  const triggerNodes = nodes.filter(\n    n => TRIGGER_NODE_TYPES.includes(n.type) && n.type !== \"n8n-nodes-base.webhook\"\n  );\n\n  if (triggerNodes.length === 0) {\n    console.log(\"No trigger nodes to replace.\");\n    return { workflow, webhookPath: null };\n  }\n\n  const basePos = triggerNodes[0].position || [200, 200];\n\n  const downstreamConnections = [];\n  for (const [source, conn] of Object.entries(connections)) {\n    if (triggerNodes.some(n => n.name === source)) {\n      const outs = conn.main?.[0] || [];\n      downstreamConnections.push(...outs);\n      delete connections[source];\n    }\n  }\n\n  // ðŸ”¹ NEW: define webhook path dynamically\n  const newWebhookPath = \"ai-workflow-test-\" + Date.now();\n\n  const webhookNode = {\n    id: \"webhook_1\",\n    name: \"Webhook Trigger\",\n    type: \"n8n-nodes-base.webhook\",\n    typeVersion: 1,\n    position: [basePos[0], basePos[1]],\n    parameters: {\n      httpMethod: \"POST\",\n      path: newWebhookPath,\n    },\n  };\n\n  const exampleValues = [];\n  const triggerData = triggerNodes[0]?.parameters || {};\n  for (const key in triggerData) {\n    exampleValues.push({ name: key, value: triggerData[key] });\n  }\n  if (exampleValues.length === 0) {\n    exampleValues.push({ name: \"exampleField\", value: \"example value\" });\n    exampleValues.push({ name: \"source\", value: \"webhook-test\" });\n  }\n\n  const setNode = {\n    id: \"set_1\",\n    name: \"Set Sample Data\",\n    type: \"n8n-nodes-base.set\",\n    typeVersion: 1,\n    position: [basePos[0] + 250, basePos[1]],\n    parameters: {\n      values: {\n        string: exampleValues,\n      },\n    },\n  };\n\n  const updatedNodes = nodes.filter(n => !triggerNodes.includes(n));\n  updatedNodes.push(webhookNode, setNode);\n\n  connections[\"Webhook Trigger\"] = {\n    main: [[{ node: \"Set Sample Data\", type: \"main\", index: 0 }]],\n  };\n  connections[\"Set Sample Data\"] = {\n    main: [downstreamConnections],\n  };\n\n  return {\n    workflow: {\n      ...workflow,\n      nodes: updatedNodes,\n      connections,\n    },\n    webhookPath: newWebhookPath, // ðŸ”¹ RETURN the webhook path\n  };\n}\n\n// --- MAIN ---\nconst workflowStr = $input.first().json.n8n_json;\nlet workflow;\n\ntry {\n  workflow = JSON.parse(workflowStr);\n} catch (e) {\n  return [{ json: { error: \"Invalid workflow JSON\" } }];\n}\n\nif (!workflow || !workflow.nodes) {\n  return [{ json: { error: \"Invalid workflow input\" } }];\n}\n\ntry {\n  const { workflow: updatedWorkflow, webhookPath } = replaceTriggersWithWebhook(workflow);\n  return [\n    {\n      json: {\n        status: \"success\",\n        webhookPath: webhookPath, // ðŸ”¹ hereâ€™s the webhook path\n        updated_workflow: updatedWorkflow,\n      },\n    },\n  ];\n} catch (err) {\n  return [\n    {\n      json: {\n        status: \"error\",\n        message: err.message,\n      },\n    },\n  ];\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        336,
        336
      ],
      "id": "228b3a4e-9ce9-4950-b8fa-2130639c6267",
      "name": "Parse & Validate Response6",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ad0c73e2-7ffd-47fc-ae11-397ef5cb55cd",
              "name": "n8n_json",
              "value": "{   \"nodes\": [     {       \"parameters\": {         \"jsCode\": \"const workflow = $('Code1').first().json.workflow;\\nconst fileName = $input.first().json.file_set;\\n\\n// Recursive cleaner\\nfunction deepClean(obj) {\\n  if (typeof obj !== 'object' || obj === null) return obj;\\n\\n  for (const key in obj) {\\n    // Remove auth/secret related keys\\n    if (\\n      key.toLowerCase().includes('credential') ||\\n      key.toLowerCase().includes('token') ||\\n      key.toLowerCase().includes('key') ||\\n      key.toLowerCase().includes('secret') ||\\n      key.toLowerCase().includes('auth') ||\\n      key.toLowerCase().includes('password') ||\\n      key.toLowerCase().includes('header')\\n    ) {\\n      delete obj[key];\\n    } else if (typeof obj[key] === 'object') {\\n      obj[key] = deepClean(obj[key]);\\n    }\\n  }\\n  return obj;\\n}\\n\\nconst cleanWorkflow = deepClean(JSON.parse(JSON.stringify(workflow)));\\n\\nreturn {\\n  json: {\\n    file_name: fileName,\\n    workflow: cleanWorkflow\\n  }\\n};\\n\"       },       \"type\": \"n8n-nodes-base.code\",       \"typeVersion\": 2,       \"position\": [         -1456,         -64       ],       \"id\": \"3e9e3f0e-e917-454e-a6e7-518b75c5a0c6\",       \"name\": \"Code3\"     },     {       \"parameters\": {         \"rules\": {           \"values\": [             {               \"conditions\": {                 \"options\": {                   \"caseSensitive\": true,                   \"leftValue\": \"\",                   \"typeValidation\": \"strict\",                   \"version\": 2                 },                 \"conditions\": [                   {                     \"leftValue\": \"={{ $json.isCommon }}\",                     \"rightValue\": \"true\",                     \"operator\": {                       \"type\": \"boolean\",                       \"operation\": \"true\",                       \"singleValue\": true                     },                     \"id\": \"65fba2fd-1100-4637-8bc1-d6a0d2ab5dd8\"                   }                 ],                 \"combinator\": \"and\"               }             },             {               \"conditions\": {                 \"options\": {                   \"caseSensitive\": true,                   \"leftValue\": \"\",                   \"typeValidation\": \"strict\",                   \"version\": 2                 },                 \"conditions\": [                   {                     \"id\": \"05a60a19-8625-4764-869c-3dc9f8f47488\",                     \"leftValue\": \"={{ $json.isCommon }}\",                     \"rightValue\": \"\",                     \"operator\": {                       \"type\": \"boolean\",                       \"operation\": \"false\",                       \"singleValue\": true                     }                   }                 ],                 \"combinator\": \"and\"               }             },             {               \"conditions\": {                 \"options\": {                   \"caseSensitive\": true,                   \"leftValue\": \"\",                   \"typeValidation\": \"strict\",                   \"version\": 2                 },                 \"conditions\": [                   {                     \"id\": \"edd35a46-9bd5-46a9-95f6-2301848d104d\",                     \"leftValue\": \"{{ $json.isCommon }}\",                     \"rightValue\": \"\",                     \"operator\": {                       \"type\": \"string\",                       \"operation\": \"notExists\",                       \"singleValue\": true                     }                   }                 ],                 \"combinator\": \"and\"               }             }           ]         },         \"options\": {}       },       \"type\": \"n8n-nodes-base.switch\",       \"typeVersion\": 3.2,       \"position\": [         -1760,         80       ],       \"id\": \"d9cbb5f7-f481-4fe8-911d-fb853ded687b\",       \"name\": \"Switch\"     },     {       \"parameters\": {         \"jsCode\": \"const file_name = $('Code1').first().json.file_name || '';  \\nconst workflowId_new = file_name.split(\\\"_\\\")[0];  \\nconst file_set = $('Code1').first().json.file_name || '';\\n\\n// check if ANY workflow matches\\nconst isCommon = $input.all().some(item => {\\n  const fileName = item.json.name;   // or item.json.content.name if nested\\n  const workflowId = fileName.split(\\\"_\\\")[0];\\n  return workflowId === workflowId_new;\\n});\\n\\nreturn [{ isCommon,file_set }];\\n\"       },       \"type\": \"n8n-nodes-base.code\",       \"typeVersion\": 2,       \"position\": [         -1968,         96       ],       \"id\": \"e8fa1fbb-c77d-4282-b715-1c56e98c468b\",       \"name\": \"Code2\"     },     {       \"parameters\": {         \"authentication\": \"oAuth2\",         \"resource\": \"file\",         \"operation\": \"get\",         \"owner\": {           \"__rl\": true,           \"value\": \"sanjay-e2m\",           \"mode\": \"name\"         },         \"repository\": {           \"__rl\": true,           \"value\": \"My_n8n_workflows\",           \"mode\": \"list\",           \"cachedResultName\": \"My_n8n_workflows\",           \"cachedResultUrl\": \"https://github.com/sanjay-e2m/My_n8n_workflows\"         },         \"filePath\": \"/\",         \"asBinaryProperty\": false,         \"additionalParameters\": {}       },       \"type\": \"n8n-nodes-base.github\",       \"typeVersion\": 1.1,       \"position\": [         -2176,         96       ],       \"id\": \"3db50943-35e0-4588-bd91-0716115b93d8\",       \"name\": \"Get a file\",       \"webhookId\": \"f2000f07-3d6e-44b4-b1a4-4a3e6579689d\",       \"credentials\": {         \"githubOAuth2Api\": {           \"id\": \"RthMjnVOfbjSI5JX\",           \"name\": \"GitHub account\"         }       }     },     {       \"parameters\": {         \"jsCode\": \"// Handle both cases: array or object with array inside\\nlet workflows = $json;\\n\\n// If the data is wrapped inside { data: [...] } or similar\\nif (!Array.isArray(workflows) && Array.isArray(workflows.data)) {\\n  workflows = workflows.data;\\n}\\n\\n// If it's still not an array, wrap it\\nif (!Array.isArray(workflows)) {\\n  workflows = [workflows];\\n}\\n\\nreturn workflows.map(wf => {\\n  return {\\n    json: {\\n      workflow: wf,\\n      file_name: `${wf.id}_${wf.name}.json`\\n    }\\n  };\\n});\\n\"       },       \"type\": \"n8n-nodes-base.code\",       \"typeVersion\": 2,       \"position\": [         -2384,         96       ],       \"id\": \"14a2f0ca-11c4-4c5f-bca6-a044129fb35c\",       \"name\": \"Code1\"     },     {       \"parameters\": {},       \"type\": \"n8n-nodes-base.noOp\",       \"name\": \"Replace Me\",       \"typeVersion\": 1,       \"position\": [         -880,         96       ],       \"id\": \"ed2d4524-9327-4d7a-a89b-fce26f617ff6\"     },     {       \"parameters\": {         \"options\": {}       },       \"type\": \"n8n-nodes-base.splitInBatches\",       \"typeVersion\": 3,       \"position\": [         -2640,         80       ],       \"id\": \"89129153-ed79-4f57-a83d-817d008c28f8\",       \"name\": \"Loop Over Items\"     },     {       \"parameters\": {         \"jsCode\": \"const workflow = $('Code1').first().json.workflow;\\nconst fileName = $input.first().json.content.name;\\n\\n// Recursive cleaner\\nfunction deepClean(obj) {\\n  if (typeof obj !== 'object' || obj === null) return obj;\\n\\n  for (const key in obj) {\\n    // Remove auth/secret related keys\\n    if (\\n      key.toLowerCase().includes('credential') ||\\n      key.toLowerCase().includes('token') ||\\n      key.toLowerCase().includes('key') ||\\n      key.toLowerCase().includes('secret') ||\\n      key.toLowerCase().includes('auth') ||\\n      key.toLowerCase().includes('password') ||\\n      key.toLowerCase().includes('header')\\n    ) {\\n      delete obj[key];\\n    } else if (typeof obj[key] === 'object') {\\n      obj[key] = deepClean(obj[key]);\\n    }\\n  }\\n  return obj;\\n}\\n\\nconst cleanWorkflow = deepClean(JSON.parse(JSON.stringify(workflow)));\\n\\nreturn {\\n  json: {\\n    file_name: fileName,\\n    workflow: cleanWorkflow\\n  }\\n};\\n\"       },       \"type\": \"n8n-nodes-base.code\",       \"typeVersion\": 2,       \"position\": [         -1360,         96       ],       \"id\": \"519485e6-1adb-439a-9f23-71b446d8ae7c\",       \"name\": \"Code\"     },     {       \"parameters\": {         \"authentication\": \"oAuth2\",         \"resource\": \"file\",         \"operation\": \"edit\",         \"owner\": {           \"__rl\": true,           \"value\": \"=sanjay-e2m\",           \"mode\": \"name\"         },         \"repository\": {           \"__rl\": true,           \"value\": \"=My_n8n_workflows\",           \"mode\": \"name\"         },         \"filePath\": \"={{ $json.file_name }}\",         \"fileContent\": \"={{ JSON.stringify($json.workflow, null, 2) }}\",         \"commitMessage\": \"=File Modify at {{ new Date().toISOString() }}\"       },       \"type\": \"n8n-nodes-base.github\",       \"typeVersion\": 1.1,       \"position\": [         -1088,         96       ],       \"id\": \"89737b96-3624-4d02-a060-86b9d2064c4b\",       \"name\": \"Edit a file\",       \"webhookId\": \"56f4f5a5-f1d0-4291-a875-f204f4e136cd\",       \"credentials\": {         \"githubOAuth2Api\": {           \"id\": \"RthMjnVOfbjSI5JX\",           \"name\": \"GitHub account\"         }       }     },     {       \"parameters\": {         \"operation\": \"get\",         \"workflowId\": {           \"__rl\": true,           \"value\": \"={{ $json.n8n_id }}\",           \"mode\": \"id\"         },         \"requestOptions\": {}       },       \"type\": \"n8n-nodes-base.n8n\",       \"typeVersion\": 1,       \"position\": [         -2880,         80       ],       \"id\": \"aeaa56e1-7375-4ca1-8310-d7777e3bf85f\",       \"name\": \"Get a workflow\",       \"credentials\": {         \"n8nApi\": {           \"id\": \"4ArsrzR1bCtX5IDv\",           \"name\": \"n8n account\"         }       }     },     {       \"parameters\": {         \"authentication\": \"oAuth2\",         \"resource\": \"file\",         \"owner\": {           \"__rl\": true,           \"value\": \"=sanjay-e2m\",           \"mode\": \"name\"         },         \"repository\": {           \"__rl\": true,           \"value\": \"=My_n8n_workflows\",           \"mode\": \"name\"         },         \"filePath\": \"={{ $json.file_set }}\",         \"fileContent\": \"File Created for my content\",         \"commitMessage\": \"= File Created at {{ new Date().toISOString() }}\"       },       \"type\": \"n8n-nodes-base.github\",       \"typeVersion\": 1.1,       \"position\": [         -1520,         96       ],       \"id\": \"ad9a8e84-f1d4-4f9c-aa00-8fe0e3bfff11\",       \"name\": \"Create a file\",       \"webhookId\": \"edcd093f-7e2e-45ed-9855-29d49a9147cb\",       \"credentials\": {         \"githubOAuth2Api\": {           \"id\": \"RthMjnVOfbjSI5JX\",           \"name\": \"GitHub account\"         }       }     },     {       \"parameters\": {         \"assignments\": {           \"assignments\": [             {               \"id\": \"6be8c184-8fb7-47a9-ad42-d0dc3db1eea4\",               \"name\": \"name\",               \"type\": \"string\",               \"value\": \"={{ $json.name }}\"             },             {               \"id\": \"n8n-id\",               \"name\": \"n8n_id\",               \"type\": \"string\",               \"value\": \"={{ $json.id }}\"             },             {               \"id\": \"n8n-updated\",               \"name\": \"n8n_updated\",               \"type\": \"string\",               \"value\": \"={{ $json.updatedAt }}\"             }           ]         },         \"options\": {}       },       \"id\": \"b392b433-c248-40cd-884d-e03151fb2322\",       \"name\": \"Prepare n8n workflow data\",       \"type\": \"n8n-nodes-base.set\",       \"position\": [         -3088,         80       ],       \"typeVersion\": 3.3     },     {       \"parameters\": {         \"filters\": {},         \"requestOptions\": {}       },       \"id\": \"4da840e7-5f2b-450d-a962-707a09961110\",       \"name\": \"n8n - get all workflows\",       \"type\": \"n8n-nodes-base.n8n\",       \"position\": [         -3312,         80       ],       \"typeVersion\": 1,       \"credentials\": {         \"n8nApi\": {           \"id\": \"4ArsrzR1bCtX5IDv\",           \"name\": \"n8n account\"         }       }     },     {       \"parameters\": {         \"values\": {           \"string\": [             {               \"name\": \"repo.owner\",               \"value\": \"sanjay-e2m\"             },             {               \"name\": \"repo.name\",               \"value\": \"My_n8n_workflows\"             },             {               \"name\": \"repo.path\",               \"value\": \"workflows/\"             }           ]         },         \"options\": {}       },       \"id\": \"a035c9d6-8447-41b2-9402-adfddc6f432e\",       \"name\": \"Globals\",       \"type\": \"n8n-nodes-base.set\",       \"position\": [         -3536,         80       ],       \"typeVersion\": 1     },     {       \"parameters\": {},       \"id\": \"9d59f214-5918-4727-8890-e7ce7cc4b561\",       \"name\": \"On clicking 'execute'\",       \"type\": \"n8n-nodes-base.manualTrigger\",       \"position\": [         -3792,         80       ],       \"typeVersion\": 1     }   ],   \"connections\": {     \"Code3\": {       \"main\": [         [           {             \"node\": \"Edit a file\",             \"type\": \"main\",             \"index\": 0           }         ]       ]     },     \"Switch\": {       \"main\": [         [           {             \"node\": \"Code3\",             \"type\": \"main\",             \"index\": 0           }         ],         [           {             \"node\": \"Create a file\",             \"type\": \"main\",             \"index\": 0           }         ]       ]     },     \"Code2\": {       \"main\": [         [           {             \"node\": \"Switch\",             \"type\": \"main\",             \"index\": 0           }         ]       ]     },     \"Get a file\": {       \"main\": [         [           {             \"node\": \"Code2\",             \"type\": \"main\",             \"index\": 0           }         ]       ]     },     \"Code1\": {       \"main\": [         [           {             \"node\": \"Get a file\",             \"type\": \"main\",             \"index\": 0           }         ]       ]     },     \"Replace Me\": {       \"main\": [         [           {             \"node\": \"Loop Over Items\",             \"type\": \"main\",             \"index\": 0           }         ]       ]     },     \"Loop Over Items\": {       \"main\": [         [],         [           {             \"node\": \"Code1\",             \"type\": \"main\",             \"index\": 0           }         ]       ]     },     \"Code\": {       \"main\": [         [           {             \"node\": \"Edit a file\",             \"type\": \"main\",             \"index\": 0           }         ]       ]     },     \"Edit a file\": {       \"main\": [         [           {             \"node\": \"Replace Me\",             \"type\": \"main\",             \"index\": 0           }         ]       ]     },     \"Get a workflow\": {       \"main\": [         [           {             \"node\": \"Loop Over Items\",             \"type\": \"main\",             \"index\": 0           }         ]       ]     },     \"Create a file\": {       \"main\": [         [           {             \"node\": \"Code\",             \"type\": \"main\",             \"index\": 0           }         ]       ]     },     \"Prepare n8n workflow data\": {       \"main\": [         [           {             \"node\": \"Get a workflow\",             \"type\": \"main\",             \"index\": 0           }         ]       ]     },     \"n8n - get all workflows\": {       \"main\": [         [           {             \"node\": \"Prepare n8n workflow data\",             \"type\": \"main\",             \"index\": 0           }         ]       ]     },     \"Globals\": {       \"main\": [         [           {             \"node\": \"n8n - get all workflows\",             \"type\": \"main\",             \"index\": 0           }         ]       ]     },     \"On clicking 'execute'\": {       \"main\": [         [           {             \"node\": \"Globals\",             \"type\": \"main\",             \"index\": 0           }         ]       ]     }   },   \"pinData\": {},   \"meta\": {     \"templateCredsSetupCompleted\": true,     \"instanceId\": \"d3a93d96b87c932ca5bb5705abcde014d342090fde7086055f4df32bb7192bd5\"   } }",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        112,
        432
      ],
      "id": "d81aba42-011e-4e8b-94b1-8863abc4e402",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "jsCode": "// --- MAIN ---\nconst workflowStr = $input.first().json.n8n_json;\nlet workflow;\n\ntry {\n  workflow = JSON.parse(workflowStr);\n} catch (e) {\n  return [{ json: { error: \"Invalid workflow JSON\" } }];\n}\n\nif (!workflow || !workflow.nodes) {\n  return [{ json: { error: \"Invalid workflow input\" } }];\n}\n\n// Check if any node is deactivated\nconst hasDeactivatedNodes = workflow.nodes.some(n => n.disabled === true);\n\nreturn [\n  {\n    json: {\n      hasDeactivatedNodes: hasDeactivatedNodes\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        336,
        528
      ],
      "id": "c650cdb5-8211-4794-899d-a9c81b35bd75",
      "name": "Parse & Validate Response1",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        560,
        432
      ],
      "id": "e8d9a43b-e552-481b-91bc-8edf3c55a0ef",
      "name": "Merge1"
    },
    {
      "parameters": {
        "jsCode": "const status = $input.all().find(i => i.json.status !== undefined)?.json.status || null;\nconst updated_workflow = $input.all().find(i => i.json.updated_workflow !== undefined)?.json.updated_workflow || null;\nconst hasDeactivatedNodes = $input.all().find(i => i.json.hasDeactivatedNodes !== undefined)?.json.hasDeactivatedNodes || false;\nconst webhookPath = $input.all().find(i => i.json.webhookPath !== undefined)?.json.webhookPath || null;\n\n// ðŸ”¹ Split workflow into nodes and connections if available\nconst nodes = updated_workflow?.nodes || [];\nconst connections = updated_workflow?.connections || {};\n\nreturn [\n  {\n    json: {\n      status,\n      hasDeactivatedNodes,\n      webhookPath,\n      nodes, \n      connections,\n      updated_workflow\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        784,
        432
      ],
      "id": "ec9e8a32-607d-4918-ab87-92309e7537ce",
      "name": "Code in JavaScript1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "workflow-payload",
              "name": "workflowPayload",
              "value": "={{ \n  JSON.stringify({\n\"name\": \"N8n_Test_AI_Generated_\" + Date.now(),\n    \"nodes\": $json.nodes,\n    \"connections\": $json.connections,\n    \"settings\": {\n      \"saveExecutionProgress\": true,\n      \"saveManualExecutions\": true,\n      \"saveDataErrorExecution\": \"all\",\n      \"saveDataSuccessExecution\": \"all\",\n      \"executionTimeout\": 3600,\n      \"timezone\": \"America/New_York\",\n      \"executionOrder\": \"v1\"\n    },\n    \"staticData\": {}\n  })\n}}",
              "type": "string"
            },
            {
              "id": "5a2df228-6121-4033-b2e4-d9936b0bb9f6",
              "name": "n8n_webhook_path",
              "value": "={{ $json.webhookPath }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1056,
        432
      ],
      "id": "9c68983c-e7d1-42a0-ac0a-c9b56b0f3a00",
      "name": "Prepare Workflow Payload1",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:5678/api/v1/workflows",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.workflowPayload }}",
        "options": {
          "redirect": {
            "redirect": {}
          },
          "timeout": 30000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1312,
        416
      ],
      "id": "edd7b076-8de8-4060-9f6a-cd4509d3561b",
      "name": "Create Workflow1",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=http://localhost:5678/api/v1/workflows/{{ $json.id }}/activate",
        "options": {
          "timeout": 15000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1568,
        400
      ],
      "id": "0d3e841e-a6b6-4092-ada6-844f5223b26a",
      "name": "Activate Workflow1",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=http://localhost:5678/webhook/{{ $('Prepare Workflow Payload1').item.json.n8n_webhook_path }}",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "input",
              "value": "Test from automation"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          },
          "timeout": 30000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2240,
        368
      ],
      "id": "01b41c2a-27ca-49bd-b752-b4557a691d57",
      "name": "Test Webhook",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -64,
        432
      ],
      "id": "8e22bb61-eed5-4131-bf15-6051334f51ad",
      "name": "When clicking â€˜Execute workflowâ€™"
    }
  ],
  "connections": {
    "Has Nodes?2": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Test Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse & Validate Response6": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Parse & Validate Response6",
            "type": "main",
            "index": 0
          },
          {
            "node": "Parse & Validate Response1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse & Validate Response1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Code in JavaScript1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript1": {
      "main": [
        [
          {
            "node": "Prepare Workflow Payload1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Workflow Payload1": {
      "main": [
        [
          {
            "node": "Create Workflow1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Workflow1": {
      "main": [
        [
          {
            "node": "Activate Workflow1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Activate Workflow1": {
      "main": [
        [
          {
            "node": "Has Nodes?2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking â€˜Execute workflowâ€™": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "bb4bf121-8a48-49bd-a074-cda9a8360d61",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-10-04T11:23:48.542Z",
      "updatedAt": "2025-10-04T11:23:48.542Z",
      "role": "workflow:owner",
      "workflowId": "wM1zQwUJTEdK5uzK",
      "projectId": "nSUbNPn8P23MJaxQ",
      "project": {
        "createdAt": "2025-08-19T13:24:42.941Z",
        "updatedAt": "2025-08-19T13:25:25.513Z",
        "id": "nSUbNPn8P23MJaxQ",
        "name": "Sanjay Makwana <sanjay.makwana@e2m.solutions>",
        "type": "personal",
        "icon": null,
        "description": null,
        "projectRelations": [
          {
            "createdAt": "2025-08-19T13:24:42.957Z",
            "updatedAt": "2025-08-19T13:24:42.957Z",
            "userId": "bec985b6-4c5b-4f76-a28c-588449d2617c",
            "projectId": "nSUbNPn8P23MJaxQ",
            "user": {
              "createdAt": "2025-08-19T13:24:42.285Z",
              "updatedAt": "2025-10-08T04:11:33.000Z",
              "id": "bec985b6-4c5b-4f76-a28c-588449d2617c",
              "email": "sanjay.makwana@e2m.solutions",
              "firstName": "Sanjay",
              "lastName": "Makwana",
              "personalizationAnswers": {
                "version": "v4",
                "personalization_survey_submitted_at": "2025-08-19T13:25:56.618Z",
                "personalization_survey_n8n_version": "1.107.3",
                "automationGoalDevops": [
                  "ticketing-systems-integrations",
                  "data-syncing"
                ],
                "companyIndustryExtended": [
                  "it-industry"
                ],
                "companySize": "<20",
                "companyType": "other",
                "role": "it",
                "reportedSource": "google"
              },
              "settings": {
                "userActivated": true,
                "easyAIWorkflowOnboarded": true,
                "firstSuccessfulWorkflowId": "9HG8S6sJBTFvXXIZ",
                "userActivatedAt": 1755781899419,
                "npsSurvey": {
                  "responded": true,
                  "lastShownAt": 1756103555035
                }
              },
              "disabled": false,
              "mfaEnabled": false,
              "lastActiveAt": "2025-10-08",
              "isPending": false
            }
          }
        ]
      }
    }
  ],
  "tags": []
}