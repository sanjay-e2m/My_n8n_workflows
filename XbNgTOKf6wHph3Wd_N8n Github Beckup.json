{
  "createdAt": "2025-09-03T12:25:34.064Z",
  "updatedAt": "2025-09-04T12:00:21.000Z",
  "id": "XbNgTOKf6wHph3Wd",
  "name": "N8n Github Beckup",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "jsCode": "const workflow = $('Code1').first().json.workflow;\nconst fileName = $input.first().json.file_set;\n\n// Recursive cleaner\nfunction deepClean(obj) {\n  if (typeof obj !== 'object' || obj === null) return obj;\n\n  for (const key in obj) {\n    // Remove auth/secret related keys\n    if (\n      key.toLowerCase().includes('credential') ||\n      key.toLowerCase().includes('token') ||\n      key.toLowerCase().includes('key') ||\n      key.toLowerCase().includes('secret') ||\n      key.toLowerCase().includes('auth') ||\n      key.toLowerCase().includes('password') ||\n      key.toLowerCase().includes('header')\n    ) {\n      delete obj[key];\n    } else if (typeof obj[key] === 'object') {\n      obj[key] = deepClean(obj[key]);\n    }\n  }\n  return obj;\n}\n\nconst cleanWorkflow = deepClean(JSON.parse(JSON.stringify(workflow)));\n\nreturn {\n  json: {\n    file_name: fileName,\n    workflow: cleanWorkflow\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1392,
        -48
      ],
      "id": "3e9e3f0e-e917-454e-a6e7-518b75c5a0c6",
      "name": "Code3",
      "disabled": true
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.isCommon }}",
                    "rightValue": "true",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    },
                    "id": "65fba2fd-1100-4637-8bc1-d6a0d2ab5dd8"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "05a60a19-8625-4764-869c-3dc9f8f47488",
                    "leftValue": "={{ $json.isCommon }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "false",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "edd35a46-9bd5-46a9-95f6-2301848d104d",
                    "leftValue": "{{ $json.isCommon }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "notExists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -1760,
        96
      ],
      "id": "d9cbb5f7-f481-4fe8-911d-fb853ded687b",
      "name": "Switch",
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "const file_name = $('Code1').first().json.file_name || '';  \nconst workflowId_new = file_name.split(\"_\")[0];  \nconst file_set = $('Code1').first().json.file_name || '';\n\n// check if ANY workflow matches\nconst isCommon = $input.all().some(item => {\n  const fileName = item.json.name;   // or item.json.content.name if nested\n  const workflowId = fileName.split(\"_\")[0];\n  return workflowId === workflowId_new;\n});\n\nreturn [{ isCommon,file_set }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1968,
        96
      ],
      "id": "e8fa1fbb-c77d-4282-b715-1c56e98c468b",
      "name": "Code2",
      "disabled": true
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "value": "sanjay-e2m",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "My_n8n_workflows",
          "mode": "list",
          "cachedResultName": "My_n8n_workflows",
          "cachedResultUrl": "https://github.com/sanjay-e2m/My_n8n_workflows"
        },
        "filePath": "/",
        "asBinaryProperty": false,
        "additionalParameters": {}
      },
      "type": "n8n-nodes-base.github",
      "typeVersion": 1.1,
      "position": [
        -2176,
        96
      ],
      "id": "3db50943-35e0-4588-bd91-0716115b93d8",
      "name": "Get a file",
      "webhookId": "f2000f07-3d6e-44b4-b1a4-4a3e6579689d",
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// Handle both cases: array or object with array inside\nlet workflows = $json;\n\n// If the data is wrapped inside { data: [...] } or similar\nif (!Array.isArray(workflows) && Array.isArray(workflows.data)) {\n  workflows = workflows.data;\n}\n\n// If it's still not an array, wrap it\nif (!Array.isArray(workflows)) {\n  workflows = [workflows];\n}\n\nreturn workflows.map(wf => {\n  return {\n    json: {\n      workflow: wf,\n      file_name: `${wf.id}_${wf.name}.json`\n    }\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2384,
        96
      ],
      "id": "14a2f0ca-11c4-4c5f-bca6-a044129fb35c",
      "name": "Code1",
      "disabled": true
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "name": "Replace Me",
      "typeVersion": 1,
      "position": [
        -768,
        112
      ],
      "id": "ed2d4524-9327-4d7a-a89b-fce26f617ff6",
      "disabled": true
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -2640,
        80
      ],
      "id": "89129153-ed79-4f57-a83d-817d008c28f8",
      "name": "Loop Over Items",
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "const workflow = $('Code1').first().json.workflow;\nconst fileName = $input.first().json.content.name;\n\n// Recursive cleaner\nfunction deepClean(obj) {\n  if (typeof obj !== 'object' || obj === null) return obj;\n\n  for (const key in obj) {\n    // Remove auth/secret related keys\n    if (\n      key.toLowerCase().includes('credential') ||\n      key.toLowerCase().includes('token') ||\n      key.toLowerCase().includes('key') ||\n      key.toLowerCase().includes('secret') ||\n      key.toLowerCase().includes('auth') ||\n      key.toLowerCase().includes('password') ||\n      key.toLowerCase().includes('header')\n    ) {\n      delete obj[key];\n    } else if (typeof obj[key] === 'object') {\n      obj[key] = deepClean(obj[key]);\n    }\n  }\n  return obj;\n}\n\nconst cleanWorkflow = deepClean(JSON.parse(JSON.stringify(workflow)));\n\nreturn {\n  json: {\n    file_name: fileName,\n    workflow: cleanWorkflow\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1280,
        112
      ],
      "id": "519485e6-1adb-439a-9f23-71b446d8ae7c",
      "name": "Code",
      "disabled": true
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "edit",
        "owner": {
          "__rl": true,
          "value": "=sanjay-e2m",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "=My_n8n_workflows",
          "mode": "name"
        },
        "filePath": "={{ $json.file_name }}",
        "fileContent": "={{ JSON.stringify($json.workflow, null, 2) }}",
        "commitMessage": "=File Modify at {{ new Date().toISOString() }}"
      },
      "type": "n8n-nodes-base.github",
      "typeVersion": 1.1,
      "position": [
        -1008,
        112
      ],
      "id": "89737b96-3624-4d02-a060-86b9d2064c4b",
      "name": "Edit a file",
      "webhookId": "56f4f5a5-f1d0-4291-a875-f204f4e136cd",
      "disabled": true
    },
    {
      "parameters": {
        "operation": "get",
        "workflowId": {
          "__rl": true,
          "value": "={{ $json.n8n_id }}",
          "mode": "id"
        },
        "requestOptions": {}
      },
      "type": "n8n-nodes-base.n8n",
      "typeVersion": 1,
      "position": [
        -2880,
        80
      ],
      "id": "aeaa56e1-7375-4ca1-8310-d7777e3bf85f",
      "name": "Get a workflow",
      "disabled": true
    },
    {
      "parameters": {
        "resource": "file",
        "owner": {
          "__rl": true,
          "value": "=sanjay-e2m",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "=My_n8n_workflows",
          "mode": "name"
        },
        "filePath": "={{ $json.file_set }}",
        "fileContent": "File Created for my content",
        "commitMessage": "= File Created at {{ new Date().toISOString() }}"
      },
      "type": "n8n-nodes-base.github",
      "typeVersion": 1.1,
      "position": [
        -1456,
        112
      ],
      "id": "ad9a8e84-f1d4-4f9c-aa00-8fe0e3bfff11",
      "name": "Create a file",
      "webhookId": "edcd093f-7e2e-45ed-9855-29d49a9147cb",
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6be8c184-8fb7-47a9-ad42-d0dc3db1eea4",
              "name": "name",
              "type": "string",
              "value": "={{ $json.name }}"
            },
            {
              "id": "n8n-id",
              "name": "n8n_id",
              "type": "string",
              "value": "={{ $json.id }}"
            },
            {
              "id": "n8n-updated",
              "name": "n8n_updated",
              "type": "string",
              "value": "={{ $json.updatedAt }}"
            }
          ]
        },
        "options": {}
      },
      "id": "b392b433-c248-40cd-884d-e03151fb2322",
      "name": "Prepare n8n workflow data",
      "type": "n8n-nodes-base.set",
      "position": [
        -3088,
        80
      ],
      "typeVersion": 3.3,
      "disabled": true
    },
    {
      "parameters": {
        "filters": {},
        "requestOptions": {}
      },
      "id": "4da840e7-5f2b-450d-a962-707a09961110",
      "name": "n8n - get all workflows",
      "type": "n8n-nodes-base.n8n",
      "position": [
        -3312,
        80
      ],
      "typeVersion": 1,
      "disabled": true
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "repo.owner",
              "value": "sanjay-e2m"
            },
            {
              "name": "repo.name",
              "value": "My_n8n_workflows"
            },
            {
              "name": "repo.path",
              "value": "workflows/"
            }
          ]
        },
        "options": {}
      },
      "id": "a035c9d6-8447-41b2-9402-adfddc6f432e",
      "name": "Globals",
      "type": "n8n-nodes-base.set",
      "position": [
        -3536,
        80
      ],
      "typeVersion": 1,
      "disabled": true
    },
    {
      "parameters": {},
      "id": "9d59f214-5918-4727-8890-e7ce7cc4b561",
      "name": "On clicking 'execute'",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        -3712,
        -416
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsCode": "// Handle both cases: array or object with array inside\nlet workflows = $json;\n\n// If the data is wrapped inside { data: [...] } or similar\nif (!Array.isArray(workflows) && Array.isArray(workflows.data)) {\n  workflows = workflows.data;\n}\n\n// If it's still not an array, wrap it\nif (!Array.isArray(workflows)) {\n  workflows = [workflows];\n}\n\nreturn workflows.map(wf => {\n  return {\n    json: {\n      workflow: wf,\n      file_name: `${wf.id}_${wf.name}.json`\n    }\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2240,
        -400
      ],
      "id": "ab3a10a5-2110-43e2-adfb-7ec01e46c6c1",
      "name": "Format Workflow Data"
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "value": "sanjay-e2m",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "My_n8n_workflows",
          "mode": "list",
          "cachedResultName": "My_n8n_workflows",
          "cachedResultUrl": "https://github.com/sanjay-e2m/My_n8n_workflows"
        },
        "filePath": "/",
        "asBinaryProperty": false,
        "additionalParameters": {}
      },
      "type": "n8n-nodes-base.github",
      "typeVersion": 1.1,
      "position": [
        -2032,
        -400
      ],
      "id": "458964bb-3382-4926-aee2-6b078c81e6b5",
      "name": "Get Repository Files",
      "webhookId": "d06b2aa4-ea54-4ac8-9c1c-94484676fcfc"
    },
    {
      "parameters": {
        "jsCode": "const file_name = $('Format Workflow Data').first().json.file_name || '';  \nconst workflowId_new = file_name.split(\"_\")[0];  \nconst file_set = $('Format Workflow Data').first().json.file_name || '';\n\n// check if ANY workflow matches\nconst isCommon = $input.all().some(item => {\n  const fileName = item.json.name;   // or item.json.content.name if nested\n  const workflowId = fileName.split(\"_\")[0];\n  return workflowId === workflowId_new;\n});\n\nreturn [{ isCommon, file_set }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1824,
        -400
      ],
      "id": "3159521d-4352-44fd-82b6-1cdd47cb8546",
      "name": "Check If Workflow Exists"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.isCommon }}",
                    "rightValue": "true",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    },
                    "id": "557485dc-c6c4-4245-83a4-5dd2d04e3135"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.isCommon }}",
                    "rightValue": "false",
                    "operator": {
                      "type": "boolean",
                      "operation": "false"
                    },
                    "id": "bd1af472-eaa4-47f1-8d6e-333fc75a5c91"
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -1616,
        -400
      ],
      "id": "f5a07b44-542f-4a00-9171-54c683e4d490",
      "name": "Workflow Exists?"
    },
    {
      "parameters": {
        "jsCode": "const workflow = $('Format Workflow Data').first().json.workflow;\nconst fileName = $input.first().json.file_set;\n\n// Recursive cleaner\nfunction deepClean(obj) {\n  if (typeof obj !== 'object' || obj === null) return obj;\n\n  for (const key in obj) {\n    // Remove auth/secret related keys\n    if (\n      key.toLowerCase().includes('credential') ||\n      key.toLowerCase().includes('token') ||\n      key.toLowerCase().includes('key') ||\n      key.toLowerCase().includes('secret') ||\n      key.toLowerCase().includes('auth') ||\n      key.toLowerCase().includes('password') ||\n      key.toLowerCase().includes('header')\n    ) {\n      delete obj[key];\n    } else if (typeof obj[key] === 'object') {\n      obj[key] = deepClean(obj[key]);\n    }\n  }\n  return obj;\n}\n\nconst cleanWorkflow = deepClean(JSON.parse(JSON.stringify(workflow)));\n\nreturn {\n  json: {\n    file_name: fileName,\n    workflow: cleanWorkflow\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1248,
        -544
      ],
      "id": "60aa6b33-a44d-4e07-80aa-d019713c2e7f",
      "name": "Clean Workflow Data"
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "edit",
        "owner": {
          "__rl": true,
          "value": "=sanjay-e2m",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "=My_n8n_workflows",
          "mode": "name"
        },
        "filePath": "={{ $json.file_name }}",
        "fileContent": "={{ JSON.stringify($json.workflow, null, 2) }}",
        "commitMessage": "=Workflow updated at {{ new Date().toISOString() }}"
      },
      "type": "n8n-nodes-base.github",
      "typeVersion": 1.1,
      "position": [
        -864,
        -544
      ],
      "id": "74be490c-6447-441e-bc3b-68d1f3c3b1b4",
      "name": "Update Workflow File",
      "webhookId": "7f79627f-a209-493d-a90d-6d87e6dc5bdd"
    },
    {
      "parameters": {
        "resource": "file",
        "owner": {
          "__rl": true,
          "value": "=sanjay-e2m",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "=My_n8n_workflows",
          "mode": "name"
        },
        "filePath": "={{ $json.file_set }}",
        "fileContent": "={{ JSON.stringify($('Format Workflow Data').first().json.workflow, null, 2) }}",
        "commitMessage": "=New workflow created at {{ new Date().toISOString() }}"
      },
      "type": "n8n-nodes-base.github",
      "typeVersion": 1.1,
      "position": [
        -1312,
        -256
      ],
      "id": "e5e338fa-e277-4c66-87cf-6231b43b2f80",
      "name": "Create New Workflow File",
      "webhookId": "984aa4ac-42e6-49a5-acff-59591e2f82f5"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -2496,
        -416
      ],
      "id": "f5473ab4-e793-4326-8a18-0c5f7d4c8a94",
      "name": "Process Workflows in Batches"
    },
    {
      "parameters": {
        "operation": "get",
        "workflowId": {
          "__rl": true,
          "value": "={{ $json.n8n_id }}",
          "mode": "id"
        },
        "requestOptions": {}
      },
      "type": "n8n-nodes-base.n8n",
      "typeVersion": 1,
      "position": [
        -2736,
        -416
      ],
      "id": "12054c6f-848c-4903-b173-87409162f2e9",
      "name": "Get Workflow Details"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "name": "name",
              "type": "string",
              "value": "={{ $json.name }}"
            },
            {
              "name": "n8n_id",
              "type": "string",
              "value": "={{ $json.id }}"
            },
            {
              "name": "n8n_updated",
              "type": "string",
              "value": "={{ $json.updatedAt }}"
            }
          ]
        },
        "options": {}
      },
      "id": "022fd329-8a8d-494d-9cc3-483bfc645bba",
      "name": "Prepare Workflow Data",
      "type": "n8n-nodes-base.set",
      "position": [
        -2944,
        -416
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "filters": {},
        "requestOptions": {}
      },
      "id": "d63b12a5-e2b9-46d3-8633-c32e593d58b7",
      "name": "Get All Workflows",
      "type": "n8n-nodes-base.n8n",
      "position": [
        -3168,
        -416
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "repo.owner",
              "value": "sanjay-e2m"
            },
            {
              "name": "repo.name",
              "value": "My_n8n_workflows"
            },
            {
              "name": "repo.path",
              "value": "workflows/"
            }
          ]
        },
        "options": {}
      },
      "id": "0e633b9a-ed47-4a40-b044-6fc86208023c",
      "name": "Set Repository Info",
      "type": "n8n-nodes-base.set",
      "position": [
        -3392,
        -416
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "This workflow exports n8n workflows to GitHub:\n\n1. Gets all workflows from n8n instance\n2. Processes them in batches\n3. Checks if workflow already exists in GitHub repo\n4. If exists: Updates the workflow file (after cleaning sensitive data)\n5. If new: Creates a new workflow file\n6. All sensitive data (credentials, tokens, etc.) is removed before saving"
      },
      "id": "ddbbd86f-c8b9-404b-ba3d-b48bed58cf0a",
      "name": "Workflow Description",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -3648,
        -688
      ],
      "typeVersion": 1
    }
  ],
  "connections": {
    "Switch": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create a file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get a file": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Get a file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "Edit a file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Replace Me": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Edit a file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit a file": {
      "main": [
        [
          {
            "node": "Replace Me",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get a workflow": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create a file": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare n8n workflow data": {
      "main": [
        [
          {
            "node": "Get a workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "n8n - get all workflows": {
      "main": [
        [
          {
            "node": "Prepare n8n workflow data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Globals": {
      "main": [
        [
          {
            "node": "n8n - get all workflows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "On clicking 'execute'": {
      "main": [
        [
          {
            "node": "Set Repository Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Workflow Data": {
      "main": [
        [
          {
            "node": "Get Repository Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Repository Files": {
      "main": [
        [
          {
            "node": "Check If Workflow Exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check If Workflow Exists": {
      "main": [
        [
          {
            "node": "Workflow Exists?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Workflow Exists?": {
      "main": [
        [
          {
            "node": "Clean Workflow Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create New Workflow File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clean Workflow Data": {
      "main": [
        [
          {
            "node": "Update Workflow File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Workflows in Batches": {
      "main": [
        [],
        [
          {
            "node": "Format Workflow Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Workflow Details": {
      "main": [
        [
          {
            "node": "Process Workflows in Batches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Workflow Data": {
      "main": [
        [
          {
            "node": "Get Workflow Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get All Workflows": {
      "main": [
        [
          {
            "node": "Prepare Workflow Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Repository Info": {
      "main": [
        [
          {
            "node": "Get All Workflows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "2810f4ff-54f3-436e-b05c-3c3f5e720724",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-09-03T12:25:34.064Z",
      "updatedAt": "2025-09-03T12:25:34.064Z",
      "role": "workflow:owner",
      "workflowId": "XbNgTOKf6wHph3Wd",
      "projectId": "nSUbNPn8P23MJaxQ",
      "project": {
        "createdAt": "2025-08-19T13:24:42.941Z",
        "updatedAt": "2025-08-19T13:25:25.513Z",
        "id": "nSUbNPn8P23MJaxQ",
        "name": "Sanjay Makwana <sanjay.makwana@e2m.solutions>",
        "type": "personal",
        "icon": null,
        "description": null,
        "projectRelations": [
          {
            "createdAt": "2025-08-19T13:24:42.957Z",
            "updatedAt": "2025-08-19T13:24:42.957Z",
            "role": "project:personalOwner",
            "userId": "bec985b6-4c5b-4f76-a28c-588449d2617c",
            "projectId": "nSUbNPn8P23MJaxQ",
            "user": {
              "createdAt": "2025-08-19T13:24:42.285Z",
              "updatedAt": "2025-09-04T04:38:19.000Z",
              "id": "bec985b6-4c5b-4f76-a28c-588449d2617c",
              "email": "sanjay.makwana@e2m.solutions",
              "firstName": "Sanjay",
              "lastName": "Makwana",
              "personalizationAnswers": {
                "version": "v4",
                "personalization_survey_submitted_at": "2025-08-19T13:25:56.618Z",
                "personalization_survey_n8n_version": "1.107.3",
                "automationGoalDevops": [
                  "ticketing-systems-integrations",
                  "data-syncing"
                ],
                "companyIndustryExtended": [
                  "it-industry"
                ],
                "companySize": "<20",
                "companyType": "other",
                "role": "it",
                "reportedSource": "google"
              },
              "settings": {
                "userActivated": true,
                "easyAIWorkflowOnboarded": true,
                "firstSuccessfulWorkflowId": "9HG8S6sJBTFvXXIZ",
                "userActivatedAt": 1755781899419,
                "npsSurvey": {
                  "responded": true,
                  "lastShownAt": 1756103555035
                }
              },
              "role": "global:owner",
              "disabled": false,
              "mfaEnabled": false,
              "lastActiveAt": "2025-09-04",
              "isPending": false
            }
          }
        ]
      }
    }
  ],
  "tags": []
}