// More robust Extract URLs node
const input = $input.all();
const output = [];

console.log('Input items received:', input.length);

for (const item of input) {
    console.log('Processing item structure:', Object.keys(item.json || {}));
    
    // Handle different possible response structures
    let tasks = [];
    
    if (item.json.tasks) {
        tasks = item.json.tasks;
    } else if (item.json.result && Array.isArray(item.json.result)) {
        // Sometimes the result might be directly in the response
        tasks = [{ result: item.json.result }];
    } else if (item.json.items) {
        // Sometimes items might be directly available
        tasks = [{ result: [{ items: item.json.items }] }];
    }
    
    console.log('Tasks to process:', tasks.length);
    
    for (const task of tasks) {
        const results = task.result || [];
        console.log('Results in task:', results.length);
        
        for (const result of results) {
            const items = result.items || [];
            console.log('Items in result:', items.length);
            
            // Log sample of items
            if (items.length > 0) {
                console.log('Sample items:', items.slice(0, 2).map(i => ({
                    url: i.url,
                    status_code: i.status_code
                })));
            }
            
            for (const page of items) {
                // Include all status codes for now, not just 200
                if (page.url) {
                    output.push({ 
                        json: { 
                            url: page.url,
                            status_code: page.status_code 
                        } 
                    });
                }
            }
        }
    }
}

console.log('Total URLs extracted:', output.length);
console.log('Status code breakdown:', output.reduce((acc, item) => {
    const code = item.json.status_code;
    acc[code] = (acc[code] || 0) + 1;
    return acc;
}, {}));

// Return all URLs found
return output;