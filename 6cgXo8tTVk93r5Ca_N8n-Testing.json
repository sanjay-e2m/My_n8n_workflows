{
  "createdAt": "2025-09-30T09:23:05.192Z",
  "updatedAt": "2025-10-04T08:46:28.000Z",
  "id": "6cgXo8tTVk93r5Ca",
  "name": "N8n-Testing",
  "active": false,
  "isArchived": true,
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "=## Workflow JSON to Analyze:\n\n{{ $json.chatInput }}\n\n---\n\n**Instructions:** Analyze the above n8n workflow JSON and generate test cases following the exact format specified in your system prompt. Output ONLY the JSON object, nothing else.",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "You are an expert n8n Automation Test Case Generator. You analyze n8n workflow JSON and generate comprehensive test data.\n\n## Analysis Steps:\n1. Identify the trigger node (Webhook, Chat Trigger, Manual Trigger, etc.)\n2. Find the first action node that receives external input\n3. Extract all input fields from the payload structure\n4. Determine the workflow purpose (image generation, data processing, notification, etc.)\n5. Infer data types for each field based on field names and usage\n\n## Output Requirements:\nYou MUST output ONLY a valid JSON object. NO markdown, NO explanations, NO additional text.\n\n### Exact JSON Structure:\n```json\n{\n  \"automationType\": \"<workflow_type>\",\n  \"requiredFields\": {\n    \"field1\": \"dataType\",\n    \"field2\": \"dataType\"\n  },\n  \"cases\": {\n    \"case_1\": {\n      \"description\": \"Valid request with realistic data\",\n      \"data\": {\n        \"field1\": \"valid_value\",\n        \"field2\": \"valid_value\"\n      }\n    },\n    \"case_2\": {\n      \"description\": \"Missing required field (empty string)\",\n      \"data\": {\n        \"field1\": \"\",\n        \"field2\": \"valid_value\"\n      }\n    },\n    \"case_3\": {\n      \"description\": \"Invalid data type for field\",\n      \"data\": {\n        \"field1\": 12345,\n        \"field2\": \"valid_value\"\n      }\n    },\n    \"case_4\": {\n      \"description\": \"Edge case with special characters, long input, or boundary values\",\n      \"data\": {\n        \"field1\": \"edge_case_value\",\n        \"field2\": \"edge_case_value\"\n      }\n    }\n  }\n}\n```\n\n### Test Case Guidelines:\n\n**case_1 (Valid):**\n- Use realistic, production-like data\n- For image generation: descriptive, detailed prompts\n- For emails: valid email format\n- For names: realistic full names\n- For numbers: reasonable values within expected range\n\n**case_2 (Missing Required Field):**\n- Set ONE required field to empty string \"\"\n- Keep other fields valid\n- This tests error handling for missing data\n\n**case_3 (Invalid Data Type):**\n- Provide wrong data type for at least one field\n- If expecting string, provide number (e.g., 12345)\n- If expecting number, provide string (e.g., \"not_a_number\")\n- If expecting email, provide invalid format (e.g., \"invalid-email\")\n- If expecting boolean, provide string (e.g., \"true\" instead of true)\n\n**case_4 (Edge Case):**\n- For text/prompts: Very long input (200+ chars) with special characters, emojis, unicode\n- For numbers: Boundary values (0, negative, very large, decimal)\n- For emails: Edge valid formats (plus addressing, subdomains)\n- For dates: Future dates, past dates, edge of valid range\n\n### Workflow Type Detection:\n- If workflow has image-related keywords → \"Image Generation Workflow\"\n- If workflow has email nodes → \"Email Automation Workflow\"\n- If workflow has database/CRUD operations → \"Data Processing Workflow\"\n- If workflow has notification nodes → \"Notification Workflow\"\n- Default: \"Generic Automation Workflow\"\n\n### Data Type Inference:\n- Fields named \"email\", \"mail\" → \"email\"\n- Fields named \"name\", \"username\", \"title\" → \"text\"\n- Fields named \"age\", \"count\", \"amount\", \"price\" → \"number\"\n- Fields named \"description\", \"prompt\", \"message\", \"input\" → \"text\"\n- Fields named \"date\", \"timestamp\" → \"date\"\n- Fields named \"active\", \"enabled\", \"status\" → \"boolean\"\n- Default → \"text\"\n\n### Critical Rules:\n1. Output ONLY the JSON object\n2. NO markdown code blocks (no ```json or ```)\n3. NO explanatory text before or after JSON\n4. Ensure all JSON is properly formatted and valid\n5. All string values must use double quotes\n6. No trailing commas\n7. Escape special characters in strings properly\n\nStart your response with { and end with }"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -192,
        -16
      ],
      "id": "4f45aeae-964b-4db9-a507-ca54af849739",
      "name": "AI Agent",
      "disabled": true
    },
    {
      "parameters": {
        "options": {
          "temperature": 0.1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -192,
        224
      ],
      "id": "fff60c8f-3779-454b-8be4-523e75f57d22",
      "name": "Google Gemini Chat Model",
      "disabled": true
    },
    {
      "parameters": {
        "public": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        -448,
        -16
      ],
      "id": "99b9c707-5c28-4287-a3e8-f97f1873b0a9",
      "name": "When chat message received",
      "webhookId": "3a962fb1-1cda-4624-9995-39fef81a49b3",
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// Enhanced JSON Parser with Better Error Handling\nlet input = $input.first().json.output;\n\nfunction cleanAndParseJSON(rawInput) {\n    try {\n        // Step 1: Remove markdown code blocks\n        let cleaned = rawInput.replace(/```json\\s*/g, \"\").replace(/```\\s*/g, \"\");\n        \n        // Step 2: Remove any leading/trailing text before first { and after last }\n        let firstBrace = cleaned.indexOf(\"{\");\n        let lastBrace = cleaned.lastIndexOf(\"}\");\n        \n        if (firstBrace === -1 || lastBrace === -1) {\n            throw new Error(\"No JSON object found in response\");\n        }\n        \n        cleaned = cleaned.substring(firstBrace, lastBrace + 1);\n        \n        // Step 3: Unescape common escape sequences\n        cleaned = cleaned.replace(/\\\\n/g, \" \")\n                       .replace(/\\\\r/g, \" \")\n                       .replace(/\\\\t/g, \" \")\n                       .replace(/\\\\\"/g, '\"');\n        \n        // Step 4: Fix common AI mistakes\n        // Fix unquoted property names\n        cleaned = cleaned.replace(/([{,]\\s*)([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*:/g, '$1\"$2\":');\n        \n        // Remove trailing commas\n        cleaned = cleaned.replace(/,\\s*([}\\]])/g, '$1');\n        \n        // Fix single quotes to double quotes (carefully)\n        cleaned = cleaned.replace(/:\\s*'([^']*)'/g, ': \"$1\"');\n        \n        // Step 5: Balance braces if truncated\n        let openBraces = (cleaned.match(/{/g) || []).length;\n        let closeBraces = (cleaned.match(/}/g) || []).length;\n        if (closeBraces < openBraces) {\n            cleaned += \"}\".repeat(openBraces - closeBraces);\n        }\n        \n        let openBrackets = (cleaned.match(/\\[/g) || []).length;\n        let closeBrackets = (cleaned.match(/\\]/g) || []).length;\n        if (closeBrackets < openBrackets) {\n            cleaned += \"]\".repeat(openBrackets - closeBrackets);\n        }\n        \n        // Step 6: Attempt to parse\n        return JSON.parse(cleaned);\n        \n    } catch (error) {\n        throw new Error(`JSON parsing failed: ${error.message}`);\n    }\n}\n\nfunction validateTestCaseStructure(parsed) {\n    // Validate required top-level fields\n    if (!parsed.automationType) {\n        throw new Error(\"Missing 'automationType' field\");\n    }\n    \n    if (!parsed.requiredFields || typeof parsed.requiredFields !== 'object') {\n        throw new Error(\"Missing or invalid 'requiredFields' object\");\n    }\n    \n    if (!parsed.cases || typeof parsed.cases !== 'object') {\n        throw new Error(\"Missing or invalid 'cases' object\");\n    }\n    \n    // Validate all 4 cases exist\n    const requiredCases = ['case_1', 'case_2', 'case_3', 'case_4'];\n    for (const caseName of requiredCases) {\n        if (!parsed.cases[caseName]) {\n            throw new Error(`Missing ${caseName}`);\n        }\n        \n        const testCase = parsed.cases[caseName];\n        if (!testCase.description || !testCase.data) {\n            throw new Error(`${caseName} missing 'description' or 'data'`);\n        }\n    }\n    \n    return true;\n}\n\ntry {\n    // Parse the JSON\n    const parsedJSON = cleanAndParseJSON(input);\n    \n    // Validate structure\n    validateTestCaseStructure(parsedJSON);\n    \n    // Return successfully parsed and validated JSON\n    return [{\n        json: {\n            success: true,\n            testCases: parsedJSON,\n            metadata: {\n                automationType: parsedJSON.automationType,\n                fieldCount: Object.keys(parsedJSON.requiredFields).length,\n                caseCount: Object.keys(parsedJSON.cases).length,\n                timestamp: new Date().toISOString()\n            }\n        }\n    }];\n    \n} catch (error) {\n    // Return detailed error information\n    return [{\n        json: {\n            success: false,\n            error: error.message,\n            rawOutput: input.substring(0, 500),\n            suggestion: \"The AI response was not in the expected format. Try re-running the workflow or check the system prompt.\"\n        }\n    }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        176,
        -16
      ],
      "id": "2852a1c3-4a5d-4466-9d3b-6dbde5421e90",
      "name": "Parse and Validate JSON",
      "disabled": true
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.success }}",
              "value2": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        416,
        -16
      ],
      "id": "270fc2e5-5962-411a-8bd0-40921b1229fe",
      "name": "Validation Check",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:5678/webhook/webhook-replace-when-chat-message-received",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "=",
              "value": "={{ $json.testCases }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        656,
        -128
      ],
      "id": "e4374862-3685-47a5-bc5a-efafc5a55b0a",
      "name": "Send Test Cases",
      "disabled": true,
      "notes": "Sends validated test cases to the next workflow step"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        656,
        80
      ],
      "id": "87db87aa-9b38-45e3-b105-2a096b65982b",
      "name": "Error Response",
      "disabled": true
    },
    {
      "parameters": {
        "content": "## Test Case Genrator\n",
        "height": 80,
        "width": 288,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -448,
        -192
      ],
      "typeVersion": 1,
      "id": "deb488ae-2261-4645-99c5-3a218bc375e1",
      "name": "Sticky Note",
      "disabled": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "has-nodes",
              "leftValue": "={{ $json.nodes?.length > 0 }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1856,
        1056
      ],
      "id": "38491818-73d9-42f4-99c7-46c3a3e5ea61",
      "name": "Has Nodes?1"
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "options": {}
      },
      "id": "5b4f2288-c199-4e09-8a72-498e5f6b3f02",
      "name": "Transform to base1",
      "type": "n8n-nodes-base.extractFromFile",
      "position": [
        -32,
        1184
      ],
      "typeVersion": 1,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"contents\": [{\n    \"parts\": [\n      {\n        \"text\": \"You are a JSON generator for n8n workflows. CRITICAL REQUIREMENTS:\\n\\n1. Return ONLY valid, parseable JSON - no markdown, no explanations\\n2. Use this EXACT structure:\\n{\\n  \\\"modified_workflow\\\": {\\n    \\\"nodes\\\": [...],\\n    \\\"connections\\\": {...}\\n  },\\n  \\\"changes_made\\\": {\\n    \\\"updated_references\\\": [{\\\"node\\\": \\\"WorkflowName\\\"}]\\n  }\\n}\\n\\n3. JSON RULES:\\n   - All strings must use double quotes\\n   - No trailing commas\\n   - All brackets must match\\n   - Escape special characters\\n   - Numbers without quotes\\n\\n4. Each node MUST have: id, name, type, position [x,y], typeVersion, parameters\\n5. Validate all connections reference existing node names\\n6. Test your JSON before responding\\n\\nGenerate updated n8n workflow from the provided data.\"\n      },\n      {\n        \"inline_data\": {\n          \"mime_type\": \"text/plain\",\n          \"data\": \"{{ $json.data }}\"\n        }\n      }\n    ]\n  }],\n  \"generationConfig\": {\n    \"temperature\": 0.1,\n    \"topP\": 0.9,\n    \"topK\": 20,\n    \"maxOutputTokens\": 8192\n  }\n}",
        "options": {
          "timeout": 90000
        }
      },
      "id": "463e9e75-35c6-4873-823e-d917979805d9",
      "name": "Call Gemini API",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        240,
        1168
      ],
      "typeVersion": 4.2,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "// ULTRA-ROBUST JSON PARSER with auto-repair\nconst input = $input.first().json;\nlet raw = input.candidates?.[0]?.content?.parts?.[0]?.text;\n\nif (!raw) {\n    throw new Error(\"❌ No response from Gemini API\");\n}\n\nconsole.log(\"📥 Raw response length:\", raw.length);\n\n// Step 1: Clean markdown and whitespace\nraw = raw\n    .replace(/```json\\s*/gi, '')\n    .replace(/```\\s*/g, '')\n    .replace(/^[^{]*/, '')  // Remove text before first {\n    .replace(/[^}]*$/, '')  // Remove text after last }\n    .trim();\n\n// Step 2: Extract JSON object\nlet jsonStart = raw.indexOf('{');\nlet jsonEnd = raw.lastIndexOf('}');\n\nif (jsonStart === -1 || jsonEnd === -1) {\n    throw new Error(\"❌ No JSON object found in response\");\n}\n\nraw = raw.substring(jsonStart, jsonEnd + 1);\n\n// Step 3: Advanced JSON repair\nfunction repairJSON(str) {\n    let repaired = str;\n    \n    // Fix 1: Remove trailing commas before } or ]\n    repaired = repaired.replace(/,\\s*([\\]}])/g, '$1');\n    \n    // Fix 2: Add missing commas between array elements\n    repaired = repaired.replace(/\\}\\s*\\{/g, '},{');\n    repaired = repaired.replace(/\\]\\s*\\[/g, '],[');\n    \n    // Fix 3: Fix unescaped quotes in strings\n    repaired = repaired.replace(/\"([^\"]*?)\"([^,:{}\\[\\]]*?)\"([^\"]*?)\"/g, (match, p1, p2, p3) => {\n        if (p2 && !p2.match(/^\\s*[,:\\]}]\\s*$/)) {\n            return `\"${p1}${p2.replace(/\"/g, '\\\\\"')}${p3}\"`;\n        }\n        return match;\n    });\n    \n    // Fix 4: Remove control characters\n    repaired = repaired.replace(/[\\x00-\\x1F\\x7F]/g, '');\n    \n    // Fix 5: Fix missing quotes around property names\n    repaired = repaired.replace(/([{,]\\s*)([a-zA-Z_][a-zA-Z0-9_]*)\\s*:/g, '$1\"$2\":');\n    \n    // Fix 6: Ensure proper spacing\n    repaired = repaired.replace(/([\\[{,])\\s+/g, '$1');\n    repaired = repaired.replace(/\\s+([\\]}])/g, '$1');\n    \n    return repaired;\n}\n\n// Step 4: Try parsing with multiple strategies\nlet parsed = null;\nlet parseAttempts = [\n    () => JSON.parse(raw),\n    () => JSON.parse(repairJSON(raw)),\n    () => {\n        // Try to extract just the workflow object if it's nested\n        const workflowMatch = raw.match(/\"modified_workflow\"\\s*:\\s*\\{[\\s\\S]*?\\}\\s*,\\s*\"changes_made\"/i);\n        if (workflowMatch) {\n            const extracted = '{' + workflowMatch[0] + ':{\"updated_references\":[{\"node\":\"AutoGenerated\"}]}}';\n            return JSON.parse(repairJSON(extracted));\n        }\n        throw new Error(\"Cannot extract workflow\");\n    },\n    () => {\n        // Emergency: Try to parse just nodes array\n        const nodesMatch = raw.match(/\"nodes\"\\s*:\\s*\\[[\\s\\S]*?\\]/i);\n        const connectionsMatch = raw.match(/\"connections\"\\s*:\\s*\\{[\\s\\S]*?\\}/i);\n        if (nodesMatch && connectionsMatch) {\n            return {\n                modified_workflow: {\n                    nodes: JSON.parse('[' + nodesMatch[0].split('[')[1]),\n                    connections: JSON.parse('{' + connectionsMatch[0].split('{')[1])\n                },\n                changes_made: { updated_references: [{node: \"EmergencyParse_\" + Date.now()}] }\n            };\n        }\n        throw new Error(\"Cannot extract nodes/connections\");\n    }\n];\n\nlet lastError = null;\nfor (let i = 0; i < parseAttempts.length; i++) {\n    try {\n        console.log(`🔧 Parse attempt ${i + 1}...`);\n        parsed = parseAttempts[i]();\n        console.log(`✅ Parse successful on attempt ${i + 1}`);\n        break;\n    } catch (e) {\n        lastError = e;\n        console.log(`❌ Attempt ${i + 1} failed: ${e.message}`);\n    }\n}\n\nif (!parsed) {\n    // Save raw response for debugging\n    const errorContext = raw.substring(0, 1000);\n    throw new Error(`❌ All parse attempts failed. Last error: ${lastError.message}\\n\\nFirst 1000 chars:\\n${errorContext}`);\n}\n\n// Step 5: Validate structure\nif (!parsed.modified_workflow) {\n    throw new Error(\"❌ Missing 'modified_workflow' in parsed JSON\");\n}\n\nif (!parsed.modified_workflow.nodes || !Array.isArray(parsed.modified_workflow.nodes)) {\n    throw new Error(\"❌ Missing or invalid 'nodes' array\");\n}\n\nif (!parsed.modified_workflow.connections || typeof parsed.modified_workflow.connections !== 'object') {\n    console.log(\"⚠️ Invalid connections, using empty object\");\n    parsed.modified_workflow.connections = {};\n}\n\nif (!parsed.changes_made) {\n    console.log(\"⚠️ Missing changes_made, using default\");\n    parsed.changes_made = {\n        updated_references: [{ node: \"AI_Generated_\" + Date.now() }]\n    };\n}\n\nconst modify_nodes = parsed.modified_workflow.nodes;\nconst modify_connections = parsed.modified_workflow.connections;\nconst changes_made = parsed.changes_made;\n\nif (modify_nodes.length === 0) {\n    throw new Error(\"❌ Workflow has no nodes\");\n}\n\nconsole.log(`✅ Successfully parsed workflow with ${modify_nodes.length} nodes`);\n\nreturn [{ \n    json: { \n        modify_nodes, \n        modify_connections, \n        changes_made,\n        parse_info: {\n            original_length: input.candidates?.[0]?.content?.parts?.[0]?.text?.length || 0,\n            cleaned_length: raw.length,\n            nodes_count: modify_nodes.length\n        }\n    } \n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        480,
        1152
      ],
      "id": "3b3e372d-637c-4143-8e05-5cbe45bcd3b6",
      "name": "Parse & Validate Response",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "// Advanced workflow validation with auto-fix\nconst nodes = $input.first().json.modify_nodes;\nconst connections = $input.first().json.modify_connections;\nconst changes_made = $input.first().json.changes_made;\n\nconsole.log(`🔍 Validating ${nodes.length} nodes...`);\n\n// 1. Validate and fix all nodes\nconst validatedNodes = [];\nconst nodeIds = new Set();\nconst nodeNames = new Set();\nlet fixedCount = 0;\n\nfor (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    let fixed = false;\n    \n    // Fix missing ID\n    if (!node.id) {\n        node.id = `node-${Date.now()}-${i}-${Math.random().toString(36).substr(2, 9)}`;\n        fixed = true;\n    }\n    \n    // Fix missing name\n    if (!node.name) {\n        node.name = `Node_${i + 1}_${node.type?.split('.').pop() || 'Unknown'}`;\n        fixed = true;\n    }\n    \n    // Check for duplicate names\n    if (nodeNames.has(node.name)) {\n        node.name = `${node.name}_${Date.now()}_${i}`;\n        fixed = true;\n    }\n    \n    // Fix missing type\n    if (!node.type) {\n        console.log(`❌ Node ${node.name} has no type - skipping`);\n        continue;\n    }\n    \n    // Fix missing position\n    if (!node.position || !Array.isArray(node.position) || node.position.length !== 2) {\n        node.position = [i * 240, 1824];\n        fixed = true;\n    }\n    \n    // Fix invalid position values\n    if (typeof node.position[0] !== 'number' || typeof node.position[1] !== 'number') {\n        node.position = [i * 240, 1824];\n        fixed = true;\n    }\n    \n    // Fix missing typeVersion\n    if (!node.typeVersion) {\n        node.typeVersion = 1;\n        fixed = true;\n    }\n    \n    // Ensure parameters exist\n    if (!node.parameters) {\n        node.parameters = {};\n        fixed = true;\n    }\n    \n    if (fixed) {\n        fixedCount++;\n        console.log(`🔧 Fixed node: ${node.name}`);\n    }\n    \n    nodeIds.add(node.id);\n    nodeNames.add(node.name);\n    validatedNodes.push(node);\n}\n\nconsole.log(`✅ Validated ${validatedNodes.length} nodes (${fixedCount} fixed)`);\n\nif (validatedNodes.length === 0) {\n    throw new Error(\"❌ No valid nodes after validation\");\n}\n\n// 2. Clean and validate connections\nconst cleanedConnections = {};\nlet removedConnections = 0;\nlet fixedConnections = 0;\n\nfor (const [sourceNodeName, connectionTypes] of Object.entries(connections)) {\n    const sourceNode = validatedNodes.find(n => n.name === sourceNodeName);\n    \n    if (!sourceNode) {\n        console.log(`⚠️ Removing connections from non-existent source: ${sourceNodeName}`);\n        removedConnections++;\n        continue;\n    }\n    \n    cleanedConnections[sourceNodeName] = {};\n    \n    for (const [connType, connArray] of Object.entries(connectionTypes)) {\n        if (!Array.isArray(connArray)) {\n            console.log(`⚠️ Invalid connection type format for ${sourceNodeName}.${connType}`);\n            continue;\n        }\n        \n        cleanedConnections[sourceNodeName][connType] = [];\n        \n        for (const connGroup of connArray) {\n            if (!Array.isArray(connGroup)) {\n                console.log(`⚠️ Invalid connection group in ${sourceNodeName}`);\n                continue;\n            }\n            \n            const validConnections = [];\n            \n            for (const conn of connGroup) {\n                // Validate connection structure\n                if (!conn || typeof conn !== 'object') {\n                    removedConnections++;\n                    continue;\n                }\n                \n                // Fix missing fields\n                if (!conn.node) {\n                    console.log(`⚠️ Connection missing target node name`);\n                    removedConnections++;\n                    continue;\n                }\n                \n                if (conn.type === undefined) {\n                    conn.type = 'main';\n                    fixedConnections++;\n                }\n                \n                if (conn.index === undefined) {\n                    conn.index = 0;\n                    fixedConnections++;\n                }\n                \n                // Check if target node exists\n                const targetNode = validatedNodes.find(n => n.name === conn.node);\n                if (!targetNode) {\n                    console.log(`⚠️ Removing connection to non-existent target: ${conn.node}`);\n                    removedConnections++;\n                    continue;\n                }\n                \n                validConnections.push(conn);\n            }\n            \n            if (validConnections.length > 0) {\n                cleanedConnections[sourceNodeName][connType].push(validConnections);\n            }\n        }\n        \n        // Remove empty connection types\n        if (cleanedConnections[sourceNodeName][connType].length === 0) {\n            delete cleanedConnections[sourceNodeName][connType];\n        }\n    }\n    \n    // Remove empty connection objects\n    if (Object.keys(cleanedConnections[sourceNodeName]).length === 0) {\n        delete cleanedConnections[sourceNodeName];\n    }\n}\n\nconsole.log(`🔗 Connections: ${removedConnections} removed, ${fixedConnections} fixed`);\n\n// 3. Detect orphaned nodes\nconst connectedNodeNames = new Set();\nfor (const [source, types] of Object.entries(cleanedConnections)) {\n    connectedNodeNames.add(source);\n    for (const connArray of Object.values(types)) {\n        for (const group of connArray) {\n            for (const conn of group) {\n                connectedNodeNames.add(conn.node);\n            }\n        }\n    }\n}\n\nconst orphanedNodes = validatedNodes.filter(node => \n    !connectedNodeNames.has(node.name) && \n    !node.type.toLowerCase().includes('trigger') &&\n    !node.type.toLowerCase().includes('webhook')\n);\n\nif (orphanedNodes.length > 0) {\n    console.log(`⚠️ Found ${orphanedNodes.length} orphaned nodes: ${orphanedNodes.map(n => n.name).join(', ')}`);\n}\n\n// 4. Validate specific node types\nconst webhookNodes = validatedNodes.filter(n => \n    n.type === 'n8n-nodes-base.webhook' ||\n    n.type.toLowerCase().includes('webhook')\n);\n\nfor (const webhook of webhookNodes) {\n    if (!webhook.parameters?.path) {\n        console.log(`⚠️ Webhook ${webhook.name} missing path, adding default`);\n        if (!webhook.parameters) webhook.parameters = {};\n        webhook.parameters.path = `/webhook-${Date.now()}`;\n    }\n}\n\n// 5. Ensure workflow has a trigger\nconst hasTrigger = validatedNodes.some(n => \n    n.type.toLowerCase().includes('trigger') ||\n    n.type.toLowerCase().includes('webhook')\n);\n\nif (!hasTrigger) {\n    console.log(\"⚠️ WARNING: Workflow has no trigger node!\");\n}\n\n// 6. Final report\nconst validationReport = {\n    total_nodes: validatedNodes.length,\n    nodes_fixed: fixedCount,\n    connections_removed: removedConnections,\n    connections_fixed: fixedConnections,\n    orphaned_nodes: orphanedNodes.map(n => n.name),\n    webhook_nodes: webhookNodes.map(n => ({ name: n.name, path: n.parameters?.path })),\n    has_trigger: hasTrigger,\n    validation_passed: validatedNodes.length > 0 && hasTrigger\n};\n\nconsole.log(\"📊 Validation Report:\", JSON.stringify(validationReport, null, 2));\n\nreturn [{ \n    json: { \n        modify_nodes: validatedNodes,\n        modify_connections: cleanedConnections,\n        changes_made: changes_made,\n        validation_report: validationReport\n    } \n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        704,
        1136
      ],
      "id": "69639c37-2207-4aa1-8c23-4ad9b97f1e62",
      "name": "Validate & Clean Workflow",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "workflow-payload",
              "name": "workflowPayload",
              "value": "={{ \n  JSON.stringify({\n    \"name\": ($json.changes_made?.updated_references?.[0]?.node || \"AI_Generated_\" + Date.now()),\n    \"nodes\": $json.modify_nodes,\n    \"connections\": $json.modify_connections,\n    \"settings\": {\n      \"saveExecutionProgress\": true,\n      \"saveManualExecutions\": true,\n      \"saveDataErrorExecution\": \"all\",\n      \"saveDataSuccessExecution\": \"all\",\n      \"executionTimeout\": 3600,\n      \"timezone\": \"America/New_York\",\n      \"executionOrder\": \"v1\"\n    },\n    \"staticData\": {}\n  })\n}}",
              "type": "string"
            },
            {
              "id": "validation-report",
              "name": "validation_report",
              "value": "={{ $json.validation_report }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        960,
        1120
      ],
      "id": "254f32ba-4c68-4d03-80f5-512897804e61",
      "name": "Prepare Workflow Payload",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:5678/api/v1/workflows",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.workflowPayload }}",
        "options": {
          "redirect": {
            "redirect": {}
          },
          "timeout": 30000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1184,
        1104
      ],
      "id": "aeeea0fa-9264-4766-a872-b1b02eff8ff9",
      "name": "Create Workflow",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "const response = $input.first().json;\n\nif (!response.id) {\n    throw new Error(\"❌ Workflow creation failed - no ID returned\");\n}\n\nconsole.log(`✅ Workflow created:`);\nconsole.log(`   ID: ${response.id}`);\nconsole.log(`   Name: ${response.name || 'N/A'}`);\nconsole.log(`   Nodes: ${response.nodes?.length || 0}`);\n\nreturn [{ \n    json: { \n        id: response.id,\n        name: response.name || 'Unnamed',\n        active: response.active || false,\n        nodes: response.nodes || [],\n        created: true\n    } \n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1424,
        1088
      ],
      "id": "8060a76d-2d08-4c49-879a-d87843d7556f",
      "name": "Verify Creation",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=http://localhost:5678/api/v1/workflows/{{ $json.id }}/activate",
        "options": {
          "timeout": 15000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1648,
        1072
      ],
      "id": "0e9b88e1-e338-43b3-8cbc-6931564a7755",
      "name": "Activate Workflow",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "const nodes = $input.first().json.nodes;\n\nif (!nodes || nodes.length === 0) {\n    return [{ json: { has_webhook: false, skip_test: true, message: \"No nodes in workflow\" } }];\n}\n\nconst webhookNode = nodes.find(n => \n    n.type === 'n8n-nodes-base.webhook' || \n    n.type?.toLowerCase().includes('webhook') ||\n    n.parameters?.path\n);\n\nif (!webhookNode) {\n    console.log(\"ℹ️ No webhook found\");\n    return [{ json: { has_webhook: false, skip_test: true, message: \"No webhook node\" } }];\n}\n\nconst webhookPath = webhookNode.parameters?.path;\n\nif (!webhookPath) {\n    console.log(\"⚠️ Webhook has no path\");\n    return [{ json: { has_webhook: false, skip_test: true, message: \"Webhook missing path\" } }];\n}\n\nconsole.log(`✅ Webhook found: ${webhookPath}`);\n\nreturn [{ \n    json: { \n        has_webhook: true,\n        webhook_path: webhookPath,\n        webhook_node_name: webhookNode.name,\n        skip_test: false\n    } \n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2112,
        1040
      ],
      "id": "9d1e53ef-1c41-4594-b4a2-fd17b87b4741",
      "name": "Extract Webhook Path",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=http://localhost:5678/webhook{{ $json.webhook_path }}",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "input",
              "value": "Test from automation"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2336,
        1040
      ],
      "id": "c1553809-1e25-4315-b30a-a6c853af4cec",
      "name": "Test Webhook",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "body",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -272,
        1200
      ],
      "id": "498fdfb0-2f7f-4960-8855-2b7b090a81a7",
      "name": "Convert to File1",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## 1. Update Workflow\n## 2. Activate the Workflow\n## 3. Run Workflow\n",
        "height": 128,
        "width": 320,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -480,
        576
      ],
      "typeVersion": 1,
      "id": "ad274335-b316-4c37-9499-a53c8aee8006",
      "name": "Sticky Note3",
      "disabled": true
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "n8n-testing",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -464,
        1200
      ],
      "id": "a84fec7d-0fbe-428c-b165-52e50e89d55f",
      "name": "Webhook1",
      "webhookId": "f6ea9d05-bd9f-445b-97aa-bd089e99b132"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/errors",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Error",
              "value": "Conversation Failed!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -256,
        1472
      ],
      "id": "9cbb8f5f-2877-48af-8201-c76127c08663",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/errors",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Error",
              "value": "Gemini Model Failed!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        240,
        1472
      ],
      "id": "10aaff6e-23fe-4f25-b82c-8deba7ef88d7",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/errors",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Error",
              "value": "Parse Validations Failed"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        496,
        1472
      ],
      "id": "8b35ffc7-94dd-43ee-8577-26f15d9ce302",
      "name": "HTTP Request3"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/errors",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Error",
              "value": "Workflow Clean Failed!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        752,
        1472
      ],
      "id": "ff1b5c81-e3b1-492a-b412-8f50b8292532",
      "name": "HTTP Request4"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/errors",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Error",
              "value": "Workflow Creation Failed!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1216,
        1456
      ],
      "id": "4146a44c-5503-4726-81a3-78fcb11cec12",
      "name": "HTTP Request5"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/errors",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Error",
              "value": "Verification of Create Workflow Failed!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1456,
        1456
      ],
      "id": "94b17968-d0fd-4828-b0d8-0b2b7a92c3a3",
      "name": "HTTP Request6"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/errors",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Error",
              "value": "Payload Failed!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        992,
        1472
      ],
      "id": "e3fee81f-fffe-482c-8b48-105684f42e90",
      "name": "HTTP Request7"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/errors",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Error",
              "value": "Workflow Activation Process Failed!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1696,
        1456
      ],
      "id": "9851fc6f-3610-496a-acc5-1e867975393f",
      "name": "HTTP Request8"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/errors",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Error",
              "value": "Data is Not Coming from past Node"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1936,
        1456
      ],
      "id": "46c89351-6e76-4bc0-8624-26c149e0555a",
      "name": "HTTP Request9"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/errors",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Error",
              "value": "Conversation Failed!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2176,
        1456
      ],
      "id": "2557114d-fd62-40a8-9767-fc8bcf1c0055",
      "name": "HTTP Request10"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/errors",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Error",
              "value": "Workflow Running Issue."
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2416,
        1424
      ],
      "id": "ae0fd423-f8a1-4392-b36a-8c98f39de5ca",
      "name": "HTTP Request11"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "File Created Successfully."
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -32,
        880
      ],
      "id": "0d1bde8b-205f-4451-b8e8-d5c92f1632f0",
      "name": "HTTP Request12"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Base64 Conversation Successfully."
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        240,
        880
      ],
      "id": "08b5a15e-4d88-41bb-9548-399ddf72a199",
      "name": "HTTP Request13"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Model Response generated successfully."
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        512,
        880
      ],
      "id": "233b0a67-32f3-4dc4-9496-655c8ed95d6a",
      "name": "HTTP Request14"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Parse Validations Failed"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        720,
        880
      ],
      "id": "0ab34aff-0358-489b-9406-acbf782c1559",
      "name": "HTTP Request15"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Workflow Clean Sucessfully!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        960,
        880
      ],
      "id": "5d0dbecb-130e-4c80-939b-4186ee112df8",
      "name": "HTTP Request16"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Payload Created Successfully!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1184,
        880
      ],
      "id": "a11063d9-b2e9-4d35-bca1-50dab24216f3",
      "name": "HTTP Request17"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Workflow Created Successfully!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1408,
        864
      ],
      "id": "dd825e05-9312-46a8-96b6-f52e48ba50f1",
      "name": "HTTP Request18"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Workflow Created Verification Done."
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1648,
        864
      ],
      "id": "cdc4b1c7-19d2-4dfd-9b7b-5c2eca24b190",
      "name": "HTTP Request19"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Workflow Activated Successfully."
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1872,
        864
      ],
      "id": "27d1f1ec-44f1-4b9a-a037-c9c40feecfe7",
      "name": "HTTP Request20"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Workflow parse Successfully."
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2128,
        864
      ],
      "id": "f8a05c6e-0def-4e47-ba91-34796140404d",
      "name": "HTTP Request21"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Workflow Running Successfully."
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2592,
        1024
      ],
      "id": "1ccf7d3b-062f-47a7-b2c9-e3a3c3a99ad6",
      "name": "HTTP Request22"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Workflow Webhook Path Get Successfully."
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2384,
        864
      ],
      "id": "83413de2-de0b-4914-b638-f4a8d1e5991b",
      "name": "HTTP Request23"
    }
  ],
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Parse and Validate JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Parse and Validate JSON": {
      "main": [
        [
          {
            "node": "Validation Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validation Check": {
      "main": [
        [
          {
            "node": "Send Test Cases",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Nodes?1": {
      "main": [
        [
          {
            "node": "Extract Webhook Path",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request21",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transform to base1": {
      "main": [
        [
          {
            "node": "Call Gemini API",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request13",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Call Gemini API": {
      "main": [
        [
          {
            "node": "Parse & Validate Response",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request14",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse & Validate Response": {
      "main": [
        [
          {
            "node": "Validate & Clean Workflow",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request15",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate & Clean Workflow": {
      "main": [
        [
          {
            "node": "Prepare Workflow Payload",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request16",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Workflow Payload": {
      "main": [
        [
          {
            "node": "Create Workflow",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request17",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Workflow": {
      "main": [
        [
          {
            "node": "Verify Creation",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request18",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verify Creation": {
      "main": [
        [
          {
            "node": "Activate Workflow",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request19",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Activate Workflow": {
      "main": [
        [
          {
            "node": "Has Nodes?1",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request20",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Webhook Path": {
      "main": [
        [
          {
            "node": "Test Webhook",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request23",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File1": {
      "main": [
        [
          {
            "node": "Transform to base1",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request12",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook1": {
      "main": [
        [
          {
            "node": "Convert to File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Test Webhook": {
      "main": [
        [
          {
            "node": "HTTP Request22",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "c5c66b05-4077-46a1-91d2-5536a7af5390",
  "triggerCount": 1,
  "shared": [
    {
      "createdAt": "2025-09-30T09:23:05.199Z",
      "updatedAt": "2025-09-30T09:23:05.199Z",
      "role": "workflow:owner",
      "workflowId": "6cgXo8tTVk93r5Ca",
      "projectId": "nSUbNPn8P23MJaxQ",
      "project": {
        "createdAt": "2025-08-19T13:24:42.941Z",
        "updatedAt": "2025-08-19T13:25:25.513Z",
        "id": "nSUbNPn8P23MJaxQ",
        "name": "Sanjay Makwana <sanjay.makwana@e2m.solutions>",
        "type": "personal",
        "icon": null,
        "description": null,
        "projectRelations": [
          {
            "createdAt": "2025-08-19T13:24:42.957Z",
            "updatedAt": "2025-08-19T13:24:42.957Z",
            "userId": "bec985b6-4c5b-4f76-a28c-588449d2617c",
            "projectId": "nSUbNPn8P23MJaxQ",
            "user": {
              "createdAt": "2025-08-19T13:24:42.285Z",
              "updatedAt": "2025-10-06T04:08:20.000Z",
              "id": "bec985b6-4c5b-4f76-a28c-588449d2617c",
              "email": "sanjay.makwana@e2m.solutions",
              "firstName": "Sanjay",
              "lastName": "Makwana",
              "personalizationAnswers": {
                "version": "v4",
                "personalization_survey_submitted_at": "2025-08-19T13:25:56.618Z",
                "personalization_survey_n8n_version": "1.107.3",
                "automationGoalDevops": [
                  "ticketing-systems-integrations",
                  "data-syncing"
                ],
                "companyIndustryExtended": [
                  "it-industry"
                ],
                "companySize": "<20",
                "companyType": "other",
                "role": "it",
                "reportedSource": "google"
              },
              "settings": {
                "userActivated": true,
                "easyAIWorkflowOnboarded": true,
                "firstSuccessfulWorkflowId": "9HG8S6sJBTFvXXIZ",
                "userActivatedAt": 1755781899419,
                "npsSurvey": {
                  "responded": true,
                  "lastShownAt": 1756103555035
                }
              },
              "disabled": false,
              "mfaEnabled": false,
              "lastActiveAt": "2025-10-06",
              "isPending": false
            }
          }
        ]
      }
    }
  ],
  "tags": []
}