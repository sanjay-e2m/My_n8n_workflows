{
  "createdAt": "2025-08-22T06:15:53.087Z",
  "updatedAt": "2025-08-22T07:43:35.000Z",
  "id": "LAO64kBC76Wq096C",
  "name": "Instagram Post Maker",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "content": "## 🚀 TRIGGER SECTION\n\n**Purpose:** Monitor Discord for new content topics\n**Frequency:** Every 5 seconds\n**Performance:** Lightweight trigger for real-time monitoring",
        "height": 432,
        "width": 328,
        "color": 2
      },
      "id": "72e35873-57af-4790-aadd-a438e0c780b9",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -448,
        32
      ]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "seconds",
              "secondsInterval": 5
            }
          ]
        }
      },
      "id": "3213ac98-951b-4052-aee5-7df92ccf1960",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -368,
        272
      ]
    },
    {
      "parameters": {
        "content": "## 📥 DATA FETCHING\n\n**Purpose:** Fetch latest Discord message\n**API:** Discord v10 API\n**Optimization:** Single message fetch with limit=1\n**Rate Limit:** Respects Discord API limits",
        "height": 432,
        "width": 312,
        "color": 3
      },
      "id": "341d93af-b511-49cb-90a1-eb7d8b349db0",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -80,
        32
      ]
    },
    {
      "parameters": {
        "url": "https://discord.com/api/v10/channels/1408038449503801405/messages?limit=1",
        "options": {
          "timeout": 10000
        }
      },
      "id": "68eaa06a-01e0-4771-b80d-4874458c49bf",
      "name": "Fetch Discord Message",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        32,
        272
      ]
    },
    {
      "parameters": {
        "content": "## ⏰ MESSAGE VALIDATION\n\n**Purpose:** Filter recent messages only\n**Window:** 5-second recency check\n**Performance:** Prevents duplicate processing\n**Logic:** Timestamp-based filtering",
        "height": 432,
        "width": 360,
        "color": 4
      },
      "id": "6079d96a-b4c5-4eb1-8779-e3f1530cf495",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        256,
        32
      ]
    },
    {
      "parameters": {
        "jsCode": "// Enhanced message validation with better error handling\nconst RECENT_WINDOW = 5000; // 5 seconds\n\n// Input validation\nif (!$json.timestamp || !$json.content) {\n  return {\n    content: null,\n    isRecent: false,\n    error: 'Missing timestamp or content'\n  };\n}\n\ntry {\n  const messageTime = new Date($json.timestamp);\n  const currentTime = Date.now();\n  const timeDiff = currentTime - messageTime.getTime();\n  \n  // Additional validation\n  const isValidMessage = $json.content && \n                        typeof $json.content === 'string' && \n                        $json.content.trim().length > 0;\n  \n  return {\n    content: $json.content.trim(),\n    isRecent: timeDiff <= RECENT_WINDOW && isValidMessage,\n    timeDiff: timeDiff,\n    messageTime: messageTime.toISOString()\n  };\n} catch (error) {\n  return {\n    content: null,\n    isRecent: false,\n    error: error.message\n  };\n}"
      },
      "id": "c12320fb-0b80-430e-a72a-a64a76e582d1",
      "name": "Check Recent Message",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        288,
        272
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "leftValue": "={{ $json.isRecent }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              },
              "id": "969f7311-9b78-4ec3-a513-9d979d59cff1"
            },
            {
              "leftValue": "={{ $json.content }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty"
              },
              "id": "content-check"
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "ec1085f0-c4f4-40f9-894d-d9112a2b2407",
      "name": "If Recent & Valid?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        480,
        272
      ]
    },
    {
      "parameters": {
        "content": "## 🤖 AI CONTENT GENERATION\n\n**Model:** Google Gemini 2.0 Flash\n**Purpose:** Generate Instagram captions & hashtags\n**Output:** Structured JSON format\n**Performance:** Optimized prompts for consistency",
        "height": 432,
        "width": 328,
        "color": 5
      },
      "id": "8cc7a31a-21bf-4ec4-b318-f81a8fc7f61d",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        640,
        32
      ]
    },
    {
      "parameters": {
        "modelId": "models/gemini-2.0-flash",
        "messages": {
          "values": [
            {
              "content": "={\n  \"role\": \"You are an expert Instagram content creator and social media strategist. Create viral-worthy captions that drive engagement.\",\n  \"instructions\": {\n    \"content_rules\": {\n      \"1\": \"Caption must be DIRECTLY about the given topic - no generalizations\",\n      \"2\": \"Write an engaging caption (200-350 words optimal for Instagram)\",\n      \"3\": \"Include emotional hooks, questions, or calls-to-action\",\n      \"4\": \"Use emojis strategically (3-5 max)\",\n      \"5\": \"Add line breaks for readability\"\n    },\n    \"hashtag_rules\": {\n      \"1\": \"Generate 10-15 relevant hashtags\",\n      \"2\": \"Mix popular (#1M+ posts) and niche hashtags\",\n      \"3\": \"Include trending and evergreen hashtags\",\n      \"4\": \"Ensure hashtags match the exact topic\"\n    },\n    \"output_format\": {\n      \"requirement\": \"Output ONLY valid JSON - no markdown, no code blocks\",\n      \"structure\": {\n        \"caption\": \"string - the Instagram caption\",\n        \"hashtags\": [\"array of hashtag strings with # symbol\"]\n      }\n    }\n  },\n  \"topic\": \"{{ $json.content }}\",\n  \"examples\": {\n    \"good_caption\": \"Starts with hook → provides value → includes CTA → uses emojis wisely\",\n    \"good_hashtags\": \"Mix of broad and specific tags related to the exact topic\"\n  }\n}"
            }
          ]
        },
        "options": {
          "temperature": 0.7
        }
      },
      "id": "235e3067-e637-4630-96d0-6b56f22c25c8",
      "name": "Generate Caption & Hashtags",
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        704,
        256
      ]
    },
    {
      "parameters": {
        "content": "## 🔄 JSON PROCESSING\n\n**Purpose:** Parse AI response to structured data\n**Validation:** Error handling for malformed JSON\n**Cleanup:** Remove markdown artifacts\n**Output:** Clean caption and hashtags",
        "height": 432,
        "width": 296,
        "color": 6
      },
      "id": "2a1b7f64-c77a-4ebc-ac7b-200de9d35d39",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        992,
        32
      ]
    },
    {
      "parameters": {
        "jsCode": "// Enhanced JSON parsing with comprehensive error handling\nconst input = $input.first();\n\n// Extract raw text from Gemini response\nlet rawText;\ntry {\n  rawText = input.json.content.parts[0].text;\n  if (!rawText) {\n    throw new Error('No text content found in response');\n  }\n} catch (e) {\n  throw new Error('Failed to extract text from Gemini response: ' + e.message);\n}\n\n// Clean up the response (remove code blocks, extra whitespace)\nlet cleanedText = rawText\n  .replace(/^```json\\s*/gm, '')\n  .replace(/```\\s*$/gm, '')\n  .replace(/^```\\s*/gm, '')\n  .trim();\n\n// Parse JSON with error handling\nlet parsed;\ntry {\n  parsed = JSON.parse(cleanedText);\n} catch (e) {\n  // Try to fix common JSON issues\n  cleanedText = cleanedText\n    .replace(/([^\\\\])'/g, '$1\"')  // Replace single quotes with double quotes\n    .replace(/^'/g, '\"')         // Replace leading single quote\n    .replace(/,\\s*}/g, '}')      // Remove trailing commas\n    .replace(/,\\s*]/g, ']');     // Remove trailing commas in arrays\n  \n  try {\n    parsed = JSON.parse(cleanedText);\n  } catch (e2) {\n    throw new Error(`Failed to parse JSON: ${e2.message}\\n\\nOriginal text:\\n${rawText}\\n\\nCleaned text:\\n${cleanedText}`);\n  }\n}\n\n// Validate required fields\nif (!parsed.caption || !parsed.hashtags) {\n  throw new Error('Missing required fields: caption or hashtags');\n}\n\n// Ensure hashtags is an array\nif (!Array.isArray(parsed.hashtags)) {\n  throw new Error('Hashtags must be an array');\n}\n\n// Clean and validate hashtags\nconst cleanHashtags = parsed.hashtags\n  .filter(tag => tag && typeof tag === 'string')\n  .map(tag => tag.startsWith('#') ? tag : '#' + tag)\n  .slice(0, 15); // Limit to 15 hashtags\n\n// Return structured data\nreturn {\n  json: {\n    caption: parsed.caption.trim(),\n    hashtags: cleanHashtags,\n    processedAt: new Date().toISOString(),\n    originalTopic: input.json.content || 'Unknown'\n  }\n};"
      },
      "id": "9723e661-06b0-4bc1-9baf-a096461fb570",
      "name": "Parse Gemini JSON",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1088,
        256
      ]
    },
    {
      "parameters": {
        "content": "## 🎨 IMAGE GENERATION\n\n**Service:** HuggingFace OpenJourney\n**Model:** Stable Diffusion based\n**Input:** Caption as prompt\n**Performance:** Cached responses when possible",
        "height": 432,
        "width": 328,
        "color": 7
      },
      "id": "7ee081b0-db6c-454f-a5a4-dbbc2c049ce7",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1312,
        32
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://modelslab.com/api/v6/realtime/text2img",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "key",
              "value": "d5VGc8WDRp3ARehzHEhCHdrGAbJIdxGv50yvoo4u1m0SQ48fXWq6TcnNdvtP"
            },
            {
              "name": "prompt",
              "value": "={{$json.caption}}"
            },
            {
              "name": "base64",
              "value": "true"
            },
            {
              "name": "aspect_ratio",
              "value": "1:1"
            }
          ]
        },
        "options": {}
      },
      "id": "731011b2-fd86-4aa5-884c-855b49f4a7ba",
      "name": "Generate Image",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1424,
        256
      ]
    },
    {
      "parameters": {
        "content": "## 💾 FILE MANAGEMENT\n\n**Process:** Binary conversion → Google Drive upload\n**Naming:** Timestamp-based file names\n**Organization:** Dedicated folder structure\n**Backup:** All images stored in Drive",
        "height": 432,
        "width": 408
      },
      "id": "efb49319-bce4-4597-b5c6-bdb868b1bc0e",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1664,
        32
      ]
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "data",
        "options": {
          "fileName": "=image_{{ $now.format(\"YYYY-MM-DD_HH-mm-ss\") }}.png",
          "mimeType": "image/png"
        }
      },
      "id": "3715228d-7929-4863-b38c-554b123fe98d",
      "name": "Convert to File",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        1920,
        256
      ]
    },
    {
      "parameters": {
        "name": "=img_content_{{ $now.format(\"MM-DD_HH-mm-ss\") }}.png",
        "driveId": "My Drive",
        "folderId": "1ic-czhUoqk-Zv_d9UPDfdMfOfuBTT2Ru",
        "options": {}
      },
      "id": "4d922b0f-4c93-40e2-870b-532d8397a178",
      "name": "Upload to Drive",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        2128,
        256
      ]
    },
    {
      "parameters": {
        "content": "## 📊 DATA LOGGING\n\n**Purpose:** Track all generated content\n**Storage:** Google Sheets database\n**Fields:** Caption, hashtags, timestamps, image links\n**Analytics:** Performance tracking ready",
        "height": 432,
        "width": 360,
        "color": 2
      },
      "id": "052b6711-5bfe-4161-9c5a-a71112959f7f",
      "name": "Sticky Note7",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2112,
        32
      ]
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "13DDEADwMnbDzVYr_5nLkhLRer2XmqAKfHfNzKvK8ftQ",
          "mode": "id"
        },
        "sheetName": 988067313,
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Caption": "={{ $('Parse Gemini JSON').item.json.caption }}",
            "Hashtags": "={{ $('Parse Gemini JSON').item.json.hashtags.join(' ') }}",
            "CreatedAt": "={{ $json.createdTime }}",
            "image_name": "={{ $json.name }}",
            "Image": "={{ $json.id }}",
            "Image_url": "={{ $json.webViewLink }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Caption",
              "displayName": "Caption",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Hashtags",
              "displayName": "Hashtags",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "image_name",
              "displayName": "image_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Image",
              "displayName": "Image",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Image_url",
              "displayName": "Image_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "CreatedAt",
              "displayName": "CreatedAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {
          "useAppend": true
        }
      },
      "id": "88f1b6da-19ce-4093-a219-c51146b74c8f",
      "name": "Log in Google Sheets",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        2320,
        256
      ]
    },
    {
      "parameters": {
        "url": "https://modelslab-bom.s3.amazonaws.com/modelslab/84d1c5a8-f256-43f7-99b8-db8c624575c7-0.base64",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1616,
        256
      ],
      "id": "5b29a348-4b75-4623-8b92-18bdc1715f32",
      "name": "HTTP Request"
    }
  ],
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Fetch Discord Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Discord Message": {
      "main": [
        [
          {
            "node": "Check Recent Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Recent Message": {
      "main": [
        [
          {
            "node": "If Recent & Valid?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Recent & Valid?": {
      "main": [
        [
          {
            "node": "Generate Caption & Hashtags",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Generate Caption & Hashtags": {
      "main": [
        [
          {
            "node": "Parse Gemini JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Gemini JSON": {
      "main": [
        [
          {
            "node": "Generate Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Image": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Upload to Drive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload to Drive": {
      "main": [
        [
          {
            "node": "Log in Google Sheets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "meta": null,
  "pinData": {},
  "versionId": "6cb7bcd8-f41c-4ffb-b113-362091243139",
  "triggerCount": 1,
  "shared": [
    {
      "createdAt": "2025-08-22T06:15:53.087Z",
      "updatedAt": "2025-08-22T06:15:53.087Z",
      "role": "workflow:owner",
      "workflowId": "LAO64kBC76Wq096C",
      "projectId": "nSUbNPn8P23MJaxQ",
      "project": {
        "createdAt": "2025-08-19T13:24:42.941Z",
        "updatedAt": "2025-08-19T13:25:25.513Z",
        "id": "nSUbNPn8P23MJaxQ",
        "name": "Sanjay Makwana <sanjay.makwana@e2m.solutions>",
        "type": "personal",
        "icon": null,
        "description": null,
        "projectRelations": [
          {
            "createdAt": "2025-08-19T13:24:42.957Z",
            "updatedAt": "2025-08-19T13:24:42.957Z",
            "userId": "bec985b6-4c5b-4f76-a28c-588449d2617c",
            "projectId": "nSUbNPn8P23MJaxQ",
            "user": {
              "createdAt": "2025-08-19T13:24:42.285Z",
              "updatedAt": "2025-10-06T04:08:20.000Z",
              "id": "bec985b6-4c5b-4f76-a28c-588449d2617c",
              "email": "sanjay.makwana@e2m.solutions",
              "firstName": "Sanjay",
              "lastName": "Makwana",
              "personalizationAnswers": {
                "version": "v4",
                "personalization_survey_submitted_at": "2025-08-19T13:25:56.618Z",
                "personalization_survey_n8n_version": "1.107.3",
                "automationGoalDevops": [
                  "ticketing-systems-integrations",
                  "data-syncing"
                ],
                "companyIndustryExtended": [
                  "it-industry"
                ],
                "companySize": "<20",
                "companyType": "other",
                "role": "it",
                "reportedSource": "google"
              },
              "settings": {
                "userActivated": true,
                "easyAIWorkflowOnboarded": true,
                "firstSuccessfulWorkflowId": "9HG8S6sJBTFvXXIZ",
                "userActivatedAt": 1755781899419,
                "npsSurvey": {
                  "responded": true,
                  "lastShownAt": 1756103555035
                }
              },
              "disabled": false,
              "mfaEnabled": false,
              "lastActiveAt": "2025-10-06",
              "isPending": false
            }
          }
        ]
      }
    }
  ],
  "tags": []
}