{
  "createdAt": "2025-10-04T09:49:48.662Z",
  "updatedAt": "2025-10-07T11:53:46.000Z",
  "id": "zgESYhvJzg41rCLl",
  "name": "n8n-testing",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "=## Workflow JSON to Analyze:\n\n{{ $json.chatInput }}\n\n---\n\n**Instructions:** Analyze the above n8n workflow JSON and generate test cases following the exact format specified in your system prompt. Output ONLY the JSON object, nothing else.",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "You are an expert n8n Automation Test Case Generator. You analyze n8n workflow JSON and generate comprehensive test data.\n\n## Analysis Steps:\n1. Identify the trigger node (Webhook, Chat Trigger, Manual Trigger, etc.)\n2. Find the first action node that receives external input\n3. Extract all input fields from the payload structure\n4. Determine the workflow purpose (image generation, data processing, notification, etc.)\n5. Infer data types for each field based on field names and usage\n\n## Output Requirements:\nYou MUST output ONLY a valid JSON object. NO markdown, NO explanations, NO additional text.\n\n### Exact JSON Structure:\n```json\n{\n  \"automationType\": \"<workflow_type>\",\n  \"requiredFields\": {\n    \"field1\": \"dataType\",\n    \"field2\": \"dataType\"\n  },\n  \"cases\": {\n    \"case_1\": {\n      \"description\": \"Valid request with realistic data\",\n      \"data\": {\n        \"field1\": \"valid_value\",\n        \"field2\": \"valid_value\"\n      }\n    },\n    \"case_2\": {\n      \"description\": \"Missing required field (empty string)\",\n      \"data\": {\n        \"field1\": \"\",\n        \"field2\": \"valid_value\"\n      }\n    },\n    \"case_3\": {\n      \"description\": \"Invalid data type for field\",\n      \"data\": {\n        \"field1\": 12345,\n        \"field2\": \"valid_value\"\n      }\n    },\n    \"case_4\": {\n      \"description\": \"Edge case with special characters, long input, or boundary values\",\n      \"data\": {\n        \"field1\": \"edge_case_value\",\n        \"field2\": \"edge_case_value\"\n      }\n    }\n  }\n}\n```\n\n### Test Case Guidelines:\n\n**case_1 (Valid):**\n- Use realistic, production-like data\n- For image generation: descriptive, detailed prompts\n- For emails: valid email format\n- For names: realistic full names\n- For numbers: reasonable values within expected range\n\n**case_2 (Missing Required Field):**\n- Set ONE required field to empty string \"\"\n- Keep other fields valid\n- This tests error handling for missing data\n\n**case_3 (Invalid Data Type):**\n- Provide wrong data type for at least one field\n- If expecting string, provide number (e.g., 12345)\n- If expecting number, provide string (e.g., \"not_a_number\")\n- If expecting email, provide invalid format (e.g., \"invalid-email\")\n- If expecting boolean, provide string (e.g., \"true\" instead of true)\n\n**case_4 (Edge Case):**\n- For text/prompts: Very long input (200+ chars) with special characters, emojis, unicode\n- For numbers: Boundary values (0, negative, very large, decimal)\n- For emails: Edge valid formats (plus addressing, subdomains)\n- For dates: Future dates, past dates, edge of valid range\n\n### Workflow Type Detection:\n- If workflow has image-related keywords → \"Image Generation Workflow\"\n- If workflow has email nodes → \"Email Automation Workflow\"\n- If workflow has database/CRUD operations → \"Data Processing Workflow\"\n- If workflow has notification nodes → \"Notification Workflow\"\n- Default: \"Generic Automation Workflow\"\n\n### Data Type Inference:\n- Fields named \"email\", \"mail\" → \"email\"\n- Fields named \"name\", \"username\", \"title\" → \"text\"\n- Fields named \"age\", \"count\", \"amount\", \"price\" → \"number\"\n- Fields named \"description\", \"prompt\", \"message\", \"input\" → \"text\"\n- Fields named \"date\", \"timestamp\" → \"date\"\n- Fields named \"active\", \"enabled\", \"status\" → \"boolean\"\n- Default → \"text\"\n\n### Critical Rules:\n1. Output ONLY the JSON object\n2. NO markdown code blocks (no ```json or ```)\n3. NO explanatory text before or after JSON\n4. Ensure all JSON is properly formatted and valid\n5. All string values must use double quotes\n6. No trailing commas\n7. Escape special characters in strings properly\n\nStart your response with { and end with }"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        240,
        112
      ],
      "id": "b821c3c2-aac6-4cc9-976a-e23ff4883c37",
      "name": "AI Agent",
      "disabled": true
    },
    {
      "parameters": {
        "options": {
          "temperature": 0.1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        240,
        352
      ],
      "id": "5d734fe9-2c70-4290-9a17-f388d856f08e",
      "name": "Google Gemini Chat Model",
      "disabled": true
    },
    {
      "parameters": {
        "public": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        -16,
        112
      ],
      "id": "8f1f4626-71d1-4d8a-90f4-ec9d06dab09c",
      "name": "When chat message received",
      "webhookId": "3a962fb1-1cda-4624-9995-39fef81a49b3",
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// Enhanced JSON Parser with Better Error Handling\nlet input = $input.first().json.output;\n\nfunction cleanAndParseJSON(rawInput) {\n    try {\n        // Step 1: Remove markdown code blocks\n        let cleaned = rawInput.replace(/```json\\s*/g, \"\").replace(/```\\s*/g, \"\");\n        \n        // Step 2: Remove any leading/trailing text before first { and after last }\n        let firstBrace = cleaned.indexOf(\"{\");\n        let lastBrace = cleaned.lastIndexOf(\"}\");\n        \n        if (firstBrace === -1 || lastBrace === -1) {\n            throw new Error(\"No JSON object found in response\");\n        }\n        \n        cleaned = cleaned.substring(firstBrace, lastBrace + 1);\n        \n        // Step 3: Unescape common escape sequences\n        cleaned = cleaned.replace(/\\\\n/g, \" \")\n                       .replace(/\\\\r/g, \" \")\n                       .replace(/\\\\t/g, \" \")\n                       .replace(/\\\\\"/g, '\"');\n        \n        // Step 4: Fix common AI mistakes\n        // Fix unquoted property names\n        cleaned = cleaned.replace(/([{,]\\s*)([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*:/g, '$1\"$2\":');\n        \n        // Remove trailing commas\n        cleaned = cleaned.replace(/,\\s*([}\\]])/g, '$1');\n        \n        // Fix single quotes to double quotes (carefully)\n        cleaned = cleaned.replace(/:\\s*'([^']*)'/g, ': \"$1\"');\n        \n        // Step 5: Balance braces if truncated\n        let openBraces = (cleaned.match(/{/g) || []).length;\n        let closeBraces = (cleaned.match(/}/g) || []).length;\n        if (closeBraces < openBraces) {\n            cleaned += \"}\".repeat(openBraces - closeBraces);\n        }\n        \n        let openBrackets = (cleaned.match(/\\[/g) || []).length;\n        let closeBrackets = (cleaned.match(/\\]/g) || []).length;\n        if (closeBrackets < openBrackets) {\n            cleaned += \"]\".repeat(openBrackets - closeBrackets);\n        }\n        \n        // Step 6: Attempt to parse\n        return JSON.parse(cleaned);\n        \n    } catch (error) {\n        throw new Error(`JSON parsing failed: ${error.message}`);\n    }\n}\n\nfunction validateTestCaseStructure(parsed) {\n    // Validate required top-level fields\n    if (!parsed.automationType) {\n        throw new Error(\"Missing 'automationType' field\");\n    }\n    \n    if (!parsed.requiredFields || typeof parsed.requiredFields !== 'object') {\n        throw new Error(\"Missing or invalid 'requiredFields' object\");\n    }\n    \n    if (!parsed.cases || typeof parsed.cases !== 'object') {\n        throw new Error(\"Missing or invalid 'cases' object\");\n    }\n    \n    // Validate all 4 cases exist\n    const requiredCases = ['case_1', 'case_2', 'case_3', 'case_4'];\n    for (const caseName of requiredCases) {\n        if (!parsed.cases[caseName]) {\n            throw new Error(`Missing ${caseName}`);\n        }\n        \n        const testCase = parsed.cases[caseName];\n        if (!testCase.description || !testCase.data) {\n            throw new Error(`${caseName} missing 'description' or 'data'`);\n        }\n    }\n    \n    return true;\n}\n\ntry {\n    // Parse the JSON\n    const parsedJSON = cleanAndParseJSON(input);\n    \n    // Validate structure\n    validateTestCaseStructure(parsedJSON);\n    \n    // Return successfully parsed and validated JSON\n    return [{\n        json: {\n            success: true,\n            testCases: parsedJSON,\n            metadata: {\n                automationType: parsedJSON.automationType,\n                fieldCount: Object.keys(parsedJSON.requiredFields).length,\n                caseCount: Object.keys(parsedJSON.cases).length,\n                timestamp: new Date().toISOString()\n            }\n        }\n    }];\n    \n} catch (error) {\n    // Return detailed error information\n    return [{\n        json: {\n            success: false,\n            error: error.message,\n            rawOutput: input.substring(0, 500),\n            suggestion: \"The AI response was not in the expected format. Try re-running the workflow or check the system prompt.\"\n        }\n    }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        608,
        112
      ],
      "id": "b5120ad5-7573-4448-82ba-6bff94801dbe",
      "name": "Parse and Validate JSON",
      "disabled": true
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.success }}",
              "value2": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        848,
        112
      ],
      "id": "acb04dc5-7e67-4f68-9451-9a9163b9afc4",
      "name": "Validation Check",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:5678/webhook/webhook-replace-when-chat-message-received",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "=",
              "value": "={{ $json.testCases }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1088,
        0
      ],
      "id": "6c702fdc-7c1e-4275-919d-a698ccbf0c21",
      "name": "Send Test Cases",
      "disabled": true,
      "notes": "Sends validated test cases to the next workflow step"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1088,
        208
      ],
      "id": "bae98ed4-2beb-45da-928f-07daebe4eb89",
      "name": "Error Response",
      "disabled": true
    },
    {
      "parameters": {
        "content": "## Test Case Genrator\n",
        "height": 80,
        "width": 288,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -16,
        -144
      ],
      "typeVersion": 1,
      "id": "05ef2d05-bf5f-43ce-8b24-4e4e2e8d0629",
      "name": "Sticky Note",
      "disabled": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "has-nodes",
              "leftValue": "={{ $json.nodes?.length > 0 }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        3328,
        1248
      ],
      "id": "66e58f84-6de1-4361-84e1-32a0fd7cc24d",
      "name": "Has Nodes?1"
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "options": {}
      },
      "id": "0eda5f00-2750-4095-8b84-0eceff518d88",
      "name": "Transform to base1",
      "type": "n8n-nodes-base.extractFromFile",
      "position": [
        528,
        1376
      ],
      "typeVersion": 1,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"contents\": [{\n    \"parts\": [\n      {\n        \"text\": \"You are a JSON generator for n8n workflows. CRITICAL REQUIREMENTS:\\n\\n1. Return ONLY valid, parseable JSON - no markdown, no explanations\\n2. Use this EXACT structure:\\n{\\n  \\\"modified_workflow\\\": {\\n    \\\"nodes\\\": [...],\\n    \\\"connections\\\": {...}\\n  },\\n  \\\"changes_made\\\": {\\n    \\\"updated_references\\\": [{\\\"node\\\": \\\"WorkflowName\\\"}]\\n  }\\n}\\n\\n3. JSON RULES:\\n   - All strings must use double quotes\\n   - No trailing commas\\n   - All brackets must match\\n   - Escape special characters\\n   - Numbers without quotes\\n\\n4. Each node MUST have: id, name, type, position [x,y], typeVersion, parameters\\n5. Validate all connections reference existing node names\\n6. Test your JSON before responding\\n\\nGenerate updated n8n workflow from the provided data.\"\n      },\n      {\n        \"inline_data\": {\n          \"mime_type\": \"text/plain\",\n          \"data\": \"{{ $json.data }}\"\n        }\n      }\n    ]\n  }],\n  \"generationConfig\": {\n    \"temperature\": 0.1,\n    \"topP\": 0.9,\n    \"topK\": 20,\n    \"maxOutputTokens\": 8192\n  }\n}",
        "options": {
          "timeout": 90000
        }
      },
      "id": "192040a4-3150-4d02-8684-cc5cd3aba286",
      "name": "Call Gemini API",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        848,
        1360
      ],
      "typeVersion": 4.2,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "// ULTRA-ROBUST JSON PARSER with auto-repair\nconst input = $input.first().json;\nlet raw = input.candidates?.[0]?.content?.parts?.[0]?.text;\n\nif (!raw) {\n    throw new Error(\"❌ No response from Gemini API\");\n}\n\nconsole.log(\"📥 Raw response length:\", raw.length);\n\n// Step 1: Clean markdown and whitespace\nraw = raw\n    .replace(/```json\\s*/gi, '')\n    .replace(/```\\s*/g, '')\n    .replace(/^[^{]*/, '')  // Remove text before first {\n    .replace(/[^}]*$/, '')  // Remove text after last }\n    .trim();\n\n// Step 2: Extract JSON object\nlet jsonStart = raw.indexOf('{');\nlet jsonEnd = raw.lastIndexOf('}');\n\nif (jsonStart === -1 || jsonEnd === -1) {\n    throw new Error(\"❌ No JSON object found in response\");\n}\n\nraw = raw.substring(jsonStart, jsonEnd + 1);\n\n// Step 3: Advanced JSON repair\nfunction repairJSON(str) {\n    let repaired = str;\n    \n    // Fix 1: Remove trailing commas before } or ]\n    repaired = repaired.replace(/,\\s*([\\]}])/g, '$1');\n    \n    // Fix 2: Add missing commas between array elements\n    repaired = repaired.replace(/\\}\\s*\\{/g, '},{');\n    repaired = repaired.replace(/\\]\\s*\\[/g, '],[');\n    \n    // Fix 3: Fix unescaped quotes in strings\n    repaired = repaired.replace(/\"([^\"]*?)\"([^,:{}\\[\\]]*?)\"([^\"]*?)\"/g, (match, p1, p2, p3) => {\n        if (p2 && !p2.match(/^\\s*[,:\\]}]\\s*$/)) {\n            return `\"${p1}${p2.replace(/\"/g, '\\\\\"')}${p3}\"`;\n        }\n        return match;\n    });\n    \n    // Fix 4: Remove control characters\n    repaired = repaired.replace(/[\\x00-\\x1F\\x7F]/g, '');\n    \n    // Fix 5: Fix missing quotes around property names\n    repaired = repaired.replace(/([{,]\\s*)([a-zA-Z_][a-zA-Z0-9_]*)\\s*:/g, '$1\"$2\":');\n    \n    // Fix 6: Ensure proper spacing\n    repaired = repaired.replace(/([\\[{,])\\s+/g, '$1');\n    repaired = repaired.replace(/\\s+([\\]}])/g, '$1');\n    \n    return repaired;\n}\n\n// Step 4: Try parsing with multiple strategies\nlet parsed = null;\nlet parseAttempts = [\n    () => JSON.parse(raw),\n    () => JSON.parse(repairJSON(raw)),\n    () => {\n        // Try to extract just the workflow object if it's nested\n        const workflowMatch = raw.match(/\"modified_workflow\"\\s*:\\s*\\{[\\s\\S]*?\\}\\s*,\\s*\"changes_made\"/i);\n        if (workflowMatch) {\n            const extracted = '{' + workflowMatch[0] + ':{\"updated_references\":[{\"node\":\"AutoGenerated\"}]}}';\n            return JSON.parse(repairJSON(extracted));\n        }\n        throw new Error(\"Cannot extract workflow\");\n    },\n    () => {\n        // Emergency: Try to parse just nodes array\n        const nodesMatch = raw.match(/\"nodes\"\\s*:\\s*\\[[\\s\\S]*?\\]/i);\n        const connectionsMatch = raw.match(/\"connections\"\\s*:\\s*\\{[\\s\\S]*?\\}/i);\n        if (nodesMatch && connectionsMatch) {\n            return {\n                modified_workflow: {\n                    nodes: JSON.parse('[' + nodesMatch[0].split('[')[1]),\n                    connections: JSON.parse('{' + connectionsMatch[0].split('{')[1])\n                },\n                changes_made: { updated_references: [{node: \"EmergencyParse_\" + Date.now()}] }\n            };\n        }\n        throw new Error(\"Cannot extract nodes/connections\");\n    }\n];\n\nlet lastError = null;\nfor (let i = 0; i < parseAttempts.length; i++) {\n    try {\n        console.log(`🔧 Parse attempt ${i + 1}...`);\n        parsed = parseAttempts[i]();\n        console.log(`✅ Parse successful on attempt ${i + 1}`);\n        break;\n    } catch (e) {\n        lastError = e;\n        console.log(`❌ Attempt ${i + 1} failed: ${e.message}`);\n    }\n}\n\nif (!parsed) {\n    // Save raw response for debugging\n    const errorContext = raw.substring(0, 1000);\n    throw new Error(`❌ All parse attempts failed. Last error: ${lastError.message}\\n\\nFirst 1000 chars:\\n${errorContext}`);\n}\n\n// Step 5: Validate structure\nif (!parsed.modified_workflow) {\n    throw new Error(\"❌ Missing 'modified_workflow' in parsed JSON\");\n}\n\nif (!parsed.modified_workflow.nodes || !Array.isArray(parsed.modified_workflow.nodes)) {\n    throw new Error(\"❌ Missing or invalid 'nodes' array\");\n}\n\nif (!parsed.modified_workflow.connections || typeof parsed.modified_workflow.connections !== 'object') {\n    console.log(\"⚠️ Invalid connections, using empty object\");\n    parsed.modified_workflow.connections = {};\n}\n\nif (!parsed.changes_made) {\n    console.log(\"⚠️ Missing changes_made, using default\");\n    parsed.changes_made = {\n        updated_references: [{ node: \"AI_Generated_\" + Date.now() }]\n    };\n}\n\nconst modify_nodes = parsed.modified_workflow.nodes;\nconst modify_connections = parsed.modified_workflow.connections;\nconst changes_made = parsed.changes_made;\n\nif (modify_nodes.length === 0) {\n    throw new Error(\"❌ Workflow has no nodes\");\n}\n\nconsole.log(`✅ Successfully parsed workflow with ${modify_nodes.length} nodes`);\n\nreturn [{ \n    json: { \n        modify_nodes, \n        modify_connections, \n        changes_made,\n        parse_info: {\n            original_length: input.candidates?.[0]?.content?.parts?.[0]?.text?.length || 0,\n            cleaned_length: raw.length,\n            nodes_count: modify_nodes.length\n        }\n    } \n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1152,
        1344
      ],
      "id": "06850b65-e400-448f-918b-1a62b20f8368",
      "name": "Parse & Validate Response",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "// Advanced workflow validation with auto-fix\nconst nodes = $input.first().json.modify_nodes;\nconst connections = $input.first().json.modify_connections;\nconst changes_made = $input.first().json.changes_made;\n\nconsole.log(`🔍 Validating ${nodes.length} nodes...`);\n\n// 1. Validate and fix all nodes\nconst validatedNodes = [];\nconst nodeIds = new Set();\nconst nodeNames = new Set();\nlet fixedCount = 0;\n\nfor (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    let fixed = false;\n    \n    // Fix missing ID\n    if (!node.id) {\n        node.id = `node-${Date.now()}-${i}-${Math.random().toString(36).substr(2, 9)}`;\n        fixed = true;\n    }\n    \n    // Fix missing name\n    if (!node.name) {\n        node.name = `Node_${i + 1}_${node.type?.split('.').pop() || 'Unknown'}`;\n        fixed = true;\n    }\n    \n    // Check for duplicate names\n    if (nodeNames.has(node.name)) {\n        node.name = `${node.name}_${Date.now()}_${i}`;\n        fixed = true;\n    }\n    \n    // Fix missing type\n    if (!node.type) {\n        console.log(`❌ Node ${node.name} has no type - skipping`);\n        continue;\n    }\n    \n    // Fix missing position\n    if (!node.position || !Array.isArray(node.position) || node.position.length !== 2) {\n        node.position = [i * 240, 1824];\n        fixed = true;\n    }\n    \n    // Fix invalid position values\n    if (typeof node.position[0] !== 'number' || typeof node.position[1] !== 'number') {\n        node.position = [i * 240, 1824];\n        fixed = true;\n    }\n    \n    // Fix missing typeVersion\n    if (!node.typeVersion) {\n        node.typeVersion = 1;\n        fixed = true;\n    }\n    \n    // Ensure parameters exist\n    if (!node.parameters) {\n        node.parameters = {};\n        fixed = true;\n    }\n    \n    if (fixed) {\n        fixedCount++;\n        console.log(`🔧 Fixed node: ${node.name}`);\n    }\n    \n    nodeIds.add(node.id);\n    nodeNames.add(node.name);\n    validatedNodes.push(node);\n}\n\nconsole.log(`✅ Validated ${validatedNodes.length} nodes (${fixedCount} fixed)`);\n\nif (validatedNodes.length === 0) {\n    throw new Error(\"❌ No valid nodes after validation\");\n}\n\n// 2. Clean and validate connections\nconst cleanedConnections = {};\nlet removedConnections = 0;\nlet fixedConnections = 0;\n\nfor (const [sourceNodeName, connectionTypes] of Object.entries(connections)) {\n    const sourceNode = validatedNodes.find(n => n.name === sourceNodeName);\n    \n    if (!sourceNode) {\n        console.log(`⚠️ Removing connections from non-existent source: ${sourceNodeName}`);\n        removedConnections++;\n        continue;\n    }\n    \n    cleanedConnections[sourceNodeName] = {};\n    \n    for (const [connType, connArray] of Object.entries(connectionTypes)) {\n        if (!Array.isArray(connArray)) {\n            console.log(`⚠️ Invalid connection type format for ${sourceNodeName}.${connType}`);\n            continue;\n        }\n        \n        cleanedConnections[sourceNodeName][connType] = [];\n        \n        for (const connGroup of connArray) {\n            if (!Array.isArray(connGroup)) {\n                console.log(`⚠️ Invalid connection group in ${sourceNodeName}`);\n                continue;\n            }\n            \n            const validConnections = [];\n            \n            for (const conn of connGroup) {\n                // Validate connection structure\n                if (!conn || typeof conn !== 'object') {\n                    removedConnections++;\n                    continue;\n                }\n                \n                // Fix missing fields\n                if (!conn.node) {\n                    console.log(`⚠️ Connection missing target node name`);\n                    removedConnections++;\n                    continue;\n                }\n                \n                if (conn.type === undefined) {\n                    conn.type = 'main';\n                    fixedConnections++;\n                }\n                \n                if (conn.index === undefined) {\n                    conn.index = 0;\n                    fixedConnections++;\n                }\n                \n                // Check if target node exists\n                const targetNode = validatedNodes.find(n => n.name === conn.node);\n                if (!targetNode) {\n                    console.log(`⚠️ Removing connection to non-existent target: ${conn.node}`);\n                    removedConnections++;\n                    continue;\n                }\n                \n                validConnections.push(conn);\n            }\n            \n            if (validConnections.length > 0) {\n                cleanedConnections[sourceNodeName][connType].push(validConnections);\n            }\n        }\n        \n        // Remove empty connection types\n        if (cleanedConnections[sourceNodeName][connType].length === 0) {\n            delete cleanedConnections[sourceNodeName][connType];\n        }\n    }\n    \n    // Remove empty connection objects\n    if (Object.keys(cleanedConnections[sourceNodeName]).length === 0) {\n        delete cleanedConnections[sourceNodeName];\n    }\n}\n\nconsole.log(`🔗 Connections: ${removedConnections} removed, ${fixedConnections} fixed`);\n\n// 3. Detect orphaned nodes\nconst connectedNodeNames = new Set();\nfor (const [source, types] of Object.entries(cleanedConnections)) {\n    connectedNodeNames.add(source);\n    for (const connArray of Object.values(types)) {\n        for (const group of connArray) {\n            for (const conn of group) {\n                connectedNodeNames.add(conn.node);\n            }\n        }\n    }\n}\n\nconst orphanedNodes = validatedNodes.filter(node => \n    !connectedNodeNames.has(node.name) && \n    !node.type.toLowerCase().includes('trigger') &&\n    !node.type.toLowerCase().includes('webhook')\n);\n\nif (orphanedNodes.length > 0) {\n    console.log(`⚠️ Found ${orphanedNodes.length} orphaned nodes: ${orphanedNodes.map(n => n.name).join(', ')}`);\n}\n\n// 4. Validate specific node types\nconst webhookNodes = validatedNodes.filter(n => \n    n.type === 'n8n-nodes-base.webhook' ||\n    n.type.toLowerCase().includes('webhook')\n);\n\nfor (const webhook of webhookNodes) {\n    if (!webhook.parameters?.path) {\n        console.log(`⚠️ Webhook ${webhook.name} missing path, adding default`);\n        if (!webhook.parameters) webhook.parameters = {};\n        webhook.parameters.path = `/webhook-${Date.now()}`;\n    }\n}\n\n// 5. Ensure workflow has a trigger\nconst hasTrigger = validatedNodes.some(n => \n    n.type.toLowerCase().includes('trigger') ||\n    n.type.toLowerCase().includes('webhook')\n);\n\nif (!hasTrigger) {\n    console.log(\"⚠️ WARNING: Workflow has no trigger node!\");\n}\n\n// 6. Final report\nconst validationReport = {\n    total_nodes: validatedNodes.length,\n    nodes_fixed: fixedCount,\n    connections_removed: removedConnections,\n    connections_fixed: fixedConnections,\n    orphaned_nodes: orphanedNodes.map(n => n.name),\n    webhook_nodes: webhookNodes.map(n => ({ name: n.name, path: n.parameters?.path })),\n    has_trigger: hasTrigger,\n    validation_passed: validatedNodes.length > 0 && hasTrigger\n};\n\nconsole.log(\"📊 Validation Report:\", JSON.stringify(validationReport, null, 2));\n\nreturn [{ \n    json: { \n        modify_nodes: validatedNodes,\n        modify_connections: cleanedConnections,\n        changes_made: changes_made,\n        validation_report: validationReport\n    } \n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1504,
        1328
      ],
      "id": "ae43a57d-0a96-48b6-b6a2-4c21e073fb2a",
      "name": "Validate & Clean Workflow",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "workflow-payload",
              "name": "workflowPayload",
              "value": "={{ \n  JSON.stringify({\n    \"name\": ($json.changes_made?.updated_references?.[0]?.node || \"AI_Generated_\" + Date.now()),\n    \"nodes\": $json.modify_nodes,\n    \"connections\": $json.modify_connections,\n    \"settings\": {\n      \"saveExecutionProgress\": true,\n      \"saveManualExecutions\": true,\n      \"saveDataErrorExecution\": \"all\",\n      \"saveDataSuccessExecution\": \"all\",\n      \"executionTimeout\": 3600,\n      \"timezone\": \"America/New_York\",\n      \"executionOrder\": \"v1\"\n    },\n    \"staticData\": {}\n  })\n}}",
              "type": "string"
            },
            {
              "id": "validation-report",
              "name": "validation_report",
              "value": "={{ $json.validation_report }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1888,
        1312
      ],
      "id": "a0787b1d-67ec-4aaf-8cfc-68974dcc3970",
      "name": "Prepare Workflow Payload",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:5678/api/v1/workflows",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.workflowPayload }}",
        "options": {
          "redirect": {
            "redirect": {}
          },
          "timeout": 30000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2192,
        1296
      ],
      "id": "e3297406-d03b-46b2-b520-11f53fda15ef",
      "name": "Create Workflow",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "const response = $input.first().json;\n\nif (!response.id) {\n    throw new Error(\"❌ Workflow creation failed - no ID returned\");\n}\n\nconsole.log(`✅ Workflow created:`);\nconsole.log(`   ID: ${response.id}`);\nconsole.log(`   Name: ${response.name || 'N/A'}`);\nconsole.log(`   Nodes: ${response.nodes?.length || 0}`);\n\nreturn [{ \n    json: { \n        id: response.id,\n        name: response.name || 'Unnamed',\n        active: response.active || false,\n        nodes: response.nodes || [],\n        created: true\n    } \n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2560,
        1280
      ],
      "id": "841e24d9-cee7-4391-a70b-b3809b3721b2",
      "name": "Verify Creation",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=http://localhost:5678/api/v1/workflows/{{ $json.id }}/activate",
        "options": {
          "timeout": 15000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2896,
        1264
      ],
      "id": "cae78be9-1618-4c62-924e-5ca802b30acd",
      "name": "Activate Workflow",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "const nodes = $input.first().json.nodes;\n\nif (!nodes || nodes.length === 0) {\n    return [{ json: { has_webhook: false, skip_test: true, message: \"No nodes in workflow\" } }];\n}\n\nconst webhookNode = nodes.find(n => \n    n.type === 'n8n-nodes-base.webhook' || \n    n.type?.toLowerCase().includes('webhook') ||\n    n.parameters?.path\n);\n\nif (!webhookNode) {\n    console.log(\"ℹ️ No webhook found\");\n    return [{ json: { has_webhook: false, skip_test: true, message: \"No webhook node\" } }];\n}\n\nconst webhookPath =$input.first().json.nodes[0].parameters.path ;\n\nif (!webhookPath) {\n    console.log(\"⚠️ Webhook has no path\");\n    return [{ json: { has_webhook: false, skip_test: true, message: \"Webhook missing path\" } }];\n}\n\nconsole.log(`✅ Webhook found: ${webhookPath}`);\n\nreturn [{ \n    json: { \n        has_webhook: true,\n        webhook_path: webhookPath,\n        webhook_node_name: webhookNode.name,\n        skip_test: false\n    } \n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3744,
        1232
      ],
      "id": "30ec5950-50c1-4ceb-9b0a-653fb1f955b9",
      "name": "Extract Webhook Path",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=http://localhost:5678/webhook{{ $json.webhook_path }}s",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "input",
              "value": "Test from automation"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4176,
        1216
      ],
      "id": "dc08e729-a348-4acb-b1c3-89b89d517b18",
      "name": "Test Webhook",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "body",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        208,
        1392
      ],
      "id": "e2aba777-4e95-482b-8946-8ff023b5ac20",
      "name": "Convert to File1",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## 1. Update Workflow\n## 2. Activate the Workflow\n## 3. Run Workflow\n",
        "height": 128,
        "width": 320,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -48,
        672
      ],
      "typeVersion": 1,
      "id": "89d0924e-137c-430b-aac6-d6161f57649e",
      "name": "Sticky Note3",
      "disabled": true
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "n8n-testing",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -32,
        1392
      ],
      "id": "4ce0443b-5511-426d-a405-0c4d79064b4f",
      "name": "Webhook1",
      "webhookId": "f6ea9d05-bd9f-445b-97aa-bd089e99b132"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/errors",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Error",
              "value": "Conversation Failed!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        544,
        1696
      ],
      "id": "a2c7225a-65de-4a7a-9b63-81b509069a31",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/errors",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Error",
              "value": "Gemini Model Failed!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1152,
        1664
      ],
      "id": "772602eb-577c-40b2-a57c-dbc0b23ab403",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/errors",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Error",
              "value": "Parse Validations Failed"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1504,
        1664
      ],
      "id": "91ca3cc0-faa5-4ed7-a385-4cb5dc9e6530",
      "name": "HTTP Request3"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/errors",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Error",
              "value": "Workflow Clean Failed!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1888,
        1648
      ],
      "id": "69b7ec0f-1ed3-4144-aa39-38b4c6047306",
      "name": "HTTP Request4"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/errors",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Error",
              "value": "Workflow Creation Failed!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2560,
        1648
      ],
      "id": "f13da6ae-dfe6-4ce8-b016-71456b08a3b6",
      "name": "HTTP Request5"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/errors",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Error",
              "value": "Verification of Create Workflow Failed!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2896,
        1648
      ],
      "id": "39dde88a-f051-41be-8770-21169e819eb4",
      "name": "HTTP Request6"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/errors",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Error",
              "value": "Payload Failed!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2192,
        1648
      ],
      "id": "8a1ee28e-9707-497e-804a-e31b289548e8",
      "name": "HTTP Request7"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/errors",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Error",
              "value": "Workflow Activation Process Failed!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3328,
        1648
      ],
      "id": "28066c53-9dc3-4ea7-a41c-2c0d3637e2ca",
      "name": "HTTP Request8"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/errors",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Error",
              "value": "Data is Not Coming from past Node"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3760,
        1648
      ],
      "id": "b656aee3-6426-4847-8003-be9e29763fcd",
      "name": "HTTP Request9"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/errors",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Error",
              "value": "Conversation Failed!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4176,
        1648
      ],
      "id": "ddee0bd9-1111-458a-9da8-0b0ec3135ed8",
      "name": "HTTP Request10"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/errors",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Error",
              "value": "={{ $json.message }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4944,
        1616
      ],
      "id": "32b92b39-3ab1-43d6-99ba-7a29039719bd",
      "name": "HTTP Request11"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "File Created Successfully."
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        512,
        960
      ],
      "id": "8a6bee33-057a-4a6a-b5dd-4b4df173b336",
      "name": "HTTP Request12"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Base64 Conversation Successfully."
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        848,
        960
      ],
      "id": "6434bcf4-dabd-4ee3-89a0-4f72c6ec92a7",
      "name": "HTTP Request13"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Model Response generated successfully."
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1168,
        960
      ],
      "id": "0a2ea0cb-b9d0-456e-9420-1811c558a421",
      "name": "HTTP Request14"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Parse Validations Failed"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1504,
        960
      ],
      "id": "45d6e242-e571-43ad-975d-ab81850cb4a1",
      "name": "HTTP Request15"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Workflow Clean Sucessfully!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1856,
        960
      ],
      "id": "dbb66082-f99d-4b2c-af94-9aff3a87f822",
      "name": "HTTP Request16"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Payload Created Successfully!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2192,
        960
      ],
      "id": "62c76225-a971-4cdf-bd81-8fea6d4bde14",
      "name": "HTTP Request17"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Workflow Created Successfully!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2560,
        944
      ],
      "id": "f1cd6713-fabe-4250-b1e8-a7f54bcf9c28",
      "name": "HTTP Request18"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Workflow Created Verification Done."
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2896,
        944
      ],
      "id": "76fe528c-1ccd-4ff7-95d7-4956026104ea",
      "name": "HTTP Request19"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Workflow Activated Successfully."
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3328,
        928
      ],
      "id": "82f017e8-b480-4360-b54a-2f3d501bddd6",
      "name": "HTTP Request20"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Workflow parse Successfully."
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3744,
        944
      ],
      "id": "ee34f844-12b4-4ff4-a7e4-15c3d40e2cf7",
      "name": "HTTP Request21"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Workflow Running Successfully."
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4912,
        1200
      ],
      "id": "b77ba577-a1e1-4baa-aabc-c2fcd496bef5",
      "name": "HTTP Request22"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Workflow Webhook Path Get Successfully."
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4160,
        944
      ],
      "id": "15be30dc-606c-45a3-9111-44eaae799a70",
      "name": "HTTP Request23"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        272,
        2416
      ],
      "id": "8cf6d90c-981b-4e54-af1f-409ac204e684",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "jsCode": "function replaceTriggersWithWebhook(workflow) {\n  const nodes = workflow.nodes;\n  const connections = workflow.connections;\n\n  // 1️⃣ Find all trigger nodes\n  const triggerNodes = nodes.filter(n => n.type.includes(\"Trigger\"));\n  if (triggerNodes.length === 0) {\n    console.log(\"No trigger nodes found.\");\n    return workflow;\n  }\n\n  const basePos = triggerNodes[0].position || [200, 200];\n\n  // 2️⃣ Collect all downstream connections of triggers\n  const downstreamConnections = [];\n  for (const [source, conn] of Object.entries(connections)) {\n    if (triggerNodes.some(n => n.name === source)) {\n      const outs = conn.main?.[0] || [];\n      downstreamConnections.push(...outs);\n      delete connections[source]; // Remove old trigger connections\n    }\n  }\n\n  // 3️⃣ Create Webhook node\n  const webhookNode = {\n    id: \"webhook_1\",\n    name: \"Webhook Trigger\",\n    type: \"n8n-nodes-base.webhook\",\n    typeVersion: 1,\n    position: [basePos[0], basePos[1]],\n    parameters: {\n      httpMethod: \"POST\",\n      path: \"ai-workflow-test\",\n    },\n  };\n\n  // 4️⃣ Prepare example values to mimic trigger output\n  const exampleValues = [];\n  const triggerData = triggerNodes[0]?.parameters || {};\n  for (const key in triggerData) {\n    exampleValues.push({ name: key, value: triggerData[key] });\n  }\n  if (exampleValues.length === 0) {\n    exampleValues.push({ name: \"exampleField\", value: \"example value\" });\n    exampleValues.push({ name: \"source\", value: \"webhook-test\" });\n  }\n\n  // 5️⃣ Create Set node with copied structure\n  const setNode = {\n    id: \"set_1\",\n    name: \"Set Sample Data\",\n    type: \"n8n-nodes-base.set\",\n    typeVersion: 1,\n    position: [basePos[0] + 250, basePos[1]],\n    parameters: {\n      values: {\n        string: exampleValues,\n      },\n    },\n  };\n\n  // 6️⃣ Remove trigger nodes from workflow\n  const updatedNodes = nodes.filter(n => !triggerNodes.includes(n));\n\n  // 7️⃣ Add new Webhook and Set nodes\n  updatedNodes.push(webhookNode, setNode);\n\n  // 8️⃣ Reconnect: Webhook → Set node\n  connections[\"Webhook Trigger\"] = {\n    main: [[{ node: \"Set Sample Data\", type: \"main\", index: 0 }]],\n  };\n\n  // 9️⃣ Reconnect: Set node → all previous trigger downstream nodes\n  connections[\"Set Sample Data\"] = {\n    main: [downstreamConnections],\n  };\n\n  return {\n    ...workflow,\n    nodes: updatedNodes,\n    connections,\n  };\n}\n\n// --- MAIN ---\nconst workflowStr = $input.first().json.n8n_json;\nlet workflow;\n\ntry {\n  workflow = JSON.parse(workflowStr);\n} catch (e) {\n  return [{ json: { error: \"Invalid workflow JSON\" } }];\n}\n\nif (!workflow || !workflow.nodes) {\n  return [{ json: { error: \"Invalid workflow input\" } }];\n}\n\nconst updated = replaceTriggersWithWebhook(workflow);\n\nreturn [\n  {\n    json: {\n      status: \"success\",\n      updated_workflow: updated,\n    },\n  },\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        704,
        2416
      ],
      "id": "2e4a27f2-9cff-4bae-b8e4-2942ef7f19d4",
      "name": "Parse & Validate Response5",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ad0c73e2-7ffd-47fc-ae11-397ef5cb55cd",
              "name": "n8n_json",
              "value": "{   \"nodes\": [     {       \"parameters\": {         \"url\": \"=https://image.pollinations.ai/prompt/{{ $json.body.prompt }}\",         \"sendQuery\": true,         \"queryParameters\": {           \"parameters\": [             {               \"name\": \"width\",               \"value\": \"= {{ $json.body.image_size.width }}\"             },             {               \"name\": \"height\",               \"value\": \"={{ $json.body.image_size.height }}\"             },             {               \"name\": \"model\",               \"value\": \"={{ $('Fields - Set Values').item.json.model }}\"             },             {               \"name\": \"seed\",               \"value\": \"42\"             },             {               \"name\": \"nologo\",               \"value\": \"true\"             }           ]         },         \"sendHeaders\": true,         \"headerParameters\": {           \"parameters\": [             {               \"name\": \"Content-Type\",               \"value\": \"application/json\"             },             {               \"name\": \"Accept\",               \"value\": \"application/json\"             }           ]         },         \"options\": {}       },       \"id\": \"e980cda3-bfa0-454e-861d-aa11432f4f0a\",       \"name\": \"HTTP Request - Create Image3\",       \"type\": \"n8n-nodes-base.httpRequest\",       \"position\": [         1584,         -1536       ],       \"retryOnFail\": true,       \"typeVersion\": 4.2,       \"alwaysOutputData\": true,       \"waitBetweenTries\": 5000     },     {       \"parameters\": {         \"respondWith\": \"allIncomingItems\",         \"options\": {}       },       \"type\": \"n8n-nodes-base.respondToWebhook\",       \"typeVersion\": 1.4,       \"position\": [         2080,         -1536       ],       \"id\": \"97eaf324-ffd5-45ff-bc7f-e115e0300711\",       \"name\": \"Respond to Webhook1\"     },     {       \"parameters\": {         \"operation\": \"write\",         \"fileName\": \"=/files/{{ $('Code - Set Filename').item.json.fileName }}\",         \"options\": {}       },       \"id\": \"4f0277fa-f77d-45cf-9e20-1c42a6bfa873\",       \"name\": \"Save Image To Disk\",       \"type\": \"n8n-nodes-base.readWriteFile\",       \"position\": [         1872,         -1536       ],       \"typeVersion\": 1     },     {       \"parameters\": {         \"promptType\": \"define\",         \"text\": \"={{ $('When chat message received').item.json.chatInput }}\",         \"hasOutputParser\": true,         \"options\": {           \"systemMessage\": \"=You are an AI image‑prompt creation expert. Please create a post using the following JSON format:\\n...\"         }       },       \"id\": \"3c55dc0d-2320-4b9a-9436-7e9aca5369bd\",       \"name\": \"AI Agent - Create Image From Prompt\",       \"type\": \"@n8n/n8n-nodes-langchain.agent\",       \"position\": [         576,         -1536       ],       \"typeVersion\": 1.7     },     {       \"parameters\": {         \"jsCode\": \"for (let i = 0; i < items.length; i++) {\\n  items[i].json.fileName = `images_${(i + 1).toString().padStart(3, '0')}.png`;\\n}\\nreturn items;\"       },       \"id\": \"84e11aeb-087b-4bb0-9eaa-d3f2f09432a5\",       \"name\": \"Code - Set Filename\",       \"type\": \"n8n-nodes-base.code\",       \"position\": [         1360,         -1536       ],       \"typeVersion\": 2     },     {       \"parameters\": {         \"jsCode\": \"return $input.first().json.image_prompt.map(prompt => ({\\n  json: {\\n    body: {\\n      prompt: prompt,\\n  \\\"image_size\\\": {\\n    \\\"width\\\": $('Fields - Set Values').first().json.width,\\n    \\\"height\\\": $('Fields - Set Values').first().json.height\\n  },\\n  \\\"num_inference_steps\\\": 12,\\n  \\\"guidance_scale\\\": 3.5,\\n  \\\"num_images\\\": 1,\\n  \\\"enable_safety_checker\\\": true,\\n}\\n    }\\n  }\\n));\"       },       \"id\": \"69c24540-650a-4f1c-be1b-af8fd972deaa\",       \"name\": \"Code - Get Prompt\",       \"type\": \"n8n-nodes-base.code\",       \"position\": [         1152,         -1536       ],       \"typeVersion\": 2,       \"alwaysOutputData\": true     },     {       \"parameters\": {         \"jsCode\": \"function cleanAndExtractJSON(response) {\\n    try {\\n        const result = {\\n            image_prompt: []\\n        };\\n\\n        const lines = response.split('\\\\n');\\n        let currentPrompt = '';\\n\\n        for (const line of lines) {\\n            if (line.includes('\\\"prompt\\\":')) {\\n                if (currentPrompt) {\\n                    result.image_prompt.push(currentPrompt.trim());\\n                }\\n                currentPrompt = line.split('\\\"prompt\\\":')[1].trim();\\n            }\\n        }\\n\\n        if (currentPrompt) {\\n            result.image_prompt.push(currentPrompt.trim());\\n        }\\n\\n        return { json: result };\\n        \\n    } catch (error) {\\n        return { \\n            json: {\\n                image_prompt: []\\n            }\\n        };\\n    }\\n}\\n\\nconst response = $input.first().json.output;\\nreturn cleanAndExtractJSON(response);\"       },       \"id\": \"4c3b1b92-a929-49cc-96af-a6aa27ffadcc\",       \"name\": \"Code - Clean Json\",       \"type\": \"n8n-nodes-base.code\",       \"position\": [         944,         -1536       ],       \"executeOnce\": false,       \"typeVersion\": 2,       \"alwaysOutputData\": true     },     {       \"parameters\": {         \"assignments\": {           \"assignments\": [             {               \"id\": \"4e04fec4-441e-45f7-acea-0017a4b5c104\",               \"name\": \"model\",               \"type\": \"string\",               \"value\": \"flux\"             },             {               \"id\": \"aa80cd68-1c82-4032-b1d7-e098856eec38\",               \"name\": \"width\",               \"type\": \"string\",               \"value\": \"1080\"             },             {               \"id\": \"da6d305f-aece-49bd-ae02-52df59915c60\",               \"name\": \"height\",               \"type\": \"string\",               \"value\": \"1920\"             }           ]         },         \"options\": {}       },       \"id\": \"3d5de988-6ffd-4550-b15c-32d677c6a8fe\",       \"name\": \"Fields - Set Values\",       \"type\": \"n8n-nodes-base.set\",       \"position\": [         352,         -1536       ],       \"typeVersion\": 3.4     },     {       \"parameters\": {         \"modelName\": \"models/gemini-2.0-flash\",         \"options\": {           \"maxOutputTokens\": 65536,           \"temperature\": 0.5,           \"topK\": 40,           \"topP\": 1,           \"safetySettings\": {             \"values\": [               {                 \"category\": \"HARM_CATEGORY_HARASSMENT\",                 \"threshold\": \"BLOCK_NONE\"               },               {                 \"category\": \"HARM_CATEGORY_HATE_SPEECH\",                 \"threshold\": \"BLOCK_NONE\"               },               {                 \"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",                 \"threshold\": \"BLOCK_NONE\"               },               {                 \"category\": \"HARM_CATEGORY_DANGEROUS_CONTENT\",                 \"threshold\": \"BLOCK_NONE\"               }             ]           }         }       },       \"id\": \"22402c1c-1299-4abf-bed7-b42a0e9c4238\",       \"name\": \"Google Gemini Chat Model3\",       \"type\": \"@n8n/n8n-nodes-langchain.lmChatGoogleGemini\",       \"position\": [         576,         -1280       ],       \"typeVersion\": 1,       \"credentials\": {         \"googlePalmApi\": {           \"id\": \"ZW9anOdgJHYYnEsa\",           \"name\": \"Google Gemini(PaLM) Api account\"         }       }     },     {       \"parameters\": {         \"options\": {}       },       \"type\": \"@n8n/n8n-nodes-langchain.chatTrigger\",       \"typeVersion\": 1.3,       \"position\": [         160,         -1536       ],       \"id\": \"a640203f-d684-491d-8d15-828974b66270\",       \"name\": \"When chat message received\",       \"webhookId\": \"003f5a2d-b42c-4671-9db5-8e760cf206ba\"     }   ],   \"connections\": {     \"HTTP Request - Create Image3\": {       \"main\": [         [           {             \"node\": \"Save Image To Disk\",             \"type\": \"main\",             \"index\": 0           }         ]       ]     },     \"Save Image To Disk\": {       \"main\": [         [           {             \"node\": \"Respond to Webhook1\",             \"type\": \"main\",             \"index\": 0           }         ]       ]     },     \"AI Agent - Create Image From Prompt\": {       \"main\": [         [           {             \"node\": \"Code - Clean Json\",             \"type\": \"main\",             \"index\": 0           }         ]       ]     },     \"Code - Set Filename\": {       \"main\": [         [           {             \"node\": \"HTTP Request - Create Image3\",             \"type\": \"main\",             \"index\": 0           }         ]       ]     },     \"Code - Get Prompt\": {       \"main\": [         [           {             \"node\": \"Code - Set Filename\",             \"type\": \"main\",             \"index\": 0           }         ]       ]     },     \"Code - Clean Json\": {       \"main\": [         [           {             \"node\": \"Code - Get Prompt\",             \"type\": \"main\",             \"index\": 0           }         ]       ]     },     \"Fields - Set Values\": {       \"main\": [         [           {             \"node\": \"AI Agent - Create Image From Prompt\",             \"type\": \"main\",             \"index\": 0           }         ]       ]     },     \"Google Gemini Chat Model3\": {       \"ai_languageModel\": [         [           {             \"node\": \"AI Agent - Create Image From Prompt\",             \"type\": \"ai_languageModel\",             \"index\": 0           }         ]       ]     },     \"When chat message received\": {       \"main\": [         [           {             \"node\": \"Fields - Set Values\",             \"type\": \"main\",             \"index\": 0           }         ]       ]     }   },   \"pinData\": {},   \"meta\": {     \"templateCredsSetupCompleted\": true,     \"instanceId\": \"d3a93d96b87c932ca5bb5705abcde014d342090fde7086055f4df32bb7192bd5\"   } }",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        480,
        2416
      ],
      "id": "5719b484-e9aa-48ba-a8bf-8175751a634e",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=http://localhost:5678/webhook{{ $json.webhook_path }}",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "input",
              "value": "Test from automation"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3968,
        6368
      ],
      "id": "aa144574-fd1e-40f1-a0df-cfa037fc315f",
      "name": "Test Webhook1",
      "disabled": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "has-nodes",
              "leftValue": "={{ $json.nodes?.length > 0 }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        3648,
        7168
      ],
      "id": "86dabf5d-4b23-4c41-9c0a-700b60b96542",
      "name": "Has Nodes?",
      "disabled": true
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "options": {}
      },
      "id": "747eab5d-a907-496e-bf31-0d7529352fd4",
      "name": "Transform to base",
      "type": "n8n-nodes-base.extractFromFile",
      "position": [
        1728,
        6976
      ],
      "typeVersion": 1,
      "disabled": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "// ULTRA-ROBUST JSON PARSER for DeepSeek model output\nconst input = $input.first().json;\n\n// Step 0: Extract raw text from DeepSeek response format\nlet raw = null;\n\n// DeepSeek returns array of objects with \"text\" field\nif (Array.isArray(input) && input[0]?.text) {\n    raw = input[0].text;\n} else if (input?.text) {\n    raw = input.text;\n} else {\n    throw new Error(\"❌ No response text found from DeepSeek model\");\n}\n\nif (!raw) throw new Error(\"❌ Empty response from DeepSeek model\");\n\n// Step 1: Clean markdown and whitespace\nraw = raw\n  .replace(/```json\\s*/gi, '')\n  .replace(/```\\s*/g, '')\n  .replace(/^[^{]*/, '')  // Remove text before first {\n  .replace(/[^}]*$/, '')  // Remove text after last }\n  .trim();\n\n// Step 2: Extract JSON object\nconst jsonStart = raw.indexOf('{');\nconst jsonEnd = raw.lastIndexOf('}');\nif (jsonStart === -1 || jsonEnd === -1) throw new Error(\"❌ No JSON object found\");\nraw = raw.substring(jsonStart, jsonEnd + 1);\n\n// Step 3: Advanced repair function\nfunction repairJSON(str) {\n  let repaired = str;\n  repaired = repaired.replace(/,\\s*([\\]}])/g, '$1'); // remove trailing commas\n  repaired = repaired.replace(/\\}\\s*\\{/g, '},{'); // fix merged objects\n  repaired = repaired.replace(/\\]\\s*\\[/g, '],['); // fix merged arrays\n  repaired = repaired.replace(/\"([^\"]*?)\"([^,:{}\\[\\]]*?)\"([^\"]*?)\"/g, (m,p1,p2,p3) => p2 && !p2.match(/^\\s*[,:\\]}]\\s*$/) ? `\"${p1}${p2.replace(/\"/g,'\\\\\"')}${p3}\"` : m);\n  repaired = repaired.replace(/[\\x00-\\x1F\\x7F]/g,''); // remove invalid characters\n  repaired = repaired.replace(/([{,]\\s*)([a-zA-Z_][a-zA-Z0-9_]*)\\s*:/g,'$1\"$2\":'); // quote keys\n  repaired = repaired.replace(/([\\[{,])\\s+/g,'$1'); // remove spaces after brackets\n  repaired = repaired.replace(/\\s+([\\]}])/g,'$1'); // remove spaces before brackets\n  return repaired;\n}\n\n// Step 4: Attempt multiple parses\nlet parsed = null;\nlet parseAttempts = [\n  () => JSON.parse(raw),\n  () => JSON.parse(repairJSON(raw)),\n  () => {\n    const workflowMatch = raw.match(/\"modified_workflow\"\\s*:\\s*\\{[\\s\\S]*?\\}\\s*,\\s*\"added_webhook_path\"\\s*:\\s*\".*?\"\\s*,\\s*\"n8n_workflow_name\"\\s*:\\s*\".*?\"/i);\n    if (workflowMatch) return JSON.parse(repairJSON('{' + workflowMatch[0] + '}'));\n    throw new Error(\"Cannot extract main workflow fields\");\n  }\n];\n\nlet lastError = null;\nfor (let i = 0; i < parseAttempts.length; i++) {\n  try {\n    parsed = parseAttempts[i]();\n    break;\n  } catch(e) {\n    lastError = e;\n  }\n}\n\nif (!parsed) throw new Error(`❌ All parse attempts failed. Last error: ${lastError.message}`);\n\n// Step 5: Validate required fields\nconst requiredFields = [\"modified_workflow\",\"added_webhook_path\",\"n8n_workflow_name\"];\nfor (const f of requiredFields) {\n  if (!(f in parsed)) throw new Error(`❌ Missing field: ${f}`);\n}\n\n// Step 6: Return parsed JSON in system message format\nreturn [{\n  json: {\n    modified_workflow: parsed.modified_workflow,\n    added_webhook_path: parsed.added_webhook_path,\n    n8n_workflow_name: parsed.n8n_workflow_name\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2304,
        7168
      ],
      "id": "f034cd55-6a67-4f6c-98d0-73cb9155dfd8",
      "name": "Parse & Validate Response2",
      "disabled": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "// Advanced workflow validation with auto-fix\nconst nodes =$input.first().json.modified_workflow.nodes;\nconst connections = $input.first().json.modified_workflow.connections;\nconst webhook_path = $input.first().json.added_webhook_path;\n\nconsole.log(`🔍 Validating ${nodes.length} nodes...`);\n\n// 1. Validate and fix all nodes\nconst validatedNodes = [];\nconst nodeIds = new Set();\nconst nodeNames = new Set();\nlet fixedCount = 0;\n\nfor (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    let fixed = false;\n    \n    // Fix missing ID\n    if (!node.id) {\n        node.id = `node-${Date.now()}-${i}-${Math.random().toString(36).substr(2, 9)}`;\n        fixed = true;\n    }\n    \n    // Fix missing name\n    if (!node.name) {\n        node.name = `Node_${i + 1}_${node.type?.split('.').pop() || 'Unknown'}`;\n        fixed = true;\n    }\n    \n    // Check for duplicate names\n    if (nodeNames.has(node.name)) {\n        node.name = `${node.name}_${Date.now()}_${i}`;\n        fixed = true;\n    }\n    \n    // Fix missing type\n    if (!node.type) {\n        console.log(`❌ Node ${node.name} has no type - skipping`);\n        continue;\n    }\n    \n    // Fix missing position\n    if (!node.position || !Array.isArray(node.position) || node.position.length !== 2) {\n        node.position = [i * 240, 1824];\n        fixed = true;\n    }\n    \n    // Fix invalid position values\n    if (typeof node.position[0] !== 'number' || typeof node.position[1] !== 'number') {\n        node.position = [i * 240, 1824];\n        fixed = true;\n    }\n    \n    // Fix missing typeVersion\n    if (!node.typeVersion) {\n        node.typeVersion = 1;\n        fixed = true;\n    }\n    \n    // Ensure parameters exist\n    if (!node.parameters) {\n        node.parameters = {};\n        fixed = true;\n    }\n    \n    if (fixed) {\n        fixedCount++;\n        console.log(`🔧 Fixed node: ${node.name}`);\n    }\n    \n    nodeIds.add(node.id);\n    nodeNames.add(node.name);\n    validatedNodes.push(node);\n}\n\nconsole.log(`✅ Validated ${validatedNodes.length} nodes (${fixedCount} fixed)`);\n\nif (validatedNodes.length === 0) {\n    throw new Error(\"❌ No valid nodes after validation\");\n}\n\n// 2. Clean and validate connections\nconst cleanedConnections = {};\nlet removedConnections = 0;\nlet fixedConnections = 0;\n\nfor (const [sourceNodeName, connectionTypes] of Object.entries(connections)) {\n    const sourceNode = validatedNodes.find(n => n.name === sourceNodeName);\n    \n    if (!sourceNode) {\n        console.log(`⚠️ Removing connections from non-existent source: ${sourceNodeName}`);\n        removedConnections++;\n        continue;\n    }\n    \n    cleanedConnections[sourceNodeName] = {};\n    \n    for (const [connType, connArray] of Object.entries(connectionTypes)) {\n        if (!Array.isArray(connArray)) {\n            console.log(`⚠️ Invalid connection type format for ${sourceNodeName}.${connType}`);\n            continue;\n        }\n        \n        cleanedConnections[sourceNodeName][connType] = [];\n        \n        for (const connGroup of connArray) {\n            if (!Array.isArray(connGroup)) {\n                console.log(`⚠️ Invalid connection group in ${sourceNodeName}`);\n                continue;\n            }\n            \n            const validConnections = [];\n            \n            for (const conn of connGroup) {\n                // Validate connection structure\n                if (!conn || typeof conn !== 'object') {\n                    removedConnections++;\n                    continue;\n                }\n                \n                // Fix missing fields\n                if (!conn.node) {\n                    console.log(`⚠️ Connection missing target node name`);\n                    removedConnections++;\n                    continue;\n                }\n                \n                if (conn.type === undefined) {\n                    conn.type = 'main';\n                    fixedConnections++;\n                }\n                \n                if (conn.index === undefined) {\n                    conn.index = 0;\n                    fixedConnections++;\n                }\n                \n                // Check if target node exists\n                const targetNode = validatedNodes.find(n => n.name === conn.node);\n                if (!targetNode) {\n                    console.log(`⚠️ Removing connection to non-existent target: ${conn.node}`);\n                    removedConnections++;\n                    continue;\n                }\n                \n                validConnections.push(conn);\n            }\n            \n            if (validConnections.length > 0) {\n                cleanedConnections[sourceNodeName][connType].push(validConnections);\n            }\n        }\n        \n        // Remove empty connection types\n        if (cleanedConnections[sourceNodeName][connType].length === 0) {\n            delete cleanedConnections[sourceNodeName][connType];\n        }\n    }\n    \n    // Remove empty connection objects\n    if (Object.keys(cleanedConnections[sourceNodeName]).length === 0) {\n        delete cleanedConnections[sourceNodeName];\n    }\n}\n\nconsole.log(`🔗 Connections: ${removedConnections} removed, ${fixedConnections} fixed`);\n\n// 3. Detect orphaned nodes\nconst connectedNodeNames = new Set();\nfor (const [source, types] of Object.entries(cleanedConnections)) {\n    connectedNodeNames.add(source);\n    for (const connArray of Object.values(types)) {\n        for (const group of connArray) {\n            for (const conn of group) {\n                connectedNodeNames.add(conn.node);\n            }\n        }\n    }\n}\n\nconst orphanedNodes = validatedNodes.filter(node => \n    !connectedNodeNames.has(node.name) && \n    !node.type.toLowerCase().includes('trigger') &&\n    !node.type.toLowerCase().includes('webhook')\n);\n\nif (orphanedNodes.length > 0) {\n    console.log(`⚠️ Found ${orphanedNodes.length} orphaned nodes: ${orphanedNodes.map(n => n.name).join(', ')}`);\n}\n\n// 4. Validate specific node types\nconst webhookNodes = validatedNodes.filter(n => \n    n.type === 'n8n-nodes-base.webhook' ||\n    n.type.toLowerCase().includes('webhook')\n);\n\nfor (const webhook of webhookNodes) {\n    if (!webhook.parameters?.path) {\n        console.log(`⚠️ Webhook ${webhook.name} missing path, adding default`);\n        if (!webhook.parameters) webhook.parameters = {};\n        webhook.parameters.path = `/webhook-${Date.now()}`;\n    }\n}\n\n// 5. Ensure workflow has a trigger\nconst hasTrigger = validatedNodes.some(n => \n    n.type.toLowerCase().includes('trigger') ||\n    n.type.toLowerCase().includes('webhook')\n);\n\nif (!hasTrigger) {\n    console.log(\"⚠️ WARNING: Workflow has no trigger node!\");\n}\n\n// 6. Final report\nconst validationReport = {\n    total_nodes: validatedNodes.length,\n    nodes_fixed: fixedCount,\n    connections_removed: removedConnections,\n    connections_fixed: fixedConnections,\n    orphaned_nodes: orphanedNodes.map(n => n.name),\n    webhook_nodes: webhookNodes.map(n => ({ name: n.name, path: n.parameters?.path })),\n    has_trigger: hasTrigger,\n    validation_passed: validatedNodes.length > 0 && hasTrigger\n};\n\nconsole.log(\"📊 Validation Report:\", JSON.stringify(validationReport, null, 2));\n\nreturn [{ \n    json: { \n        modify_nodes: validatedNodes,\n        modify_connections: cleanedConnections,\n        webhook_path: webhook_path,\n        n8n_workflow_name : $input.first().json.n8n_workflow_name || '',\n        validation_report: validationReport\n        \n      \n    } \n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2528,
        7168
      ],
      "id": "d1f028ca-55ab-4f9f-ad7c-a141d3feb05b",
      "name": "Validate & Clean Workflow1",
      "disabled": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "workflow-payload",
              "name": "workflowPayload",
              "value": "={{ \n  JSON.stringify({\n\"name\": ($json.n8n_workflow_name ? $json.n8n_workflow_name + \"-\" + Date.now() : \"AI_Generated_\" + Date.now()),\n    \"nodes\": $json.modify_nodes,\n    \"connections\": $json.modify_connections,\n    \"settings\": {\n      \"saveExecutionProgress\": true,\n      \"saveManualExecutions\": true,\n      \"saveDataErrorExecution\": \"all\",\n      \"saveDataSuccessExecution\": \"all\",\n      \"executionTimeout\": 3600,\n      \"timezone\": \"America/New_York\",\n      \"executionOrder\": \"v1\"\n    },\n    \"staticData\": {}\n  })\n}}",
              "type": "string"
            },
            {
              "id": "validation-report",
              "name": "validation_report",
              "value": "={{ $json.validation_report }}",
              "type": "object"
            },
            {
              "id": "5a2df228-6121-4033-b2e4-d9936b0bb9f6",
              "name": "n8n_webhook_path",
              "value": "={{ $json.webhook_path }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2752,
        7168
      ],
      "id": "c04a3724-a66e-403c-bca5-e7e9d020479d",
      "name": "Prepare Workflow Payload1",
      "disabled": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:5678/api/v1/workflows",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.workflowPayload }}",
        "options": {
          "redirect": {
            "redirect": {}
          },
          "timeout": 30000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2976,
        7168
      ],
      "id": "8a70cbdc-dbaa-40ca-9be5-6a1d71f543ad",
      "name": "Create Workflow1",
      "disabled": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "const response = $input.first().json;\n\nif (!response.id) {\n    throw new Error(\"❌ Workflow creation failed - no ID returned\");\n}\n\nconsole.log(`✅ Workflow created:`);\nconsole.log(`   ID: ${response.id}`);\nconsole.log(`   Name: ${response.name || 'N/A'}`);\nconsole.log(`   Nodes: ${response.nodes?.length || 0}`);\n\nreturn [{ \n    json: { \n        id: response.id,\n        name: response.name || 'Unnamed',\n        active: response.active || false,\n        nodes: response.nodes || [],\n        created: true\n    } \n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3200,
        7168
      ],
      "id": "636cb92e-8d8b-4514-be69-11948f54beed",
      "name": "Verify Creation1",
      "disabled": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=http://localhost:5678/api/v1/workflows/{{ $json.id }}/activate",
        "options": {
          "timeout": 15000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3424,
        7168
      ],
      "id": "593e06cf-6331-4feb-b35c-077f183a01ea",
      "name": "Activate Workflow1",
      "disabled": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "const webhookPath = $('Validate & Clean Workflow1').first().json.webhook_path;\n\nif (!webhookPath) {\n    console.log(\"⚠️ Webhook has no path\");\n    return [{ json: { has_webhook: false, skip_test: true, message: \"Webhook missing path\" } }];\n}\n\nconsole.log(`✅ Webhook found: ${webhookPath}`);\n\nreturn [{ \n    json: {\n        webhook_path: webhookPath\n    } \n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3872,
        7168
      ],
      "id": "821af702-637c-4a48-8d05-cb146505b024",
      "name": "Extract Webhook Path1",
      "disabled": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "body",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        1504,
        6976
      ],
      "id": "261f65a6-7eaa-4d46-a247-d5b9926a677a",
      "name": "Convert to File",
      "disabled": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "n8n-testing",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        1280,
        6976
      ],
      "id": "eb021eaf-ef19-4d68-9324-28211357d77e",
      "name": "Webhook",
      "webhookId": "f6ea9d05-bd9f-445b-97aa-bd089e99b132",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/errors",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Error",
              "value": "Conversation Failed!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1728,
        7168
      ],
      "id": "6e0fb759-6993-4ad0-b614-a4de8015188a",
      "name": "HTTP Request2",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/errors",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Error",
              "value": "Parse Validations Failed"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2528,
        7360
      ],
      "id": "5fdf20af-be7b-4ec7-b99c-f7c93e60c7d9",
      "name": "HTTP Request25",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/errors",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Error",
              "value": "Workflow Clean Failed!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2752,
        7360
      ],
      "id": "3a454dc1-e0bb-4e40-8981-cd7d1cefe5e4",
      "name": "HTTP Request26",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/errors",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Error",
              "value": "Workflow Creation Failed!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3200,
        7360
      ],
      "id": "db5de53d-abfb-49ae-af1b-371d8746537f",
      "name": "HTTP Request27",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/errors",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Error",
              "value": "Verification of Create Workflow Failed!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3424,
        7360
      ],
      "id": "0517f6fd-c23d-4e80-bdfa-3635a7e38605",
      "name": "HTTP Request28",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/errors",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Error",
              "value": "Payload Failed!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2976,
        7360
      ],
      "id": "53e3f99c-f42e-4709-969d-0a4b68d78e1a",
      "name": "HTTP Request29",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/errors",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Error",
              "value": "Workflow Activation Process Failed!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3648,
        7360
      ],
      "id": "3e6336cd-2106-4965-a409-1994017f6751",
      "name": "HTTP Request30",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/errors",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Error",
              "value": "Data is Not Coming from past Node"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3872,
        7360
      ],
      "id": "58d06a46-20f0-4c1f-ad1a-eccb29bd6b15",
      "name": "HTTP Request31",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/errors",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Error",
              "value": "Conversation Failed!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4096,
        7360
      ],
      "id": "56097609-9eb3-42dc-a90e-960ea08aebdf",
      "name": "HTTP Request32",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/errors",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Error",
              "value": "={{ $json.message }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4320,
        7264
      ],
      "id": "a8514350-7d8f-4c90-bdd1-11e44bfb26d3",
      "name": "HTTP Request33",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "File Created Successfully."
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1728,
        6784
      ],
      "id": "1d638c6a-0cc6-4dc7-bd1d-7b5959b57028",
      "name": "HTTP Request34",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Base64 Conversation Successfully."
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2016,
        6880
      ],
      "id": "47638f96-1188-4b69-b18a-667e5c0cd115",
      "name": "HTTP Request35",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Model Response generated successfully."
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2304,
        6976
      ],
      "id": "f3fc2422-cc66-4234-8285-1e3bf7e36c45",
      "name": "HTTP Request36",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Parse Validations Failed"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2528,
        6976
      ],
      "id": "e48c8dbe-6829-4a61-ad3b-1a35cbf1c7ab",
      "name": "HTTP Request37",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Workflow Clean Sucessfully!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2752,
        6976
      ],
      "id": "fabf8bdb-2095-44c5-995c-17f632959781",
      "name": "HTTP Request38",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Payload Created Successfully!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2976,
        6976
      ],
      "id": "4b970911-f4cb-41d5-8292-bd3e2ec4c6bf",
      "name": "HTTP Request39",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Workflow Created Successfully!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3200,
        6976
      ],
      "id": "54644951-143a-4bbb-9249-38e0f26bced5",
      "name": "HTTP Request40",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Workflow Created Verification Done."
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3424,
        6976
      ],
      "id": "92ee7772-9084-41cd-81b7-5d4ec1e5bc30",
      "name": "HTTP Request41",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Workflow Activated Successfully."
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3648,
        6976
      ],
      "id": "3eed1211-c22e-4cf6-bcfd-e0da2063f57d",
      "name": "HTTP Request42",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Workflow parse Successfully."
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3872,
        6976
      ],
      "id": "dcc8a3e7-1be7-4298-afb1-bf9c1e3373a1",
      "name": "HTTP Request43",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Workflow Running Successfully."
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4320,
        7072
      ],
      "id": "0eb58369-0834-4737-8fb2-03c48b546b08",
      "name": "HTTP Request44",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Workflow Webhook Path Get Successfully."
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4096,
        6976
      ],
      "id": "a7ea4265-b5f3-4e59-a23f-b1570393a4d6",
      "name": "HTTP Request45",
      "disabled": true
    },
    {
      "parameters": {
        "dataTableId": {
          "__rl": true,
          "value": "3ADbmUGX0qSSuErX",
          "mode": "list",
          "cachedResultName": "n8n",
          "cachedResultUrl": "/projects/nSUbNPn8P23MJaxQ/datatables/3ADbmUGX0qSSuErX"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [
            "status"
          ],
          "schema": [
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "timestamp",
              "displayName": "timestamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "message",
              "displayName": "message",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "stage",
              "displayName": "stage",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "workflow_id",
              "displayName": "workflow_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {
          "optimizeBulk": false
        }
      },
      "type": "n8n-nodes-base.dataTable",
      "typeVersion": 1,
      "position": [
        4544,
        7072
      ],
      "id": "79b5ef9b-8b2c-44a1-a0c9-abe9b80fb91e",
      "name": "Insert row1",
      "disabled": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "You are a JSON generator for n8n workflows. CRITICAL REQUIREMENTS:\n\n1. Return ONLY valid, parseable JSON - no markdown, no explanations\n2. Use this EXACT structure:\n{\n  \"modified_workflow\": {\n    \"name\": \"Workflow Name\",\n    \"nodes\": [...],\n    \"connections\": {...},\n    \"pinData\": {},\n    \"settings\": {...},\n    \"staticData\": null,\n    \"tags\": [],\n    \"triggerCount\": 0,\n    \"updatedAt\": \"2025-10-06T14:30:00.000Z\",\n    \"versionId\": \"...\"\n  },\n  \"added_webhook_path\": \"/webhook-trigger-replacement-YYYY-MM-DD-HHmmss\",\n  \"n8n_workflow_name\": \"Descriptive Workflow Name\",\n  \"changes_made\": {\n    \"updated_references\": [\n      {\"node\": \"WorkflowName\"}\n    ]\n  }\n}\n\n3. JSON RULES:\n   - All strings must use double quotes\n   - No trailing commas\n   - All brackets must match\n   - Escape special characters\n   - Numbers without quotes\n\n4. Each node MUST have: id, name, type, position [x,y], typeVersion, parameters\n5. Validate all connections reference existing node names\n6. Test your JSON before responding\n\nGenerate updated n8n workflow from the provided data.",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "={{ $json.data }}"
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        1952,
        7072
      ],
      "id": "04434665-10e0-48d2-b3bb-f4f2500611ef",
      "name": "Basic LLM Chain1",
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "console.log('=== Pre-Creation Validator START ===');\nconst payload = JSON.parse($json.workflowPayload);\n\nconst validations = {\n  has_nodes: payload.nodes && payload.nodes.length > 0,\n  has_connections: payload.connections && Object.keys(payload.connections).length > 0,\n  has_webhook: payload.nodes.some(n => n.type === 'n8n-nodes-base.webhook'),\n  has_set_data: payload.nodes.some(n => n.name === 'Set Test Data'),\n  all_connections_valid: true,\n  all_nodes_have_ids: payload.nodes.every(n => n.id),\n  all_nodes_have_types: payload.nodes.every(n => n.type),\n  all_nodes_have_positions: payload.nodes.every(n => n.position && n.position.length === 2)\n};\n\nconst nodeNames = new Set(payload.nodes.map(n => n.name));\nfor (const [source, targets] of Object.entries(payload.connections)) {\n  if (!nodeNames.has(source)) {\n    validations.all_connections_valid = false;\n    console.log(`❌ Invalid connection source: ${source}`);\n  }\n  for (const connArray of Object.values(targets)) {\n    for (const connGroup of connArray) {\n      for (const conn of connGroup) {\n        if (!nodeNames.has(conn.node)) {\n          validations.all_connections_valid = false;\n          console.log(`❌ Invalid connection target: ${conn.node}`);\n        }\n      }\n    }\n  }\n}\n\nconst allValid = Object.values(validations).every(v => v === true);\n\nif (!allValid) {\n  console.log('❌ Validation failed:', JSON.stringify(validations, null, 2));\n  throw new Error(`Pre-creation validation failed: ${JSON.stringify(validations, null, 2)}`);\n}\n\nconsole.log('✅ All pre-creation validations passed');\nconsole.log('=== Pre-Creation Validator END ===');\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2800,
        9040
      ],
      "id": "dcd59de7-42a2-4882-852d-bef353d17e9f",
      "name": "Validate Before Creation",
      "disabled": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "model": "deepseek/deepseek-chat-v3.1:free",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        1568,
        9312
      ],
      "id": "22100225-b06f-41d5-b8a3-cd97004b9693",
      "name": "OpenRouter Chat Model",
      "disabled": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "You are a JSON generator for n8n workflows. CRITICAL REQUIREMENTS:\n\nInput Json: {\n{\n  \"nodes\": [\n    {\n      \"parameters\": {\n        \"jsCode\": \"const workflow = $('Code1').first().json.workflow;\\nconst fileName = $input.first().json.file_set;\\n\\n// Recursive cleaner\\nfunction deepClean(obj) {\\n  if (typeof obj !== 'object' || obj === null) return obj;\\n\\n  for (const key in obj) {\\n    // Remove auth/secret related keys\\n    if (\\n      key.toLowerCase().includes('credential') ||\\n      key.toLowerCase().includes('token') ||\\n      key.toLowerCase().includes('key') ||\\n      key.toLowerCase().includes('secret') ||\\n      key.toLowerCase().includes('auth') ||\\n      key.toLowerCase().includes('password') ||\\n      key.toLowerCase().includes('header')\\n    ) {\\n      delete obj[key];\\n    } else if (typeof obj[key] === 'object') {\\n      obj[key] = deepClean(obj[key]);\\n    }\\n  }\\n  return obj;\\n}\\n\\nconst cleanWorkflow = deepClean(JSON.parse(JSON.stringify(workflow)));\\n\\nreturn {\\n  json: {\\n    file_name: fileName,\\n    workflow: cleanWorkflow\\n  }\\n};\\n\"\n      },\n      \"type\": \"n8n-nodes-base.code\",\n      \"typeVersion\": 2,\n      \"position\": [\n        -1456,\n        -64\n      ],\n      \"id\": \"3e9e3f0e-e917-454e-a6e7-518b75c5a0c6\",\n      \"name\": \"Code3\"\n    },\n    {\n      \"parameters\": {\n        \"rules\": {\n          \"values\": [\n            {\n              \"conditions\": {\n                \"options\": {\n                  \"caseSensitive\": true,\n                  \"leftValue\": \"\",\n                  \"typeValidation\": \"strict\",\n                  \"version\": 2\n                },\n                \"conditions\": [\n                  {\n                    \"leftValue\": \"={{ $json.isCommon }}\",\n                    \"rightValue\": \"true\",\n                    \"operator\": {\n                      \"type\": \"boolean\",\n                      \"operation\": \"true\",\n                      \"singleValue\": true\n                    },\n                    \"id\": \"65fba2fd-1100-4637-8bc1-d6a0d2ab5dd8\"\n                  }\n                ],\n                \"combinator\": \"and\"\n              }\n            },\n            {\n              \"conditions\": {\n                \"options\": {\n                  \"caseSensitive\": true,\n                  \"leftValue\": \"\",\n                  \"typeValidation\": \"strict\",\n                  \"version\": 2\n                },\n                \"conditions\": [\n                  {\n                    \"id\": \"05a60a19-8625-4764-869c-3dc9f8f47488\",\n                    \"leftValue\": \"={{ $json.isCommon }}\",\n                    \"rightValue\": \"\",\n                    \"operator\": {\n                      \"type\": \"boolean\",\n                      \"operation\": \"false\",\n                      \"singleValue\": true\n                    }\n                  }\n                ],\n                \"combinator\": \"and\"\n              }\n            },\n            {\n              \"conditions\": {\n                \"options\": {\n                  \"caseSensitive\": true,\n                  \"leftValue\": \"\",\n                  \"typeValidation\": \"strict\",\n                  \"version\": 2\n                },\n                \"conditions\": [\n                  {\n                    \"id\": \"edd35a46-9bd5-46a9-95f6-2301848d104d\",\n                    \"leftValue\": \"{{ $json.isCommon }}\",\n                    \"rightValue\": \"\",\n                    \"operator\": {\n                      \"type\": \"string\",\n                      \"operation\": \"notExists\",\n                      \"singleValue\": true\n                    }\n                  }\n                ],\n                \"combinator\": \"and\"\n              }\n            }\n          ]\n        },\n        \"options\": {}\n      },\n      \"type\": \"n8n-nodes-base.switch\",\n      \"typeVersion\": 3.2,\n      \"position\": [\n        -1760,\n        80\n      ],\n      \"id\": \"d9cbb5f7-f481-4fe8-911d-fb853ded687b\",\n      \"name\": \"Switch\"\n    },\n    {\n      \"parameters\": {\n        \"jsCode\": \"const file_name = $('Code1').first().json.file_name || '';  \\nconst workflowId_new = file_name.split(\\\"_\\\")[0];  \\nconst file_set = $('Code1').first().json.file_name || '';\\n\\n// check if ANY workflow matches\\nconst isCommon = $input.all().some(item => {\\n  const fileName = item.json.name;   // or item.json.content.name if nested\\n  const workflowId = fileName.split(\\\"_\\\")[0];\\n  return workflowId === workflowId_new;\\n});\\n\\nreturn [{ isCommon,file_set }];\\n\"\n      },\n      \"type\": \"n8n-nodes-base.code\",\n      \"typeVersion\": 2,\n      \"position\": [\n        -1968,\n        96\n      ],\n      \"id\": \"e8fa1fbb-c77d-4282-b715-1c56e98c468b\",\n      \"name\": \"Code2\"\n    },\n    {\n      \"parameters\": {\n        \"authentication\": \"oAuth2\",\n        \"resource\": \"file\",\n        \"operation\": \"get\",\n        \"owner\": {\n          \"__rl\": true,\n          \"value\": \"sanjay-e2m\",\n          \"mode\": \"name\"\n        },\n        \"repository\": {\n          \"__rl\": true,\n          \"value\": \"My_n8n_workflows\",\n          \"mode\": \"list\",\n          \"cachedResultName\": \"My_n8n_workflows\",\n          \"cachedResultUrl\": \"https://github.com/sanjay-e2m/My_n8n_workflows\"\n        },\n        \"filePath\": \"/\",\n        \"asBinaryProperty\": false,\n        \"additionalParameters\": {}\n      },\n      \"type\": \"n8n-nodes-base.github\",\n      \"typeVersion\": 1.1,\n      \"position\": [\n        -2176,\n        96\n      ],\n      \"id\": \"3db50943-35e0-4588-bd91-0716115b93d8\",\n      \"name\": \"Get a file\",\n      \"webhookId\": \"f2000f07-3d6e-44b4-b1a4-4a3e6579689d\",\n      \"credentials\": {\n        \"githubOAuth2Api\": {\n          \"id\": \"RthMjnVOfbjSI5JX\",\n          \"name\": \"GitHub account\"\n        }\n      }\n    },\n    {\n      \"parameters\": {\n        \"jsCode\": \"// Handle both cases: array or object with array inside\\nlet workflows = $json;\\n\\n// If the data is wrapped inside { data: [...] } or similar\\nif (!Array.isArray(workflows) && Array.isArray(workflows.data)) {\\n  workflows = workflows.data;\\n}\\n\\n// If it's still not an array, wrap it\\nif (!Array.isArray(workflows)) {\\n  workflows = [workflows];\\n}\\n\\nreturn workflows.map(wf => {\\n  return {\\n    json: {\\n      workflow: wf,\\n      file_name: `${wf.id}_${wf.name}.json`\\n    }\\n  };\\n});\\n\"\n      },\n      \"type\": \"n8n-nodes-base.code\",\n      \"typeVersion\": 2,\n      \"position\": [\n        -2384,\n        96\n      ],\n      \"id\": \"14a2f0ca-11c4-4c5f-bca6-a044129fb35c\",\n      \"name\": \"Code1\"\n    },\n    {\n      \"parameters\": {},\n      \"type\": \"n8n-nodes-base.noOp\",\n      \"name\": \"Replace Me\",\n      \"typeVersion\": 1,\n      \"position\": [\n        -880,\n        96\n      ],\n      \"id\": \"ed2d4524-9327-4d7a-a89b-fce26f617ff6\"\n    },\n    {\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"type\": \"n8n-nodes-base.splitInBatches\",\n      \"typeVersion\": 3,\n      \"position\": [\n        -2640,\n        80\n      ],\n      \"id\": \"89129153-ed79-4f57-a83d-817d008c28f8\",\n      \"name\": \"Loop Over Items\"\n    },\n    {\n      \"parameters\": {\n        \"jsCode\": \"const workflow = $('Code1').first().json.workflow;\\nconst fileName = $input.first().json.content.name;\\n\\n// Recursive cleaner\\nfunction deepClean(obj) {\\n  if (typeof obj !== 'object' || obj === null) return obj;\\n\\n  for (const key in obj) {\\n    // Remove auth/secret related keys\\n    if (\\n      key.toLowerCase().includes('credential') ||\\n      key.toLowerCase().includes('token') ||\\n      key.toLowerCase().includes('key') ||\\n      key.toLowerCase().includes('secret') ||\\n      key.toLowerCase().includes('auth') ||\\n      key.toLowerCase().includes('password') ||\\n      key.toLowerCase().includes('header')\\n    ) {\\n      delete obj[key];\\n    } else if (typeof obj[key] === 'object') {\\n      obj[key] = deepClean(obj[key]);\\n    }\\n  }\\n  return obj;\\n}\\n\\nconst cleanWorkflow = deepClean(JSON.parse(JSON.stringify(workflow)));\\n\\nreturn {\\n  json: {\\n    file_name: fileName,\\n    workflow: cleanWorkflow\\n  }\\n};\\n\"\n      },\n      \"type\": \"n8n-nodes-base.code\",\n      \"typeVersion\": 2,\n      \"position\": [\n        -1360,\n        96\n      ],\n      \"id\": \"519485e6-1adb-439a-9f23-71b446d8ae7c\",\n      \"name\": \"Code\"\n    },\n    {\n      \"parameters\": {\n        \"authentication\": \"oAuth2\",\n        \"resource\": \"file\",\n        \"operation\": \"edit\",\n        \"owner\": {\n          \"__rl\": true,\n          \"value\": \"=sanjay-e2m\",\n          \"mode\": \"name\"\n        },\n        \"repository\": {\n          \"__rl\": true,\n          \"value\": \"=My_n8n_workflows\",\n          \"mode\": \"name\"\n        },\n        \"filePath\": \"={{ $json.file_name }}\",\n        \"fileContent\": \"={{ JSON.stringify($json.workflow, null, 2) }}\",\n        \"commitMessage\": \"=File Modify at {{ new Date().toISOString() }}\"\n      },\n      \"type\": \"n8n-nodes-base.github\",\n      \"typeVersion\": 1.1,\n      \"position\": [\n        -1088,\n        96\n      ],\n      \"id\": \"89737b96-3624-4d02-a060-86b9d2064c4b\",\n      \"name\": \"Edit a file\",\n      \"webhookId\": \"56f4f5a5-f1d0-4291-a875-f204f4e136cd\",\n      \"credentials\": {\n        \"githubOAuth2Api\": {\n          \"id\": \"RthMjnVOfbjSI5JX\",\n          \"name\": \"GitHub account\"\n        }\n      }\n    },\n    {\n      \"parameters\": {\n        \"operation\": \"get\",\n        \"workflowId\": {\n          \"__rl\": true,\n          \"value\": \"={{ $json.n8n_id }}\",\n          \"mode\": \"id\"\n        },\n        \"requestOptions\": {}\n      },\n      \"type\": \"n8n-nodes-base.n8n\",\n      \"typeVersion\": 1,\n      \"position\": [\n        -2880,\n        80\n      ],\n      \"id\": \"aeaa56e1-7375-4ca1-8310-d7777e3bf85f\",\n      \"name\": \"Get a workflow\",\n      \"credentials\": {\n        \"n8nApi\": {\n          \"id\": \"4ArsrzR1bCtX5IDv\",\n          \"name\": \"n8n account\"\n        }\n      }\n    },\n    {\n      \"parameters\": {\n        \"authentication\": \"oAuth2\",\n        \"resource\": \"file\",\n        \"owner\": {\n          \"__rl\": true,\n          \"value\": \"=sanjay-e2m\",\n          \"mode\": \"name\"\n        },\n        \"repository\": {\n          \"__rl\": true,\n          \"value\": \"=My_n8n_workflows\",\n          \"mode\": \"name\"\n        },\n        \"filePath\": \"={{ $json.file_set }}\",\n        \"fileContent\": \"File Created for my content\",\n        \"commitMessage\": \"= File Created at {{ new Date().toISOString() }}\"\n      },\n      \"type\": \"n8n-nodes-base.github\",\n      \"typeVersion\": 1.1,\n      \"position\": [\n        -1520,\n        96\n      ],\n      \"id\": \"ad9a8e84-f1d4-4f9c-aa00-8fe0e3bfff11\",\n      \"name\": \"Create a file\",\n      \"webhookId\": \"edcd093f-7e2e-45ed-9855-29d49a9147cb\",\n      \"credentials\": {\n        \"githubOAuth2Api\": {\n          \"id\": \"RthMjnVOfbjSI5JX\",\n          \"name\": \"GitHub account\"\n        }\n      }\n    },\n    {\n      \"parameters\": {\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"6be8c184-8fb7-47a9-ad42-d0dc3db1eea4\",\n              \"name\": \"name\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.name }}\"\n            },\n            {\n              \"id\": \"n8n-id\",\n              \"name\": \"n8n_id\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.id }}\"\n            },\n            {\n              \"id\": \"n8n-updated\",\n              \"name\": \"n8n_updated\",\n              \"type\": \"string\",\n              \"value\": \"={{ $json.updatedAt }}\"\n            }\n          ]\n        },\n        \"options\": {}\n      },\n      \"id\": \"b392b433-c248-40cd-884d-e03151fb2322\",\n      \"name\": \"Prepare n8n workflow data\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        -3088,\n        80\n      ],\n      \"typeVersion\": 3.3\n    },\n    {\n      \"parameters\": {\n        \"filters\": {},\n        \"requestOptions\": {}\n      },\n      \"id\": \"4da840e7-5f2b-450d-a962-707a09961110\",\n      \"name\": \"n8n - get all workflows\",\n      \"type\": \"n8n-nodes-base.n8n\",\n      \"position\": [\n        -3312,\n        80\n      ],\n      \"typeVersion\": 1,\n      \"credentials\": {\n        \"n8nApi\": {\n          \"id\": \"4ArsrzR1bCtX5IDv\",\n          \"name\": \"n8n account\"\n        }\n      }\n    },\n    {\n      \"parameters\": {\n        \"values\": {\n          \"string\": [\n            {\n              \"name\": \"repo.owner\",\n              \"value\": \"sanjay-e2m\"\n            },\n            {\n              \"name\": \"repo.name\",\n              \"value\": \"My_n8n_workflows\"\n            },\n            {\n              \"name\": \"repo.path\",\n              \"value\": \"workflows/\"\n            }\n          ]\n        },\n        \"options\": {}\n      },\n      \"id\": \"a035c9d6-8447-41b2-9402-adfddc6f432e\",\n      \"name\": \"Globals\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"position\": [\n        -3536,\n        80\n      ],\n      \"typeVersion\": 1\n    },\n    {\n      \"parameters\": {},\n      \"id\": \"9d59f214-5918-4727-8890-e7ce7cc4b561\",\n      \"name\": \"On clicking 'execute'\",\n      \"type\": \"n8n-nodes-base.manualTrigger\",\n      \"position\": [\n        -3792,\n        80\n      ],\n      \"typeVersion\": 1\n    },\n    {\n      \"parameters\": {\n        \"content\": \"## N8N → GitHub Workflow Export\\n\\n\\n## Purpose\\n============================================================================================\\n- Automatically export **n8n workflows** to a GitHub repository while ensuring all sensitive authentication details are removed.\\n\\n## 1. HOW IT WORKS\\n============================================================================================\\n- ### Trigger\\n    - **Type**: Manual execution  \\n    - **Action**: Starts the export workflow  \\n\\n- ### Data Collection\\n    - Retrieves all workflows from the n8n instance  \\n\\n- ### Security Cleaning\\n    **Removes sensitive data including**\\n    - Credentials  \\n    - Tokens  \\n    - API Keys  \\n    - Secrets  \\n    - Auth Data  \\n    - Passwords  \\n    - Headers  \\n\\n- ### Features\\n    - Recursive cleaning of nested objects  \\n    - Keyword-based sensitive field detection  \\n\\n- ### Existence Check\\n    - Verifies if workflow file already exists in GitHub repo  \\n\\n- ### GitHub Sync\\n    - **If exists** → Updates the file with the cleaned workflow  \\n    - **If not exists** → Creates a new file in the repository \\n\\n## 2. FILE FORMAT \\n============================================================================================\\n- **Naming Convention**: [workflow_id]_[workflow_name].json\\n\\n - **Content**: Clean, well-formatted JSON \\n\\n## 3. OUTPUT\\n============================================================================================\\n - Safe JSON workflow files  \\n - Descriptive commit messages with timestamps  \\n\",\n        \"height\": 1232,\n        \"width\": 3952,\n        \"color\": 3\n      },\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        -4400,\n        -480\n      ],\n      \"typeVersion\": 1,\n      \"id\": \"86484e7e-389f-4d12-b0a8-1047536d3da9\",\n      \"name\": \"Sticky Note\"\n    }\n  ],\n  \"connections\": {\n    \"Code3\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Edit a file\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Switch\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Code3\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Create a file\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Code2\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Switch\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get a file\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Code2\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Code1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get a file\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Replace Me\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Loop Over Items\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Loop Over Items\": {\n      \"main\": [\n        [],\n        [\n          {\n            \"node\": \"Code1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Code\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Edit a file\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Edit a file\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Replace Me\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get a workflow\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Loop Over Items\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Create a file\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Code\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Prepare n8n workflow data\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get a workflow\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"n8n - get all workflows\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Prepare n8n workflow data\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Globals\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"n8n - get all workflows\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"On clicking 'execute'\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Globals\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  },\n  \"pinData\": {},\n  \"meta\": {\n    \"templateCredsSetupCompleted\": true,\n    \"instanceId\": \"d3a93d96b87c932ca5bb5705abcde014d342090fde7086055f4df32bb7192bd5\"\n  }\n}\n\n\n1. Return ONLY valid, parseable JSON - no markdown, no explanations\n2. Use this EXACT structure:\n{\n  \"modified_workflow\": {\n    \"name\": \"Workflow Name\",\n    \"nodes\": [...],\n    \"connections\": {...},\n    \"pinData\": {},\n    \"settings\": {...},\n    \"staticData\": null,\n    \"tags\": [],\n    \"triggerCount\": 0,\n    \"updatedAt\": \"2025-10-06T14:30:00.000Z\",\n    \"versionId\": \"...\"\n  },\n  \"added_webhook_path\": \"/webhook-trigger-replacement-YYYY-MM-DD-HHmmss\",\n  \"n8n_workflow_name\": \"Descriptive Workflow Name\",\n  \"changes_made\": {\n    \"updated_references\": [\n      {\"node\": \"WorkflowName\"}\n    ]\n  }\n}\n\n3. JSON RULES:\n   - All strings must use double quotes\n   - No trailing commas\n   - All brackets must match\n   - Escape special characters\n   - Numbers without quotes\n\n4. Each node MUST have: id, name, type, position [x,y], typeVersion, parameters\n5. Validate all connections reference existing node names\n6. Test your JSON before responding\nGenerate updated n8n workflow from the provided Input JSON.",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "# 📌 System Overview\nThis AI automation system analyzes n8n workflow JSON files and automatically replaces ALL trigger nodes (of any type) with a standardized Webhook POST trigger and Set node combination, while maintaining complete workflow functionality and data flow integrity.\n\n# 🎯 Core Objective\nTransform any n8n workflow to be externally triggerable via HTTP POST webhook by:\n\n- Removing the original trigger node (regardless of type)\n- Adding a Webhook node (POST method)\n- Adding a Set node with context-aware test data\n- Updating ONLY relevant downstream node references\n- Preserving all workflow logic, connections, and configurations\n- **SMART CONNECTION HANDLING**: Only modify connections that are exclusively dependent on the removed trigger. Preserve loop branches, shared node connections, and any connections that serve other workflow purposes.\n\n# ⚙️ Transformation Process\n\n## Step 1: Trigger Node Analysis\n\n- Identify the trigger node in the workflow JSON\n- Extract trigger node details:\n    - Node name (e.g., \"When chat message received\", \"Form Trigger\")\n    - Node type (e.g., \"n8n-nodes-base.chatTrigger\")\n    - Output data structure (fields passed to next nodes)\n    - Position coordinates\n    - Connected downstream nodes\n\n- **CRITICAL: Analyze Connection Dependencies**:\n    - Identify ALL nodes directly connected to the trigger\n    - For EACH connected node, check if it has OTHER incoming connections:\n        - Loop \"done\" branches (type: \"main\", coming from loop nodes)\n        - Merge node inputs (nodes receiving data from multiple sources)\n        - Split/branch reunion points\n        - Any node with multiple entries in connections[nodeName].main array\n    - **RULE**: If a node has MULTIPLE incoming connections (not just from trigger):\n        - Mark it as \"SHARED TARGET - DO NOT REWIRE\"\n        - These nodes will keep their existing connections\n        - Only update expressions if absolutely necessary\n    - **RULE**: Only modify connections for nodes that are EXCLUSIVELY connected to the trigger\n\n## Step 2: Webhook Node Creation\n\n- **Check for Existing Respond to Webhook Node FIRST**:\n    - Search the entire workflow for any node with type: \"n8n-nodes-base.respondToWebhook\"\n    - If found, check if it's in the main execution path (not in error/alternative branches)\n    - Determine the appropriate responseMode based on this analysis\n\n- Create a new Webhook node with these specifications:\n    ```json\n    {\n        \"parameters\": {\n            \"httpMethod\": \"POST\",\n            \"path\": \"/webhook-trigger-replacement-YYYY-MM-DD-HHmmss\",\n            \"responseMode\": \"[DYNAMIC - see rules below]\",\n            \"options\": {}\n        },\n        \"id\": \"[generate-new-uuid]\",\n        \"name\": \"Webhook Trigger\",\n        \"type\": \"n8n-nodes-base.webhook\",\n        \"typeVersion\": 2,\n        \"position\": [x, y],\n        \"webhookId\": \"[generate-new-uuid]\"\n    }\n    ```\n\n- **Response Mode Selection Rules**:\n    \n    **IF** workflow contains \"n8n-nodes-base.respondToWebhook\" node:\n    - Set `\"responseMode\": \"responseNode\"`\n    - This allows the existing Respond to Webhook node to handle the response\n    - Prevents \"Unused Respond to Webhook node found in the workflow\" error\n    \n    **ELSE** (no Respond to Webhook node exists):\n    - Set `\"responseMode\": \"lastNode\"`\n    - Webhook will automatically return the last node's output\n\n- **IMPORTANT**: Remove the `webhookId` property from the Webhook node parameters to avoid the n8n API error:\n    ```\n    \"request/body/nodes/X must NOT have additional properties\"\n    ```\n    The `webhookId` should ONLY be at the root level of the node object, NOT inside parameters.\n\n- Path Generation Rules:\n    - Format: `/webhook-trigger-replacement-[YYYY-MM-DD-HHmmss]`\n    - Use current date and time for uniqueness\n    - Example: `/webhook-trigger-replacement-2025-10-06-143022`\n    - Keep path production-ready (lowercase, hyphens, no spaces)\n\n## Step 3: Set Node Creation\n\n- Create a Set node containing context-aware test data:\n    ```json\n    {\n        \"parameters\": {\n            \"mode\": \"manual\",\n            \"assignments\": {\n                \"assignments\": [\n                    {\n                        \"id\": \"[generate-uuid]\",\n                        \"name\": \"fieldName\",\n                        \"value\": \"contextual test value\",\n                        \"type\": \"string\"\n                    }\n                ]\n            },\n            \"options\": {}\n        },\n        \"id\": \"[generate-new-uuid]\",\n        \"name\": \"Set Test Data\",\n        \"type\": \"n8n-nodes-base.set\",\n        \"typeVersion\": 3.4,\n        \"position\": [x+200, y]\n    }\n    ```\n\n- Test Data Generation Rules:\n    - Analyze workflow purpose from node names, types, and connections\n    - Include ALL fields that downstream nodes reference from the original trigger\n    - Use realistic, contextual values based on workflow type:\n    \n    | Workflow Type | Test Data Fields | Example Values |\n    |---------------|------------------|----------------|\n    | Form Processing | Form field names (firstName, lastName, email, etc.) | \"John\", \"Doe\", \"john.doe@example.com\" |\n    | Chat/AI Workflows | chatInput, userId, sessionId | \"Generate a beautiful sunset image\", \"test-user-001\", \"session-001\" |\n    | Email Workflows | emailSubject, emailBody, emailFrom, emailTo | \"Test Subject\", \"Email content\", \"sender@test.com\" |\n    | Data Processing | inputData, recordId, timestamp | \"Sample data\", \"rec-001\", \"2025-10-06T14:30:00Z\" |\n    | E-commerce | orderId, customerId, items, total | \"ORD-001\", \"CUST-001\", [{...}], 99.99 |\n    | Notification | message, recipient, priority | \"Test notification\", \"user@example.com\", \"high\" |\n\n    - Match field names exactly as they appear in downstream node references\n    - Use appropriate data types (string, number, boolean, object, array)\n\n## Step 4: Smart Connection Updates\n\n**CRITICAL LOGIC - Read Carefully**:\n\n1. **Identify Exclusive Trigger Connections**:\n   - Find all nodes directly connected FROM the trigger\n   - For each node, count its total incoming connections\n   - If a node has ONLY the trigger as input → \"EXCLUSIVE\"\n   - If a node has OTHER inputs (loops, merges, etc.) → \"SHARED\"\n\n2. **Connection Modification Rules**:\n   \n   **For EXCLUSIVE nodes** (only connected to trigger):\n   - ✅ Update connection: Webhook → Set → Exclusive Node\n   - ✅ Update all expression references in these nodes\n   - ✅ Full transformation applies\n   \n   **For SHARED nodes** (multiple incoming connections):\n   - ❌ DO NOT change their connections\n   - ❌ DO NOT add Set → Shared Node connection\n   - ❌ DO NOT remove their existing loop/merge connections\n   - ⚠️ Only update expressions IF the node actually processes trigger data\n   - 📝 Log a warning: \"Node [name] has multiple inputs, preserving existing connections\"\n\n3. **Specific Scenarios to Handle**:\n   \n   **Loop \"done\" branches**:\n   - If trigger connects to a node that ALSO receives loop done branch\n   - Keep the loop done connection intact\n   - Do NOT add Set node connection to this node\n   - Only update if the node is the first in workflow (before loop starts)\n   \n   **Merge/Join nodes**:\n   - If node receives data from multiple branches\n   - Preserve all existing incoming connections\n   - Only update trigger reference if it's critical to node function\n   \n   **Split reunions**:\n   - If workflow splits and rejoins at a node\n   - Keep all reunion connections unchanged\n\n4. **Update connections object**:\n   - Remove original trigger from connections\n   - Add Webhook connections:\n     ```json\n     \"Webhook Trigger\": {\n         \"main\": [[{ \"node\": \"Set Test Data\", \"type\": \"main\", \"index\": 0 }]]\n     }\n     ```\n   - Add Set node connections ONLY to EXCLUSIVE nodes:\n     ```json\n     \"Set Test Data\": {\n         \"main\": [[\n             { \"node\": \"Exclusive Node 1\", \"type\": \"main\", \"index\": 0 },\n             { \"node\": \"Exclusive Node 2\", \"type\": \"main\", \"index\": 0 }\n         ]]\n     }\n     ```\n   - **DO NOT add connections to SHARED nodes**\n\n## Step 5: Variable Reference Updates\n\n**SMART UPDATE STRATEGY**:\n\n1. **Scan for Trigger References**:\n   - Search patterns:\n     ```javascript\n     {{ $('Original Trigger Name').item.json.fieldName }}\n     {{ $('Original Trigger Name').item.json['fieldName'] }}\n     {{ $node['Original Trigger Name'].json.fieldName }}\n     ```\n\n2. **Update ONLY in Relevant Nodes**:\n   - ✅ Update in EXCLUSIVE nodes (directly connected to trigger only)\n   - ✅ Update in nodes that will now receive Set data\n   - ❌ DO NOT update in SHARED nodes unless they're actually broken\n   - ❌ DO NOT update in loop bodies that don't use trigger data\n   \n3. **Replacement Pattern**:\n   ```javascript\n   {{ $('Set Test Data').item.json.fieldName }}\n   ```\n\n4. **Areas to Check**:\n   - Node parameters (all string fields)\n   - Code nodes (JavaScript/Python expressions)\n   - IF nodes (conditional expressions)\n   - Set nodes (value mappings)\n   - HTTP Request nodes (body, headers, query parameters)\n   - Function nodes\n   - Any node with expression syntax `={{ ... }}`\n\n5. **Warning System**:\n   - If SHARED nodes contain trigger references that weren't updated\n   - Log warning: \"Node [name] may still reference old trigger, but preserved due to multiple inputs\"\n   - Include this in transformation notes\n\n## Step 6: Workflow Metadata Updates\n\n- Remove trigger node from nodes array\n- Add Webhook and Set nodes to nodes array\n- Update pinData if it referenced the trigger (remove old references)\n- Preserve all other metadata (instanceId, templateCredsSetupCompleted, etc.)\n- **NEVER add webhookId to node parameters** - only at root node level\n\n# 📤 Output Format\n\n**Success Response (ALWAYS USE THIS EXACT STRUCTURE)**:\n```json\n{\n    \"modified_workflow\": {\n        \"name\": \"Workflow Name\",\n        \"nodes\": [...],\n        \"connections\": {...},\n        \"pinData\": {},\n        \"settings\": {...},\n        \"staticData\": null,\n        \"tags\": [],\n        \"triggerCount\": 0,\n        \"updatedAt\": \"2025-10-06T14:30:00.000Z\",\n        \"versionId\": \"...\"\n    },\n    \"added_webhook_path\": \"/webhook-trigger-replacement-2025-10-06-143022\",\n    \"n8n_workflow_name\": \"Customer Order Processing System\",\n}\n```\n\n**Field Specifications**:\n- `modified_workflow`: Complete, functional n8n workflow JSON (ready to import)\n- `added_webhook_path`: The exact webhook path to trigger this workflow\n- `n8n_workflow_name`: Descriptive workflow name based on workflow purpose\n\n**Workflow Naming Rules**:\n- Analyze node names, types, and flow to understand purpose\n- Use clear, descriptive names (e.g., \"AI Image Generation Pipeline\")\n- Capitalize properly (Title Case)\n- Keep under 60 characters\n- Be specific (avoid generic names)\n\n**Error Response (ONLY IF TRANSFORMATION FAILS)**:\n```json\n{\n    \"error_message\": \"Clear description of what went wrong\",\n    \"suggestion\": \"Specific steps to fix the issue\"\n}\n```\n\n# ✅ Validation Checklist\n\nBefore returning the response, verify:\n\n- [ ] Original trigger node completely removed from nodes array\n- [ ] Webhook node added with correct responseMode (responseNode if Respond to Webhook exists)\n- [ ] **NO webhookId in Webhook node parameters** (only at root level)\n- [ ] Set node added with ALL required test data fields\n- [ ] Variable references updated ONLY in nodes that will receive Set data\n- [ ] Connections updated ONLY for EXCLUSIVE nodes\n- [ ] SHARED node connections preserved (loops, merges, splits)\n- [ ] No broken references or undefined variables\n- [ ] Workflow name is descriptive and context-specific\n- [ ] Webhook path follows format: /webhook-trigger-replacement-YYYY-MM-DD-HHmmss\n- [ ] Response includes transformation_notes with clear explanations\n- [ ] All warnings logged for preserved shared nodes\n\n# 🔒 Preservation Rules\n\n**MUST PRESERVE (Never Modify)**:\n- All downstream node configurations\n- All credentials and authentication settings\n- All node positions (except removed trigger)\n- All workflow settings and staticData\n- All tags and version information\n- All pinData (except trigger references)\n- Node IDs for all non-trigger nodes\n- **Loop \"done\" branch connections**\n- **Merge node incoming connections**\n- **Any connection serving workflow logic beyond trigger replacement**\n\n**MUST MODIFY**:\n- Trigger node (remove completely)\n- Add Webhook and Set nodes with new IDs\n- Update connections for EXCLUSIVE trigger-dependent nodes only\n- Update variable references in nodes that will receive Set data\n- Generate new webhook path with timestamp\n- Set correct responseMode based on Respond to Webhook node presence\n\n# 🚨 Critical Rules\n\n1. **NEVER add webhookId to node parameters** - This causes n8n API errors\n2. **ALWAYS check for Respond to Webhook nodes** before setting responseMode\n3. **ALWAYS preserve loop done branches** - Do not rewire loop completion paths\n4. **ALWAYS check if nodes have multiple inputs** before modifying connections\n5. **NEVER blindly update all connections** - Use smart detection logic\n6. **ALWAYS include transformation_notes** in response with clear explanations\n7. **ALWAYS log warnings** for shared nodes that might need manual review\n8. **NEVER use generic test data** without understanding workflow context\n9. **NEVER return incomplete workflows** or partial transformations\n10. **ALWAYS validate the final JSON** can be imported to n8n without errors\n\n# 🎯 Success Criteria\n\nA successful transformation means:\n\n- ✅ Workflow can be imported directly into n8n without errors\n- ✅ No \"must NOT have additional properties\" errors (webhookId handled correctly)\n- ✅ No \"Unused Respond to Webhook node\" errors (responseMode set correctly)\n- ✅ Webhook POST to the provided path triggers the workflow\n- ✅ Set node provides all data needed by downstream nodes\n- ✅ Loop connections remain functional and intact\n- ✅ Shared node connections preserved correctly\n- ✅ No runtime errors or undefined variable exceptions\n- ✅ Workflow executes exactly as it did with original trigger\n- ✅ All logic, branching, and error handling preserved\n- ✅ Response format includes helpful transformation notes\n\n# 📋 Response Protocol\n\nWhen a user provides an n8n workflow JSON:\n\n1. Immediately analyze the workflow structure\n2. Identify trigger node and ALL its connections\n3. Classify each connected node as EXCLUSIVE or SHARED\n4. Check for existing Respond to Webhook nodes\n5. Perform the transformation following ALL steps above\n6. Validate against the checklist\n7. Return ONLY the standardized JSON response with transformation_notes\n\n**No additional explanations, comments, or text outside the JSON structure.**"
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        1568,
        9088
      ],
      "id": "bdc7c6e5-de78-45e7-a048-136be73dcc59",
      "name": "Basic LLM Chain2",
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "console.log('=== Parse & Validate Response START ===');\nconst input = $input.first().json;\nlet raw = null;\n\nif (Array.isArray(input) && input[0]?.text) {\n    raw = input[0].text;\n} else if (input?.text) {\n    raw = input.text;\n} else if (input?.output) {\n    raw = input.output;\n} else if (typeof input === 'string') {\n    raw = input;\n} else {\n    try {\n        raw = JSON.stringify(input);\n    } catch(e) {\n        throw new Error(\"❌ Cannot extract response\");\n    }\n}\n\nif (!raw) throw new Error(\"❌ Empty response\");\n\nraw = raw\n  .replace(/```json\\s*/gi, '')\n  .replace(/```\\s*/g, '')\n  .replace(/^[^{]*/, '')\n  .replace(/[^}]*$/, '')\n  .trim();\n\nconst jsonStart = raw.indexOf('{');\nconst jsonEnd = raw.lastIndexOf('}');\nif (jsonStart === -1 || jsonEnd === -1) throw new Error(\"❌ No JSON object found\");\nraw = raw.substring(jsonStart, jsonEnd + 1);\n\nfunction repairJSON(str) {\n  let repaired = str;\n  repaired = repaired.replace(/,\\s*([\\]}])/g, '$1');\n  repaired = repaired.replace(/\\}\\s*\\{/g, '},{');\n  repaired = repaired.replace(/\\]\\s*\\[/g, '],[');\n  repaired = repaired.replace(/\"([^\"]*?)\"([^,:{}\\[\\]]*?)\"([^\"]*?)\"/g, (m,p1,p2,p3) => p2 && !p2.match(/^\\s*[,:\\]}]\\s*$/) ? `\"${p1}${p2.replace(/\"/g,'\\\\\"')}${p3}\"` : m);\n  repaired = repaired.replace(/[\\x00-\\x1F\\x7F]/g,'');\n  repaired = repaired.replace(/([{,]\\s*)([a-zA-Z_][a-zA-Z0-9_]*)\\s*:/g,'$1\"$2\":');\n  repaired = repaired.replace(/([\\[{,])\\s+/g,'$1');\n  repaired = repaired.replace(/\\s+([\\]}])/g,'$1');\n  return repaired;\n}\n\nlet parsed = null;\nlet parseAttempts = [\n  () => JSON.parse(raw),\n  () => JSON.parse(repairJSON(raw)),\n  () => {\n    const workflowMatch = raw.match(/\"modified_workflow\"\\s*:\\s*\\{[\\s\\S]*?\\}\\s*,\\s*\"added_webhook_path\"\\s*:\\s*\".*?\"\\s*,\\s*\"n8n_workflow_name\"\\s*:\\s*\".*?\"/i);\n    if (workflowMatch) return JSON.parse(repairJSON('{' + workflowMatch[0] + '}'));\n    throw new Error(\"Cannot extract main workflow fields\");\n  }\n];\n\nlet lastError = null;\nfor (let i = 0; i < parseAttempts.length; i++) {\n  try {\n    parsed = parseAttempts[i]();\n    break;\n  } catch(e) {\n    lastError = e;\n  }\n}\n\nif (!parsed) throw new Error(`❌ All parse attempts failed. Last error: ${lastError.message}`);\n\nconst requiredFields = [\"modified_workflow\",\"added_webhook_path\",\"n8n_workflow_name\"];\nfor (const f of requiredFields) {\n  if (!(f in parsed)) throw new Error(`❌ Missing field: ${f}`);\n}\n\nconsole.log('✅ Successfully parsed response');\nconsole.log('=== Parse & Validate Response END ===');\n\nreturn [{\n  json: {\n    modified_workflow: parsed.modified_workflow,\n    added_webhook_path: parsed.added_webhook_path,\n    n8n_workflow_name: parsed.n8n_workflow_name\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1920,
        9088
      ],
      "id": "8c41d1dd-36e0-4360-9711-906130799d5a",
      "name": "Parse & Validate Response4",
      "disabled": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "console.log('=== Validate & Clean Workflow START ===');\nconst nodes = $input.first().json.modified_workflow.nodes;\nconst connections = $input.first().json.modified_workflow.connections;\nconst webhook_path = $input.first().json.added_webhook_path;\n\nconsole.log(`🔍 Validating ${nodes.length} nodes...`);\n\nconst validatedNodes = [];\nconst nodeIds = new Set();\nconst nodeNames = new Set();\nlet fixedCount = 0;\n\nfor (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    let fixed = false;\n    \n    if (!node.id) {\n        node.id = `node-${Date.now()}-${i}-${Math.random().toString(36).substr(2, 9)}`;\n        fixed = true;\n    }\n    \n    if (!node.name) {\n        node.name = `Node_${i + 1}_${node.type?.split('.').pop() || 'Unknown'}`;\n        fixed = true;\n    }\n    \n    if (nodeNames.has(node.name)) {\n        node.name = `${node.name}_${Date.now()}_${i}`;\n        fixed = true;\n    }\n    \n    if (!node.type) {\n        console.log(`❌ Node ${node.name} has no type - skipping`);\n        continue;\n    }\n    \n    if (!node.position || !Array.isArray(node.position) || node.position.length !== 2) {\n        node.position = [i * 240, 1824];\n        fixed = true;\n    }\n    \n    if (typeof node.position[0] !== 'number' || typeof node.position[1] !== 'number') {\n        node.position = [i * 240, 1824];\n        fixed = true;\n    }\n    \n    if (!node.typeVersion) {\n        node.typeVersion = 1;\n        fixed = true;\n    }\n    \n    if (!node.parameters) {\n        node.parameters = {};\n        fixed = true;\n    }\n    \n    if (fixed) {\n        fixedCount++;\n        console.log(`🔧 Fixed node: ${node.name}`);\n    }\n    \n    nodeIds.add(node.id);\n    nodeNames.add(node.name);\n    validatedNodes.push(node);\n}\n\nconsole.log(`✅ Validated ${validatedNodes.length} nodes (${fixedCount} fixed)`);\n\nif (validatedNodes.length === 0) {\n    throw new Error(\"❌ No valid nodes after validation\");\n}\n\nconst cleanedConnections = {};\nlet removedConnections = 0;\nlet fixedConnections = 0;\n\nfor (const [sourceNodeName, connectionTypes] of Object.entries(connections)) {\n    const sourceNode = validatedNodes.find(n => n.name === sourceNodeName);\n    \n    if (!sourceNode) {\n        console.log(`⚠️ Removing connections from non-existent source: ${sourceNodeName}`);\n        removedConnections++;\n        continue;\n    }\n    \n    cleanedConnections[sourceNodeName] = {};\n    \n    for (const [connType, connArray] of Object.entries(connectionTypes)) {\n        if (!Array.isArray(connArray)) {\n            console.log(`⚠️ Invalid connection type format for ${sourceNodeName}.${connType}`);\n            continue;\n        }\n        \n        cleanedConnections[sourceNodeName][connType] = [];\n        \n        for (const connGroup of connArray) {\n            if (!Array.isArray(connGroup)) {\n                console.log(`⚠️ Invalid connection group in ${sourceNodeName}`);\n                continue;\n            }\n            \n            const validConnections = [];\n            \n            for (const conn of connGroup) {\n                if (!conn || typeof conn !== 'object') {\n                    removedConnections++;\n                    continue;\n                }\n                \n                if (!conn.node) {\n                    console.log(`⚠️ Connection missing target node name`);\n                    removedConnections++;\n                    continue;\n                }\n                \n                if (conn.type === undefined) {\n                    conn.type = 'main';\n                    fixedConnections++;\n                }\n                \n                if (conn.index === undefined) {\n                    conn.index = 0;\n                    fixedConnections++;\n                }\n                \n                const targetNode = validatedNodes.find(n => n.name === conn.node);\n                if (!targetNode) {\n                    console.log(`⚠️ Removing connection to non-existent target: ${conn.node}`);\n                    removedConnections++;\n                    continue;\n                }\n                \n                validConnections.push(conn);\n            }\n            \n            if (validConnections.length > 0) {\n                cleanedConnections[sourceNodeName][connType].push(validConnections);\n            }\n        }\n        \n        if (cleanedConnections[sourceNodeName][connType].length === 0) {\n            delete cleanedConnections[sourceNodeName][connType];\n        }\n    }\n    \n    if (Object.keys(cleanedConnections[sourceNodeName]).length === 0) {\n        delete cleanedConnections[sourceNodeName];\n    }\n}\n\nconsole.log(`🔗 Connections: ${removedConnections} removed, ${fixedConnections} fixed`);\n\nconst connectedNodeNames = new Set();\nfor (const [source, types] of Object.entries(cleanedConnections)) {\n    connectedNodeNames.add(source);\n    for (const connArray of Object.values(types)) {\n        for (const group of connArray) {\n            for (const conn of group) {\n                connectedNodeNames.add(conn.node);\n            }\n        }\n    }\n}\n\nconst orphanedNodes = validatedNodes.filter(node => \n    !connectedNodeNames.has(node.name) && \n    !node.type.toLowerCase().includes('trigger') &&\n    !node.type.toLowerCase().includes('webhook')\n);\n\nif (orphanedNodes.length > 0) {\n    console.log(`⚠️ Found ${orphanedNodes.length} orphaned nodes: ${orphanedNodes.map(n => n.name).join(', ')}`);\n}\n\nconst webhookNodes = validatedNodes.filter(n => \n    n.type === 'n8n-nodes-base.webhook' ||\n    n.type.toLowerCase().includes('webhook')\n);\n\nfor (const webhook of webhookNodes) {\n    if (!webhook.parameters?.path) {\n        console.log(`⚠️ Webhook ${webhook.name} missing path, adding default`);\n        if (!webhook.parameters) webhook.parameters = {};\n        webhook.parameters.path = `/webhook-${Date.now()}`;\n    }\n}\n\nconst hasTrigger = validatedNodes.some(n => \n    n.type.toLowerCase().includes('trigger') ||\n    n.type.toLowerCase().includes('webhook')\n);\n\nif (!hasTrigger) {\n    console.log(\"⚠️ WARNING: Workflow has no trigger node!\");\n}\n\nconst validationReport = {\n    total_nodes: validatedNodes.length,\n    nodes_fixed: fixedCount,\n    connections_removed: removedConnections,\n    connections_fixed: fixedConnections,\n    orphaned_nodes: orphanedNodes.map(n => n.name),\n    webhook_nodes: webhookNodes.map(n => ({ name: n.name, path: n.parameters?.path })),\n    has_trigger: hasTrigger,\n    validation_passed: validatedNodes.length > 0 && hasTrigger\n};\n\nconsole.log(\"📊 Validation Report:\", JSON.stringify(validationReport, null, 2));\nconsole.log('=== Validate & Clean Workflow END ===');\n\nreturn [{ \n    json: { \n        modify_nodes: validatedNodes,\n        modify_connections: cleanedConnections,\n        webhook_path: webhook_path,\n        n8n_workflow_name: $input.first().json.n8n_workflow_name || '',\n        validation_report: validationReport\n    } \n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2240,
        9072
      ],
      "id": "9a2f9bf2-9d77-4add-8a87-12874ac4bffe",
      "name": "Validate & Clean Workflow3",
      "disabled": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "workflow-payload",
              "name": "workflowPayload",
              "value": "={{ \n  JSON.stringify({\n\"name\": ($json.n8n_workflow_name ? $json.n8n_workflow_name + \"-\" + Date.now() : \"AI_Generated_\" + Date.now()),\n    \"nodes\": $json.modify_nodes,\n    \"connections\": $json.modify_connections,\n    \"settings\": {\n      \"saveExecutionProgress\": true,\n      \"saveManualExecutions\": true,\n      \"saveDataErrorExecution\": \"all\",\n      \"saveDataSuccessExecution\": \"all\",\n      \"executionTimeout\": 3600,\n      \"timezone\": \"America/New_York\",\n      \"executionOrder\": \"v1\"\n    },\n    \"staticData\": {}\n  })\n}}",
              "type": "string"
            },
            {
              "id": "validation-report",
              "name": "validation_report",
              "value": "={{ $json.validation_report }}",
              "type": "object"
            },
            {
              "id": "5a2df228-6121-4033-b2e4-d9936b0bb9f6",
              "name": "n8n_webhook_path",
              "value": "={{ $json.webhook_path }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2528,
        9056
      ],
      "id": "74354c18-1281-43c6-a1af-932e34113d13",
      "name": "Prepare Workflow Payload3",
      "disabled": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:5678/api/v1/workflows",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.workflowPayload }}",
        "options": {
          "redirect": {
            "redirect": {}
          },
          "timeout": 30000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3120,
        9024
      ],
      "id": "ebcd063c-52d2-4f5d-8008-33c18b73454e",
      "name": "Create Workflow3",
      "disabled": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "console.log('=== Verify Creation START ===');\nconst response = $input.first().json;\n\nif (!response.id) {\n    throw new Error(\"❌ Workflow creation failed - no ID returned\");\n}\n\nconsole.log(`✅ Workflow created:`);\nconsole.log(`   ID: ${response.id}`);\nconsole.log(`   Name: ${response.name || 'N/A'}`);\nconsole.log(`   Nodes: ${response.nodes?.length || 0}`);\nconsole.log('=== Verify Creation END ===');\n\nreturn [{ \n    json: { \n        id: response.id,\n        name: response.name || 'Unnamed',\n        active: response.active || false,\n        nodes: response.nodes || [],\n        created: true\n    } \n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3424,
        9008
      ],
      "id": "b5435fa6-f4bc-4886-9598-152afbe3e9c0",
      "name": "Verify Creation3",
      "disabled": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=http://localhost:5678/api/v1/workflows/{{ $json.id }}/activate",
        "options": {
          "timeout": 15000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3728,
        8992
      ],
      "id": "963294cb-0bc5-42d3-964a-bbe489c51b1e",
      "name": "Activate Workflow3",
      "disabled": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "has-nodes",
              "leftValue": "={{ $json.nodes?.length > 0 }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        4032,
        8976
      ],
      "id": "4f66648e-67e0-4642-9ea6-2cb8ec12aafb",
      "name": "Has Nodes?3",
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "console.log('=== Extract Webhook Path START ===');\nconst webhookPath = $('Validate & Clean Workflow3').first().json.webhook_path;\n\nif (!webhookPath) {\n    console.log(\"⚠️ Webhook has no path\");\n    return [{ json: { has_webhook: false, skip_test: true, message: \"Webhook missing path\" } }];\n}\n\nconsole.log(`✅ Webhook found: ${webhookPath}`);\nconsole.log('=== Extract Webhook Path END ===');\n\nreturn [{ \n    json: {\n        webhook_path: webhookPath\n    } \n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4352,
        8960
      ],
      "id": "eb85c94a-4339-4457-8657-07f9d1b86cd5",
      "name": "Extract Webhook Path3",
      "disabled": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=http://localhost:5678/webhook{{ $json.webhook_path }}",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "input",
              "value": "Test from automation"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4656,
        8944
      ],
      "id": "12e91fd7-471a-4b0c-8520-04b7dc96426b",
      "name": "Test Webhook3",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "maxTries": 3,
      "disabled": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "has-nodes",
              "leftValue": "={{ $json.nodes?.length > 0 }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        3520,
        6368
      ],
      "id": "02f6b8f8-29fc-4962-908c-fb7d2ae39b52",
      "name": "Has Nodes?2",
      "disabled": true
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "options": {}
      },
      "id": "b85e83e9-7b8a-4315-bb6a-e6584ebd16ff",
      "name": "Transform to base2",
      "type": "n8n-nodes-base.extractFromFile",
      "position": [
        1728,
        6272
      ],
      "typeVersion": 1,
      "disabled": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"contents\": [{\n    \"parts\": [\n      {\n        \"text\": \"You are a JSON generator for n8n workflows. CRITICAL REQUIREMENTS:\\n\\n1. Return ONLY valid, parseable JSON - no markdown, no explanations\\n2. Use this EXACT structure:\\n{\\n  \\\"modified_workflow\\\": {\\n    \\\"name\\\": \\\"Workflow Name\\\",\\n    \\\"nodes\\\": [...],\\n    \\\"connections\\\": {...},\\n    \\\"pinData\\\": {},\\n    \\\"settings\\\": {...},\\n    \\\"staticData\\\": null,\\n    \\\"tags\\\": [],\\n    \\\"triggerCount\\\": 0,\\n    \\\"updatedAt\\\": \\\"2025-10-06T14:30:00.000Z\\\",\\n    \\\"versionId\\\": \\\"...\\\"\\n  },\\n  \\\"added_webhook_path\\\": \\\"/webhook-trigger-replacement-YYYY-MM-DD-HHmmss\\\",\\n  \\\"n8n_workflow_name\\\": \\\"Descriptive Workflow Name\\\",\\n  \\\"changes_made\\\": {\\n    \\\"updated_references\\\": [\\n      {\\\"node\\\": \\\"WorkflowName\\\"}\\n    ]\\n  }\\n}\\n\\n3. JSON RULES:\\n   - All strings must use double quotes\\n   - No trailing commas\\n   - All brackets must match\\n   - Escape special characters\\n   - Numbers without quotes\\n\\n4. Each node MUST have: id, name, type, position [x,y], typeVersion, parameters\\n5. Validate all connections reference existing node names\\n6. Test your JSON before responding\\n\\nGenerate updated n8n workflow from the provided data.\"\n      },\n      {\n        \"inline_data\": {\n          \"mime_type\": \"text/plain\",\n          \"data\": \"{{ $json.data }}\"\n        }\n      }\n    ]\n  }],\n  \"generationConfig\": {\n    \"temperature\": 0.1,\n    \"topP\": 0.9,\n    \"topK\": 20,\n    \"maxOutputTokens\": 8192\n  }\n}",
        "options": {
          "timeout": 90000
        }
      },
      "id": "d739fe94-d48b-4907-aee7-ab9594fe3805",
      "name": "Call Gemini API1",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1952,
        6368
      ],
      "typeVersion": 4.2,
      "disabled": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "// ULTRA-ROBUST JSON PARSER for DeepSeek model output\nconst input = $input.first().json;\n\n// Step 0: Extract raw text from DeepSeek response format\nlet raw = null;\n\n// DeepSeek returns array of objects with \"text\" field\nif (Array.isArray(input) && input[0]?.text) {\n    raw = input[0].text;\n} else if (input?.text) {\n    raw = input.text;\n} else {\n    throw new Error(\"❌ No response text found from DeepSeek model\");\n}\n\nif (!raw) throw new Error(\"❌ Empty response from DeepSeek model\");\n\n// Step 1: Clean markdown and whitespace\nraw = raw\n  .replace(/```json\\s*/gi, '')\n  .replace(/```\\s*/g, '')\n  .replace(/^[^{]*/, '')  // Remove text before first {\n  .replace(/[^}]*$/, '')  // Remove text after last }\n  .trim();\n\n// Step 2: Extract JSON object\nconst jsonStart = raw.indexOf('{');\nconst jsonEnd = raw.lastIndexOf('}');\nif (jsonStart === -1 || jsonEnd === -1) throw new Error(\"❌ No JSON object found\");\nraw = raw.substring(jsonStart, jsonEnd + 1);\n\n// Step 3: Advanced repair function\nfunction repairJSON(str) {\n  let repaired = str;\n  repaired = repaired.replace(/,\\s*([\\]}])/g, '$1'); // remove trailing commas\n  repaired = repaired.replace(/\\}\\s*\\{/g, '},{'); // fix merged objects\n  repaired = repaired.replace(/\\]\\s*\\[/g, '],['); // fix merged arrays\n  repaired = repaired.replace(/\"([^\"]*?)\"([^,:{}\\[\\]]*?)\"([^\"]*?)\"/g, (m,p1,p2,p3) => p2 && !p2.match(/^\\s*[,:\\]}]\\s*$/) ? `\"${p1}${p2.replace(/\"/g,'\\\\\"')}${p3}\"` : m);\n  repaired = repaired.replace(/[\\x00-\\x1F\\x7F]/g,''); // remove invalid characters\n  repaired = repaired.replace(/([{,]\\s*)([a-zA-Z_][a-zA-Z0-9_]*)\\s*:/g,'$1\"$2\":'); // quote keys\n  repaired = repaired.replace(/([\\[{,])\\s+/g,'$1'); // remove spaces after brackets\n  repaired = repaired.replace(/\\s+([\\]}])/g,'$1'); // remove spaces before brackets\n  return repaired;\n}\n\n// Step 4: Attempt multiple parses\nlet parsed = null;\nlet parseAttempts = [\n  () => JSON.parse(raw),\n  () => JSON.parse(repairJSON(raw)),\n  () => {\n    const workflowMatch = raw.match(/\"modified_workflow\"\\s*:\\s*\\{[\\s\\S]*?\\}\\s*,\\s*\"added_webhook_path\"\\s*:\\s*\".*?\"\\s*,\\s*\"n8n_workflow_name\"\\s*:\\s*\".*?\"/i);\n    if (workflowMatch) return JSON.parse(repairJSON('{' + workflowMatch[0] + '}'));\n    throw new Error(\"Cannot extract main workflow fields\");\n  }\n];\n\nlet lastError = null;\nfor (let i = 0; i < parseAttempts.length; i++) {\n  try {\n    parsed = parseAttempts[i]();\n    break;\n  } catch(e) {\n    lastError = e;\n  }\n}\n\nif (!parsed) throw new Error(`❌ All parse attempts failed. Last error: ${lastError.message}`);\n\n// Step 5: Validate required fields\nconst requiredFields = [\"modified_workflow\",\"added_webhook_path\",\"n8n_workflow_name\"];\nfor (const f of requiredFields) {\n  if (!(f in parsed)) throw new Error(`❌ Missing field: ${f}`);\n}\n\n// Step 6: Return parsed JSON in system message format\nreturn [{\n  json: {\n    modified_workflow: parsed.modified_workflow,\n    added_webhook_path: parsed.added_webhook_path,\n    n8n_workflow_name: parsed.n8n_workflow_name\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2176,
        6368
      ],
      "id": "dc46a5a7-c6e4-4997-a125-5efb04d98d3f",
      "name": "Parse & Validate Response1",
      "disabled": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "// Advanced workflow validation with auto-fix\nconst nodes =$input.first().json.modified_workflow.nodes;\nconst connections = $input.first().json.modified_workflow.connections;\nconst webhook_path = $input.first().json.added_webhook_path;\n\nconsole.log(`🔍 Validating ${nodes.length} nodes...`);\n\n// 1. Validate and fix all nodes\nconst validatedNodes = [];\nconst nodeIds = new Set();\nconst nodeNames = new Set();\nlet fixedCount = 0;\n\nfor (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    let fixed = false;\n    \n    // Fix missing ID\n    if (!node.id) {\n        node.id = `node-${Date.now()}-${i}-${Math.random().toString(36).substr(2, 9)}`;\n        fixed = true;\n    }\n    \n    // Fix missing name\n    if (!node.name) {\n        node.name = `Node_${i + 1}_${node.type?.split('.').pop() || 'Unknown'}`;\n        fixed = true;\n    }\n    \n    // Check for duplicate names\n    if (nodeNames.has(node.name)) {\n        node.name = `${node.name}_${Date.now()}_${i}`;\n        fixed = true;\n    }\n    \n    // Fix missing type\n    if (!node.type) {\n        console.log(`❌ Node ${node.name} has no type - skipping`);\n        continue;\n    }\n    \n    // Fix missing position\n    if (!node.position || !Array.isArray(node.position) || node.position.length !== 2) {\n        node.position = [i * 240, 1824];\n        fixed = true;\n    }\n    \n    // Fix invalid position values\n    if (typeof node.position[0] !== 'number' || typeof node.position[1] !== 'number') {\n        node.position = [i * 240, 1824];\n        fixed = true;\n    }\n    \n    // Fix missing typeVersion\n    if (!node.typeVersion) {\n        node.typeVersion = 1;\n        fixed = true;\n    }\n    \n    // Ensure parameters exist\n    if (!node.parameters) {\n        node.parameters = {};\n        fixed = true;\n    }\n    \n    if (fixed) {\n        fixedCount++;\n        console.log(`🔧 Fixed node: ${node.name}`);\n    }\n    \n    nodeIds.add(node.id);\n    nodeNames.add(node.name);\n    validatedNodes.push(node);\n}\n\nconsole.log(`✅ Validated ${validatedNodes.length} nodes (${fixedCount} fixed)`);\n\nif (validatedNodes.length === 0) {\n    throw new Error(\"❌ No valid nodes after validation\");\n}\n\n// 2. Clean and validate connections\nconst cleanedConnections = {};\nlet removedConnections = 0;\nlet fixedConnections = 0;\n\nfor (const [sourceNodeName, connectionTypes] of Object.entries(connections)) {\n    const sourceNode = validatedNodes.find(n => n.name === sourceNodeName);\n    \n    if (!sourceNode) {\n        console.log(`⚠️ Removing connections from non-existent source: ${sourceNodeName}`);\n        removedConnections++;\n        continue;\n    }\n    \n    cleanedConnections[sourceNodeName] = {};\n    \n    for (const [connType, connArray] of Object.entries(connectionTypes)) {\n        if (!Array.isArray(connArray)) {\n            console.log(`⚠️ Invalid connection type format for ${sourceNodeName}.${connType}`);\n            continue;\n        }\n        \n        cleanedConnections[sourceNodeName][connType] = [];\n        \n        for (const connGroup of connArray) {\n            if (!Array.isArray(connGroup)) {\n                console.log(`⚠️ Invalid connection group in ${sourceNodeName}`);\n                continue;\n            }\n            \n            const validConnections = [];\n            \n            for (const conn of connGroup) {\n                // Validate connection structure\n                if (!conn || typeof conn !== 'object') {\n                    removedConnections++;\n                    continue;\n                }\n                \n                // Fix missing fields\n                if (!conn.node) {\n                    console.log(`⚠️ Connection missing target node name`);\n                    removedConnections++;\n                    continue;\n                }\n                \n                if (conn.type === undefined) {\n                    conn.type = 'main';\n                    fixedConnections++;\n                }\n                \n                if (conn.index === undefined) {\n                    conn.index = 0;\n                    fixedConnections++;\n                }\n                \n                // Check if target node exists\n                const targetNode = validatedNodes.find(n => n.name === conn.node);\n                if (!targetNode) {\n                    console.log(`⚠️ Removing connection to non-existent target: ${conn.node}`);\n                    removedConnections++;\n                    continue;\n                }\n                \n                validConnections.push(conn);\n            }\n            \n            if (validConnections.length > 0) {\n                cleanedConnections[sourceNodeName][connType].push(validConnections);\n            }\n        }\n        \n        // Remove empty connection types\n        if (cleanedConnections[sourceNodeName][connType].length === 0) {\n            delete cleanedConnections[sourceNodeName][connType];\n        }\n    }\n    \n    // Remove empty connection objects\n    if (Object.keys(cleanedConnections[sourceNodeName]).length === 0) {\n        delete cleanedConnections[sourceNodeName];\n    }\n}\n\nconsole.log(`🔗 Connections: ${removedConnections} removed, ${fixedConnections} fixed`);\n\n// 3. Detect orphaned nodes\nconst connectedNodeNames = new Set();\nfor (const [source, types] of Object.entries(cleanedConnections)) {\n    connectedNodeNames.add(source);\n    for (const connArray of Object.values(types)) {\n        for (const group of connArray) {\n            for (const conn of group) {\n                connectedNodeNames.add(conn.node);\n            }\n        }\n    }\n}\n\nconst orphanedNodes = validatedNodes.filter(node => \n    !connectedNodeNames.has(node.name) && \n    !node.type.toLowerCase().includes('trigger') &&\n    !node.type.toLowerCase().includes('webhook')\n);\n\nif (orphanedNodes.length > 0) {\n    console.log(`⚠️ Found ${orphanedNodes.length} orphaned nodes: ${orphanedNodes.map(n => n.name).join(', ')}`);\n}\n\n// 4. Validate specific node types\nconst webhookNodes = validatedNodes.filter(n => \n    n.type === 'n8n-nodes-base.webhook' ||\n    n.type.toLowerCase().includes('webhook')\n);\n\nfor (const webhook of webhookNodes) {\n    if (!webhook.parameters?.path) {\n        console.log(`⚠️ Webhook ${webhook.name} missing path, adding default`);\n        if (!webhook.parameters) webhook.parameters = {};\n        webhook.parameters.path = `/webhook-${Date.now()}`;\n    }\n}\n\n// 5. Ensure workflow has a trigger\nconst hasTrigger = validatedNodes.some(n => \n    n.type.toLowerCase().includes('trigger') ||\n    n.type.toLowerCase().includes('webhook')\n);\n\nif (!hasTrigger) {\n    console.log(\"⚠️ WARNING: Workflow has no trigger node!\");\n}\n\n// 6. Final report\nconst validationReport = {\n    total_nodes: validatedNodes.length,\n    nodes_fixed: fixedCount,\n    connections_removed: removedConnections,\n    connections_fixed: fixedConnections,\n    orphaned_nodes: orphanedNodes.map(n => n.name),\n    webhook_nodes: webhookNodes.map(n => ({ name: n.name, path: n.parameters?.path })),\n    has_trigger: hasTrigger,\n    validation_passed: validatedNodes.length > 0 && hasTrigger\n};\n\nconsole.log(\"📊 Validation Report:\", JSON.stringify(validationReport, null, 2));\n\nreturn [{ \n    json: { \n        modify_nodes: validatedNodes,\n        modify_connections: cleanedConnections,\n        webhook_path: webhook_path,\n        n8n_workflow_name : $input.first().json.n8n_workflow_name || '',\n        validation_report: validationReport\n        \n      \n    } \n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2400,
        6368
      ],
      "id": "5a639262-4eaf-4eab-9ca7-e2fefa44db9d",
      "name": "Validate & Clean Workflow2",
      "disabled": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "workflow-payload",
              "name": "workflowPayload",
              "value": "={{ \n  JSON.stringify({\n\"name\": ($json.n8n_workflow_name ? $json.n8n_workflow_name + \"-\" + Date.now() : \"AI_Generated_\" + Date.now()),\n    \"nodes\": $json.modify_nodes,\n    \"connections\": $json.modify_connections,\n    \"settings\": {\n      \"saveExecutionProgress\": true,\n      \"saveManualExecutions\": true,\n      \"saveDataErrorExecution\": \"all\",\n      \"saveDataSuccessExecution\": \"all\",\n      \"executionTimeout\": 3600,\n      \"timezone\": \"America/New_York\",\n      \"executionOrder\": \"v1\"\n    },\n    \"staticData\": {}\n  })\n}}",
              "type": "string"
            },
            {
              "id": "validation-report",
              "name": "validation_report",
              "value": "={{ $json.validation_report }}",
              "type": "object"
            },
            {
              "id": "5a2df228-6121-4033-b2e4-d9936b0bb9f6",
              "name": "n8n_webhook_path",
              "value": "={{ $json.webhook_path }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2624,
        6368
      ],
      "id": "20fe3c1c-75ef-4c5b-8629-02dcb63602f8",
      "name": "Prepare Workflow Payload2",
      "disabled": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:5678/api/v1/workflows",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.workflowPayload }}",
        "options": {
          "redirect": {
            "redirect": {}
          },
          "timeout": 30000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2848,
        6368
      ],
      "id": "586ca7b4-8886-4f08-9ff3-a5f2d0fa1847",
      "name": "Create Workflow2",
      "disabled": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "const response = $input.first().json;\n\nif (!response.id) {\n    throw new Error(\"❌ Workflow creation failed - no ID returned\");\n}\n\nconsole.log(`✅ Workflow created:`);\nconsole.log(`   ID: ${response.id}`);\nconsole.log(`   Name: ${response.name || 'N/A'}`);\nconsole.log(`   Nodes: ${response.nodes?.length || 0}`);\n\nreturn [{ \n    json: { \n        id: response.id,\n        name: response.name || 'Unnamed',\n        active: response.active || false,\n        nodes: response.nodes || [],\n        created: true\n    } \n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3072,
        6368
      ],
      "id": "173dcf18-ec60-49d6-b2c1-8d651860a820",
      "name": "Verify Creation2",
      "disabled": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=http://localhost:5678/api/v1/workflows/{{ $json.id }}/activate",
        "options": {
          "timeout": 15000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3296,
        6368
      ],
      "id": "1b3bb78e-1bd0-4c7c-92f6-a9b4379154d1",
      "name": "Activate Workflow2",
      "disabled": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "const webhookPath = $('Validate & Clean Workflow2').first().json.webhook_path;\n\nif (!webhookPath) {\n    console.log(\"⚠️ Webhook has no path\");\n    return [{ json: { has_webhook: false, skip_test: true, message: \"Webhook missing path\" } }];\n}\n\nconsole.log(`✅ Webhook found: ${webhookPath}`);\n\nreturn [{ \n    json: {\n        webhook_path: webhookPath\n    } \n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3744,
        6368
      ],
      "id": "18371e08-ef79-433d-84ed-2b13e8f121bb",
      "name": "Extract Webhook Path2",
      "disabled": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "body",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        1504,
        6272
      ],
      "id": "23ca01dd-9ba0-4d01-be9f-f04c19c3a8ae",
      "name": "Convert to File2",
      "disabled": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## 1. Update Workflow\n## 2. Activate the Workflow\n## 3. Run Workflow\n",
        "height": 128,
        "width": 320,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1488,
        5920
      ],
      "typeVersion": 1,
      "id": "7bf26d03-48b8-47a4-91ab-99cee3a3197a",
      "name": "Sticky Note4",
      "disabled": true
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "n8n-testing",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        1280,
        6272
      ],
      "id": "6025ea26-c183-4d68-9af7-e97baebc4932",
      "name": "Webhook2",
      "webhookId": "f6ea9d05-bd9f-445b-97aa-bd089e99b132",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/errors",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Error",
              "value": "Conversation Failed!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1728,
        6464
      ],
      "id": "58acc798-91f5-4f8f-b710-2f552830907f",
      "name": "HTTP Request24",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/errors",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Error",
              "value": "Gemini Model Failed!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2176,
        6560
      ],
      "id": "3c980235-1e52-47b7-b410-b1bdf8c274f3",
      "name": "HTTP Request46",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/errors",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Error",
              "value": "Parse Validations Failed"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2400,
        6560
      ],
      "id": "10c82040-e822-45a2-9d7f-890e4205d0c6",
      "name": "HTTP Request47",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/errors",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Error",
              "value": "Workflow Clean Failed!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2624,
        6560
      ],
      "id": "2455fb59-05bd-4692-9643-3a27f7df8837",
      "name": "HTTP Request48",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/errors",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Error",
              "value": "Workflow Creation Failed!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3072,
        6560
      ],
      "id": "ad30d0c0-d030-46ff-984b-237854b17094",
      "name": "HTTP Request49",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/errors",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Error",
              "value": "Verification of Create Workflow Failed!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3296,
        6560
      ],
      "id": "48bb0f83-a089-466d-882e-bf99a3bc5306",
      "name": "HTTP Request50",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/errors",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Error",
              "value": "Payload Failed!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2848,
        6560
      ],
      "id": "86edc740-b412-4a7d-9fa3-b023c47e091b",
      "name": "HTTP Request51",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/errors",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Error",
              "value": "Workflow Activation Process Failed!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3520,
        6560
      ],
      "id": "778a873b-b0e9-469e-b739-2de8551e65f5",
      "name": "HTTP Request52",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/errors",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Error",
              "value": "Data is Not Coming from past Node"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3744,
        6560
      ],
      "id": "2527fec8-8a3a-45de-a32f-7fce52ba7985",
      "name": "HTTP Request53",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/errors",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Error",
              "value": "Conversation Failed!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3968,
        6560
      ],
      "id": "fc3ecdd9-b2a5-424c-af8a-9c2d0aab8532",
      "name": "HTTP Request54",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/errors",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Error",
              "value": "={{ $json.message }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4192,
        6464
      ],
      "id": "99f127bc-24b8-4d6b-95c1-d7dc22d0336a",
      "name": "HTTP Request55",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "File Created Successfully."
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1728,
        6080
      ],
      "id": "766ec8ff-a4d8-4235-b5f7-d90cf199c698",
      "name": "HTTP Request56",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Base64 Conversation Successfully."
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1952,
        6176
      ],
      "id": "7daa448b-ac98-421a-ab1f-441332d07567",
      "name": "HTTP Request57",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Model Response generated successfully."
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2176,
        6176
      ],
      "id": "3986beeb-4132-44e1-9e8f-f19a392fb769",
      "name": "HTTP Request58",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Parse Validations Failed"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2400,
        6176
      ],
      "id": "50674a53-d408-446b-a628-632c395205dd",
      "name": "HTTP Request59",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Workflow Clean Sucessfully!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2624,
        6176
      ],
      "id": "dd5e7278-4f36-434c-8e4e-11ef10bc3391",
      "name": "HTTP Request60",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Payload Created Successfully!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2848,
        6176
      ],
      "id": "464327b5-48c9-4803-a295-ae9e83d9602a",
      "name": "HTTP Request61",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Workflow Created Successfully!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3072,
        6176
      ],
      "id": "7e34e32b-65fa-4c5f-8aaa-cb03fea6259b",
      "name": "HTTP Request62",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Workflow Created Verification Done."
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3296,
        6176
      ],
      "id": "a9c94d81-1218-4ab3-af79-c3a4cb354aa3",
      "name": "HTTP Request63",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Workflow Activated Successfully."
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3520,
        6176
      ],
      "id": "4177e18f-6766-45cd-8ede-c6f3d8ee194f",
      "name": "HTTP Request64",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Workflow parse Successfully."
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3744,
        6176
      ],
      "id": "3ea612b5-ddf2-4897-8fe3-53d20d258f0a",
      "name": "HTTP Request65",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Workflow Running Successfully."
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4192,
        6272
      ],
      "id": "b297a17a-1619-4a95-853e-0dce0e59d6c8",
      "name": "HTTP Request66",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/success",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "Message",
              "value": "Workflow Webhook Path Get Successfully."
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3968,
        6176
      ],
      "id": "896ec3be-4ace-436d-ba92-a5dce395206f",
      "name": "HTTP Request67",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=http://localhost:5678/webhook{{ $json.webhook_path }}",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "input",
              "value": "Test from automation"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4096,
        7168
      ],
      "id": "89419647-d486-49df-a0b9-9140c7b90cc5",
      "name": "Test Webhook2",
      "disabled": true,
      "onError": "continueErrorOutput"
    }
  ],
  "connections": {
    "AI Agent": {
      "main": [
        [
          {
            "node": "Parse and Validate JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse and Validate JSON": {
      "main": [
        [
          {
            "node": "Validation Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validation Check": {
      "main": [
        [
          {
            "node": "Send Test Cases",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Nodes?1": {
      "main": [
        [
          {
            "node": "Extract Webhook Path",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request21",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transform to base1": {
      "main": [
        [
          {
            "node": "Call Gemini API",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Gemini API": {
      "main": [
        [
          {
            "node": "Parse & Validate Response",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request14",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse & Validate Response": {
      "main": [
        [
          {
            "node": "Validate & Clean Workflow",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request15",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate & Clean Workflow": {
      "main": [
        [
          {
            "node": "Prepare Workflow Payload",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request16",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Workflow Payload": {
      "main": [
        [
          {
            "node": "Create Workflow",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request17",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Workflow": {
      "main": [
        [
          {
            "node": "Verify Creation",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request18",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verify Creation": {
      "main": [
        [
          {
            "node": "Activate Workflow",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request19",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Activate Workflow": {
      "main": [
        [
          {
            "node": "Has Nodes?1",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request20",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Webhook Path": {
      "main": [
        [
          {
            "node": "Test Webhook",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request23",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Test Webhook": {
      "main": [
        [
          {
            "node": "HTTP Request22",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File1": {
      "main": [
        [
          {
            "node": "Transform to base1",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request12",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook1": {
      "main": [
        [
          {
            "node": "Convert to File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Parse & Validate Response5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Test Webhook1": {
      "main": [
        [
          {
            "node": "HTTP Request66",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request55",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Nodes?": {
      "main": [
        [
          {
            "node": "Extract Webhook Path1",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request43",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request31",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transform to base": {
      "main": [
        [
          {
            "node": "HTTP Request35",
            "type": "main",
            "index": 0
          },
          {
            "node": "Basic LLM Chain1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse & Validate Response2": {
      "main": [
        [
          {
            "node": "Validate & Clean Workflow1",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request37",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request25",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate & Clean Workflow1": {
      "main": [
        [
          {
            "node": "Prepare Workflow Payload1",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request38",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request26",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Workflow Payload1": {
      "main": [
        [
          {
            "node": "Create Workflow1",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request39",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request29",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Workflow1": {
      "main": [
        [
          {
            "node": "Verify Creation1",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request40",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request27",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verify Creation1": {
      "main": [
        [
          {
            "node": "Activate Workflow1",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request41",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request28",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Activate Workflow1": {
      "main": [
        [
          {
            "node": "Has Nodes?",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request42",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request30",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Webhook Path1": {
      "main": [
        [
          {
            "node": "HTTP Request45",
            "type": "main",
            "index": 0
          },
          {
            "node": "Test Webhook2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request32",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Transform to base",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request34",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request44": {
      "main": [
        [
          {
            "node": "Insert row1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain1": {
      "main": [
        [
          {
            "node": "Parse & Validate Response2",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request36",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Before Creation": {
      "main": [
        [
          {
            "node": "Create Workflow3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain2": {
      "main": [
        [
          {
            "node": "Parse & Validate Response4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse & Validate Response4": {
      "main": [
        [
          {
            "node": "Validate & Clean Workflow3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate & Clean Workflow3": {
      "main": [
        [
          {
            "node": "Prepare Workflow Payload3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Workflow Payload3": {
      "main": [
        [
          {
            "node": "Validate Before Creation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Workflow3": {
      "main": [
        [
          {
            "node": "Verify Creation3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verify Creation3": {
      "main": [
        [
          {
            "node": "Activate Workflow3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Activate Workflow3": {
      "main": [
        [
          {
            "node": "Has Nodes?3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Nodes?3": {
      "main": [
        [
          {
            "node": "Extract Webhook Path3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Webhook Path3": {
      "main": [
        [
          {
            "node": "Test Webhook3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Nodes?2": {
      "main": [
        [
          {
            "node": "Extract Webhook Path2",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request65",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request53",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transform to base2": {
      "main": [
        [
          {
            "node": "HTTP Request57",
            "type": "main",
            "index": 0
          },
          {
            "node": "Call Gemini API1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Gemini API1": {
      "main": [
        [
          {
            "node": "Parse & Validate Response1",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request58",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request46",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse & Validate Response1": {
      "main": [
        [
          {
            "node": "Validate & Clean Workflow2",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request59",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request47",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate & Clean Workflow2": {
      "main": [
        [
          {
            "node": "Prepare Workflow Payload2",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request60",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request48",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Workflow Payload2": {
      "main": [
        [
          {
            "node": "Create Workflow2",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request61",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request51",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Workflow2": {
      "main": [
        [
          {
            "node": "Verify Creation2",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request62",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request49",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verify Creation2": {
      "main": [
        [
          {
            "node": "Activate Workflow2",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request63",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request50",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Activate Workflow2": {
      "main": [
        [
          {
            "node": "Has Nodes?2",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request64",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request52",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Webhook Path2": {
      "main": [
        [
          {
            "node": "HTTP Request67",
            "type": "main",
            "index": 0
          },
          {
            "node": "Test Webhook1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request54",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File2": {
      "main": [
        [
          {
            "node": "Transform to base2",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request56",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request24",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook2": {
      "main": [
        [
          {
            "node": "Convert to File2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Test Webhook2": {
      "main": [
        [
          {
            "node": "HTTP Request44",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request33",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "e26d8b8e-73c5-490d-a209-e240c63f7466",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-10-04T09:49:48.666Z",
      "updatedAt": "2025-10-04T09:49:48.666Z",
      "role": "workflow:owner",
      "workflowId": "zgESYhvJzg41rCLl",
      "projectId": "nSUbNPn8P23MJaxQ",
      "project": {
        "createdAt": "2025-08-19T13:24:42.941Z",
        "updatedAt": "2025-08-19T13:25:25.513Z",
        "id": "nSUbNPn8P23MJaxQ",
        "name": "Sanjay Makwana <sanjay.makwana@e2m.solutions>",
        "type": "personal",
        "icon": null,
        "description": null,
        "projectRelations": [
          {
            "createdAt": "2025-08-19T13:24:42.957Z",
            "updatedAt": "2025-08-19T13:24:42.957Z",
            "userId": "bec985b6-4c5b-4f76-a28c-588449d2617c",
            "projectId": "nSUbNPn8P23MJaxQ",
            "user": {
              "createdAt": "2025-08-19T13:24:42.285Z",
              "updatedAt": "2025-10-08T04:11:33.000Z",
              "id": "bec985b6-4c5b-4f76-a28c-588449d2617c",
              "email": "sanjay.makwana@e2m.solutions",
              "firstName": "Sanjay",
              "lastName": "Makwana",
              "personalizationAnswers": {
                "version": "v4",
                "personalization_survey_submitted_at": "2025-08-19T13:25:56.618Z",
                "personalization_survey_n8n_version": "1.107.3",
                "automationGoalDevops": [
                  "ticketing-systems-integrations",
                  "data-syncing"
                ],
                "companyIndustryExtended": [
                  "it-industry"
                ],
                "companySize": "<20",
                "companyType": "other",
                "role": "it",
                "reportedSource": "google"
              },
              "settings": {
                "userActivated": true,
                "easyAIWorkflowOnboarded": true,
                "firstSuccessfulWorkflowId": "9HG8S6sJBTFvXXIZ",
                "userActivatedAt": 1755781899419,
                "npsSurvey": {
                  "responded": true,
                  "lastShownAt": 1756103555035
                }
              },
              "disabled": false,
              "mfaEnabled": false,
              "lastActiveAt": "2025-10-08",
              "isPending": false
            }
          }
        ]
      }
    }
  ],
  "tags": []
}