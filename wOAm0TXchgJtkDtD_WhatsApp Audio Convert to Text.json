{
  "createdAt": "2025-08-22T07:50:40.074Z",
  "updatedAt": "2025-08-26T06:21:17.000Z",
  "id": "wOAm0TXchgJtkDtD",
  "name": "WhatsApp Audio Convert to Text",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "seconds",
              "secondsInterval": 5
            }
          ]
        }
      },
      "id": "2cf9d612-705f-4a40-916c-67d6ec629849",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -672,
        176
      ]
    },
    {
      "parameters": {
        "url": "https://discord.com/api/v10/channels/1408038449503801405/messages?limit=1",
        "options": {
          "timeout": 10000
        }
      },
      "id": "07c64949-1ebd-4491-b2e6-d051cbbf7c3d",
      "name": "Fetch Discord Message",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -512,
        176
      ]
    },
    {
      "parameters": {
        "url": "={{$json[\"attachments\"][0][\"url\"]}}",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -368,
        176
      ],
      "id": "8a098096-6c5c-4293-aff0-b499ea14a0df",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "analyze",
        "modelId": {
          "__rl": true,
          "value": "models/gemini-2.5-pro",
          "mode": "list",
          "cachedResultName": "models/gemini-2.5-pro"
        },
        "text": "=Give me all text what is he/she say this all provide.",
        "audioUrls": "={{ $json.attachments[0].url }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        -192,
        176
      ],
      "id": "6e84fd0d-b73e-4120-9cd1-eb059c983b4b",
      "name": "Analyze audio"
    },
    {
      "parameters": {
        "resource": "message",
        "guildId": {
          "__rl": true,
          "value": "1408023732051513458",
          "mode": "list",
          "cachedResultName": "Bot Test Server",
          "cachedResultUrl": "https://discord.com/channels/1408023732051513458"
        },
        "channelId": {
          "__rl": true,
          "value": "1408038449503801405",
          "mode": "list",
          "cachedResultName": "hero",
          "cachedResultUrl": "https://discord.com/channels/1408023732051513458/1408038449503801405"
        },
        "content": "=This is your email, please open and Check:\\n\\n{{ $json.draft_link }}",
        "options": {}
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        1424,
        -176
      ],
      "id": "7eb2ec10-8c06-4f3f-a3c7-2b33d80b9c7c",
      "name": "Send a message",
      "webhookId": "d8e7df77-70a3-42e5-9987-1456abd8428c"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "models/gemini-2.0-flash",
          "mode": "list",
          "cachedResultName": "models/gemini-2.0-flash"
        },
        "messages": {
          "values": [
            {
              "content": "=Role : You are a highly capable intelligent assistant designed to understand user requests with 100% accuracy and deliver precise, actionable outputs.\nPrimary Directive\n\nREAD → UNDERSTAND → EXECUTE → DELIVER\n\nCarefully analyze the user's input to identify the exact request\nUnderstand the context and intent behind the request\nExecute the task completely and accurately\nDeliver the output in the most appropriate, ready-to-use format\n\nOperating Rules\n✅ Content Creation Tasks\n\nEmails: Generate complete, professional email drafts with subject lines\nMessages: Create platform-appropriate content (SMS, social media, etc.)\nDocuments: Produce well-structured, formatted documents\nReports: Create structured, analytical reports with headings, subheadings, bullet points, and summaries for clarity\nMarketing Content: Develop engaging copy for specified platforms\n\n✅ Information Tasks\n\nExplanations: Provide clear, concise information on requested topics\nAnalysis: Break down complex subjects into digestible insights\nResearch: Deliver relevant, accurate information with proper context\n\n✅ Output Standards\n\nComplete: Never provide partial or incomplete responses\nProfessional: Maintain appropriate tone for the context\nReady-to-use: Format output for immediate implementation\nWell-structured: Use proper headings, paragraphs, and formatting\nError-free: Ensure accuracy in grammar, spelling, and facts\n\nResponse Framework\nFor Content Creation:\n[Content Type]: [Brief description]\n[Formatted output ready for use]\n[Any relevant usage notes if needed]\nFor Information Requests:\n[Clear, organized explanation]\n[Key points highlighted]\n[Practical applications if relevant]\nQuality Assurance\n\n✓ Request fully understood\n✓ Context appropriately considered\n✓ Output format optimized for use case\n✓ Professional standards maintained\n✓ Complete solution provided\n\nHandling Ambiguity\nWhen requests lack specificity:\n\nMake reasonable professional assumptions\nChoose the most practical interpretation\nDeliver complete, usable output\nMaintain professional tone and structure\nGenerate a polite general response.\n\n\nInput Processing: {{ $json.content.parts[0].text }}\nExecute task with 100% accuracy and deliver ready-to-use output.",
              "role": "model"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        -32,
        176
      ],
      "id": "2976410c-f285-418d-9ba5-e4b3fb45ad36",
      "name": "Message a model"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "models/gemini-2.0-flash",
          "mode": "list",
          "cachedResultName": "models/gemini-2.0-flash"
        },
        "messages": {
          "values": [
            {
              "content": "=You are an AI assistant that categorizes content and outputs it in JSON only. \n\nUse this format:\n\n{\n  \"content_type\": \"Email/Document/Report/Presentation\",\n  \"data\": { ... relevant fields based on type ... }\n}\n\nInstructions:\n\n1. Analyze the following text and identify its type: Email, Document, Presentation, or Report.  \n2. Based on the identified type, extract relevant key fields:  \n\n   - **If Email:** provide Subject, Sender, Recipient (if available), Body/Message, Links (if any).  \n   - **If Document:** provide Title/Heading (if any), Main Content, Summary/Description.  \n   - **If Presentation:** provide Title, Slide Titles (if available), Main Points/Content, Summary.  \n   - **If Report:** provide Title/Heading, Sections/Headings, Key Data or Findings, Summary.  \n\n3. Structure your output clearly with labels and content. Do not add extra commentary.\n\nText to analyze:\n\"\"\"\n{{ $json.content.parts[0].text }}\n\"\"\"\n",
              "role": "model"
            }
          ]
        },
        "jsonOutput": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        240,
        176
      ],
      "id": "1c8ab4ed-0dfd-43d1-b0fd-cb5965111953",
      "name": "Message a model1"
    },
    {
      "parameters": {
        "jsCode": "// Input data from previous node\nconst input = $input.all(); // or $json if single item\n\n// Assuming the JSON you shared is in input[0].json.content.parts[0].text\nconst rawText = input[0].json.content.parts[0].text;\n\n// Parse it into a proper JSON object\nlet parsedData;\ntry {\n    parsedData = JSON.parse(rawText);\n} catch (error) {\n    throw new Error(\"Failed to parse JSON: \" + error.message);\n}\n\n// Access the content_type\nconst contentType = parsedData.content_type;\n\n// Access the actual data fields\nconst dataFields = parsedData.data;\n\n// Return as structured output\nreturn [\n    {\n        json: {\n            content_type: contentType,\n            data: dataFields\n        }\n    }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        544,
        176
      ],
      "id": "77eb8b3a-a89e-4596-a60d-77ceadface8a",
      "name": "Code"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.content_type }}",
                    "rightValue": "=Email",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "9b88d50d-1921-40b7-9746-ad1612b5c5e9"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "df488a23-120a-4f8a-a157-b739aa2b5313",
                    "leftValue": "={{ $json.content_type }}",
                    "rightValue": "Document",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "dbed8078-995e-4ecf-beba-a155e9c30f39",
                    "leftValue": "={{ $json.content_type }}",
                    "rightValue": "Report",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "e16f6a72-d0e1-4e64-a617-19614224539b",
                    "leftValue": "={{ $json.content_type }}",
                    "rightValue": "Presentation",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        736,
        144
      ],
      "id": "5367bd56-13b7-4d7c-9a17-91b8dbdf34cc",
      "name": "Switch"
    },
    {
      "parameters": {
        "resource": "draft",
        "subject": "={{ $json.data.Subject }}",
        "message": "={{ $json.data['Body/Message'] }}",
        "options": {}
      },
      "id": "2fb89cd3-bb5c-4001-a6e8-f75e7fc35423",
      "name": "Gmail - Create Draft",
      "type": "n8n-nodes-base.gmail",
      "position": [
        992,
        -176
      ],
      "typeVersion": 2.1,
      "webhookId": "f93fa3e2-ae30-4ccb-87fe-425af474d75b"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0c23976f-dbb2-4968-a9dc-cb04903fc6ff",
              "name": "draft_id",
              "value": "={{ $json.message.id }}",
              "type": "string"
            },
            {
              "id": "ef7825aa-1d1f-46b0-80bb-c79572cf0a17",
              "name": "thread_id",
              "value": "={{ $json.message.threadId }}",
              "type": "string"
            },
            {
              "id": "825a153c-b57f-49d0-8b94-0d6ba5646d9e",
              "name": "draft_link",
              "value": "=https://mail.google.com/mail/u/0/#drafts/{{ $json.message.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1216,
        -176
      ],
      "id": "9d548ccb-b043-430d-9ff1-953f468ce21a",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "models/gemini-2.0-flash",
          "mode": "list",
          "cachedResultName": "models/gemini-2.0-flash"
        },
        "messages": {
          "values": [
            {
              "content": "=You are a document formatter. \nConvert the following plain text into a **Markdown document**:\n\n- Use proper # for headings.  \n- Convert lists into bullet points (- or *).  \n- Keep paragraphs clear and separated.  \n\nHere is the input text:\n---\n{{ $json.data[\"Main Content\"] }}\n---\n\nReturn the output as JSON with this structure:\n{\n  \"markdown\": \"<full markdown version>\"\n}\n\n\n",
              "role": "model"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        976,
        48
      ],
      "id": "bcfdb4df-9acc-4bb8-aa8d-0755c83ee108",
      "name": "Message a model2"
    },
    {
      "parameters": {
        "mode": "markdownToHtml",
        "markdown": "={{ $json.docText }}",
        "options": {}
      },
      "type": "n8n-nodes-base.markdown",
      "typeVersion": 1,
      "position": [
        1488,
        48
      ],
      "id": "6f5a6600-0ec2-4064-aed0-fc1cc74f59e3",
      "name": "Markdown"
    },
    {
      "parameters": {
        "jsCode": "// Get the raw AI response text\nconst aiData = $input.first().json.content.parts[0].text;\n\n// Step 1: remove code fences\nlet cleaned = aiData\n  .replace(/^```json\\s*/, '')   // remove starting ```json\n  .replace(/^```\\n/, '')          // remove starting ```\n  .replace(/```$/, '');         // remove ending ```\n\n// Step 2: parse JSON safely\nlet parsed;\ntry {\n  parsed = JSON.parse(cleaned);\n} catch (e) {\n  throw new Error(\"Failed to parse AI JSON: \" + e.message);\n}\n\n// Step 3: get markdown content only\nlet docText = parsed.markdown || \"\";\n\n// Step 4: cleanup (optional – remove double newlines)\ndocText = docText.replace(/\\n\\n/g, '\\n');\n\nreturn [\n  {\n    json: { docText }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1296,
        48
      ],
      "id": "e8e44a0c-1993-409a-8363-357665a86042",
      "name": "Code1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "uploadType",
              "value": "multipart"
            }
          ]
        },
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "multipart/related; boundary=foo_bar_baz",
        "body": "=--foo_bar_baz\nContent-Type: application/json; charset=UTF-8\n\n{\n  \"name\": \"Documents\",\n  \"mimeType\": \"application/vnd.google-apps.document\"\n}\n\n--foo_bar_baz\nContent-Type: text/html; charset=UTF-8\n\n{{ $json.data }}\n\n--foo_bar_baz--",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1648,
        48
      ],
      "id": "5153d236-e7e3-4cc9-bbc5-e41984af00d9",
      "name": "Putting Content in the Google Docs2",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "825a153c-b57f-49d0-8b94-0d6ba5646d9e",
              "name": "draft_link",
              "value": "=https://docs.google.com/document/d/{{ $json.id }}/edit?tab=t.0",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1840,
        48
      ],
      "id": "023226d8-9aa4-4a18-a2cd-7385dcc5edc8",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "resource": "message",
        "guildId": {
          "__rl": true,
          "value": "1408023732051513458",
          "mode": "list",
          "cachedResultName": "Bot Test Server",
          "cachedResultUrl": "https://discord.com/channels/1408023732051513458"
        },
        "channelId": {
          "__rl": true,
          "value": "1408038449503801405",
          "mode": "list",
          "cachedResultName": "hero",
          "cachedResultUrl": "https://discord.com/channels/1408023732051513458/1408038449503801405"
        },
        "content": "=This is your Document, please open and Check:\n{{ $json.draft_link }}",
        "options": {}
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        2016,
        48
      ],
      "id": "1abf04b7-cf0e-44f5-b49c-78b9166c1156",
      "name": "Send a message1",
      "webhookId": "d8e7df77-70a3-42e5-9987-1456abd8428c"
    },
    {
      "parameters": {
        "mode": "markdownToHtml",
        "markdown": "={{ $json.docText }}",
        "options": {}
      },
      "type": "n8n-nodes-base.markdown",
      "typeVersion": 1,
      "position": [
        1488,
        256
      ],
      "id": "1aac2a93-64f3-4e48-a53a-cc148c7dc2e2",
      "name": "Markdown1"
    },
    {
      "parameters": {
        "jsCode": "// Get the raw AI response text\nconst aiData = $input.first().json.content.parts[0].text;\n\n// Step 1: remove code fences\nlet cleaned = aiData\n  .replace(/^```json\\s*/, '')    // remove starting ```json\n  .replace(/^```\\n/, '')         // remove plain ```\n  .replace(/```$/, '');          // remove ending ```\n\n// Step 2: parse JSON safely\nlet parsed;\ntry {\n  parsed = JSON.parse(cleaned);\n} catch (e) {\n  throw new Error(\"Failed to parse AI JSON: \" + e.message + \" | Cleaned: \" + cleaned);\n}\n\n// Step 3: get markdown/report content only\nlet docText = parsed.markdown || parsed.report || \"\";\n\n// Step 4: cleanup (optional – remove double newlines)\ndocText = docText.replace(/\\n\\n/g, '\\n');\n\nreturn [\n  {\n    json: { docText }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1296,
        256
      ],
      "id": "20fab5d9-64bc-4963-9639-4bde6fb85e59",
      "name": "Code2"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "uploadType",
              "value": "multipart"
            }
          ]
        },
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "multipart/related; boundary=foo_bar_baz",
        "body": "=--foo_bar_baz\nContent-Type: application/json; charset=UTF-8\n\n{\n  \"name\": \"Documents\",\n  \"mimeType\": \"application/vnd.google-apps.document\"\n}\n\n--foo_bar_baz\nContent-Type: text/html; charset=UTF-8\n\n{{ $json.data }}\n\n--foo_bar_baz--",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1648,
        256
      ],
      "id": "f482417b-bf16-407a-bea0-9ba8202ca950",
      "name": "Putting Content in the Google Docs",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "825a153c-b57f-49d0-8b94-0d6ba5646d9e",
              "name": "draft_link",
              "value": "=https://docs.google.com/document/d/{{ $json.id }}/edit?tab=t.0",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1840,
        256
      ],
      "id": "91cd6dd8-1f08-46b5-918e-b377a120bb8e",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "resource": "message",
        "guildId": {
          "__rl": true,
          "value": "1408023732051513458",
          "mode": "list",
          "cachedResultName": "Bot Test Server",
          "cachedResultUrl": "https://discord.com/channels/1408023732051513458"
        },
        "channelId": {
          "__rl": true,
          "value": "1408038449503801405",
          "mode": "list",
          "cachedResultName": "hero",
          "cachedResultUrl": "https://discord.com/channels/1408023732051513458/1408038449503801405"
        },
        "content": "=This is your Report, please open and Check:\n{{ $json.draft_link }}",
        "options": {}
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        2016,
        256
      ],
      "id": "cc26b2e7-9014-44e8-ba4f-f9b703af2e57",
      "name": "Send a message2",
      "webhookId": "d8e7df77-70a3-42e5-9987-1456abd8428c"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "models/gemini-2.0-flash",
          "mode": "list",
          "cachedResultName": "models/gemini-2.0-flash"
        },
        "messages": {
          "values": [
            {
              "content": "=You are a report formatter. \nConvert the following plain text into a **Markdown report**:\n\n- Start with a clear report **title** (# Heading 1).  \n- Use **subheadings** (##, ###) for sections and subsections.  \n- Convert enumerations and bullet points into proper Markdown lists (- or *).  \n- Format important terms in **bold**.  \n- Present data in tables if the text suggests comparisons or structured values.  \n- Keep paragraphs concise and separated for readability.  \n\nHere is the input text:\n---\nTitle: {{ $json.data[\"Title/Heading\"] }}\n\nSections: \n{{ $json.data[\"Sections/Headings\"] }}\n\nKey Data or Findings:\n{{ $json.data[\"Key Data or Findings\"] }}\n\nSummary:\n{{ $json.data[\"Summary\"] }}\n---\n\nReturn the output as JSON with this structure:\n{\n  \"report\": \"<full markdown report>\"\n}\n",
              "role": "model"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        976,
        256
      ],
      "id": "2595f7b0-c22f-4f9b-847d-687715947aec",
      "name": "Message a model3"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "models/gemini-2.0-flash",
          "mode": "list",
          "cachedResultName": "models/gemini-2.0-flash"
        },
        "messages": {
          "values": [
            {
              "content": "=You are an AI presentation builder. Given the topic: \"{{ $json.title }}\" and slide count: 10, generate a slide-by-slide breakdown of slide titles and bullet points in JSON format.\n\nEach slide should contain a title, subtitle and at least 5 detailed bullet points.\n\nFormat:\n[\n  {\n    \"title\": \"Slide Title\",\n    \"subtitle\": \"Slide Subtitle\",\n    \"bullets\": \"[\"Point 1\", \"Point 2\"]\"\n  },\n  ..\n]\n",
              "role": "model"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        1056,
        464
      ],
      "id": "4837bfae-d540-4f02-8788-f54f29f20328",
      "name": "Message a model4"
    },
    {
      "parameters": {
        "title": "={{ $json.data.Title }}"
      },
      "type": "n8n-nodes-base.googleSlides",
      "typeVersion": 2,
      "position": [
        880,
        448
      ],
      "id": "1a704c4b-f0d3-4d9f-a514-360641a406b2",
      "name": "Create a presentation"
    },
    {
      "parameters": {
        "jsCode": "// Get raw text from model output\nlet rawText = $json[\"content\"][\"parts\"][0][\"text\"];\n\n// Remove ```json, ``` or any backticks\nrawText = rawText.replace(/```json/g, \"\")\n                 .replace(/```/g, \"\")\n                 .trim();\n\n// Try parsing as JSON\nlet cleanJson;\ntry {\n  cleanJson = JSON.parse(rawText);\n} catch (e) {\n  throw new Error(\"Failed to parse JSON: \" + e.message + \"\\nRaw Text: \" + rawText);\n}\n\n// Transform bullets array into string representation\ncleanJson = cleanJson.map(item => {\n  return {\n    title: item.title,\n    subtitle: item.subtitle,\n    bullets: JSON.stringify(item.bullets) // <-- converts array to string with brackets\n  };\n});\n\n// Return clean JSON object\nreturn cleanJson;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1408,
        480
      ],
      "id": "73d503c3-1181-44f7-bb3a-2366f7353919",
      "name": "Code4"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1600,
        480
      ],
      "id": "7a57a0d9-2a7b-46cc-861c-c5ca6611089b",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "jsCode": "// Parse bullets if it is a stringified array\nlet bulletsArray;\nif (typeof items[0].json.bullets === \"string\") {\n  try {\n    bulletsArray = JSON.parse(items[0].json.bullets);\n  } catch (e) {\n    bulletsArray = items[0].json.bullets.split('\\\\n'); // fallback\n  }\n} else {\n  bulletsArray = items[0].json.bullets;\n}\n\n// Add bullet points and join with escaped newline for JSON\nconst formattedBullets = bulletsArray.map(b => b.trim()).join(\"\\\\n\");\n\nreturn [{\n  json: {\n    ...items[0].json,\n    formattedBullets\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1872,
        496
      ],
      "id": "0bda3051-a8a4-4c46-a351-05769ef8e78e",
      "name": "Code7"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://slides.googleapis.com/v1/presentations/{{ $('Create a presentation').item.json.presentationId }}:batchUpdate",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"requests\": [\n    {\n      \"createSlide\": {\n        \"objectId\": \"slide_new_{{$now}}\",\n        \"slideLayoutReference\": {\n          \"predefinedLayout\": \"BLANK\"\n        }\n      }\n    },\n    {\n      \"updatePageProperties\": {\n        \"objectId\": \"slide_new_{{$now}}\",\n        \"pageProperties\": {\n          \"pageBackgroundFill\": {\n            \"solidFill\": {\n              \"color\": {\n                \"rgbColor\": {\n                  \"red\": 0.98,\n                  \"green\": 0.98,\n                  \"blue\": 0.98\n                }\n              },\n              \"alpha\": 1.0\n            }\n          }\n        },\n        \"fields\": \"pageBackgroundFill\"\n      }\n    },\n    {\n      \"createShape\": {\n        \"objectId\": \"bg_shape_1_\"+ $json.uuid(),\n        \"shapeType\": \"ELLIPSE\",\n        \"elementProperties\": {\n          \"pageObjectId\": \"slide_new_\"+ $json.uuid(),\n          \"size\": { \"height\": { \"magnitude\": 350, \"unit\": \"PT\" }, \"width\": { \"magnitude\": 350, \"unit\": \"PT\" } },\n          \"transform\": { \"scaleX\": 1.5, \"scaleY\": 0.8, \"shearX\": 0, \"shearY\": 0, \"translateX\": 400, \"translateY\": -50, \"unit\": \"PT\" }\n        }\n      }\n    },\n    {\n      \"updateShapeProperties\": {\n        \"objectId\": \"bg_shape_1_\"+ $json.uuid(),\n        \"shapeProperties\": {\n          \"shapeBackgroundFill\": { \"solidFill\": { \"color\": { \"rgbColor\": { \"red\": 1.0, \"green\": 0.65, \"blue\": 0.3 } }, \"alpha\": 0.85 } }\n        },\n        \"fields\": \"shapeBackgroundFill\"\n      }\n    },\n    {\n      \"updateShapeProperties\": {\n        \"objectId\": \"bg_shape_1_\"+ $json.uuid(),\n        \"shapeProperties\": { \"outline\": { \"propertyState\": \"NOT_RENDERED\" } },\n        \"fields\": \"outline.propertyState\"\n      }\n    },\n    {\n      \"createShape\": {\n        \"objectId\": \"bg_shape_2_\"+ $json.uuid(),\n        \"shapeType\": \"ELLIPSE\",\n        \"elementProperties\": {\n          \"pageObjectId\": \"slide_new_\"+ $json.uuid(),\n          \"size\": { \"height\": { \"magnitude\": 300, \"unit\": \"PT\" }, \"width\": { \"magnitude\": 300, \"unit\": \"PT\" } },\n          \"transform\": { \"scaleX\": 1.3, \"scaleY\": 0.9, \"shearX\": 0, \"shearY\": 0, \"translateX\": 450, \"translateY\": 20, \"unit\": \"PT\" }\n        }\n      }\n    },\n    {\n      \"updateShapeProperties\": {\n        \"objectId\": \"bg_shape_2_\"+ $json.uuid(),\n        \"shapeProperties\": { \"shapeBackgroundFill\": { \"solidFill\": { \"color\": { \"rgbColor\": { \"red\": 0.3, \"green\": 0.8, \"blue\": 0.7 } }, \"alpha\": 0.75 } } },\n        \"fields\": \"shapeBackgroundFill\"\n      }\n    },\n    {\n      \"updateShapeProperties\": {\n        \"objectId\": \"bg_shape_2_\"+ $json.uuid(),\n        \"shapeProperties\": { \"outline\": { \"propertyState\": \"NOT_RENDERED\" } },\n        \"fields\": \"outline.propertyState\"\n      }\n    },\n    {\n      \"createShape\": {\n        \"objectId\": \"bg_shape_3_\"+ $json.uuid(),\n        \"shapeType\": \"ELLIPSE\",\n        \"elementProperties\": {\n          \"pageObjectId\": \"slide_new_\"+ $json.uuid(),\n          \"size\": { \"height\": { \"magnitude\": 250, \"unit\": \"PT\" }, \"width\": { \"magnitude\": 250, \"unit\": \"PT\" } },\n          \"transform\": { \"scaleX\": 1.1, \"scaleY\": 1.0, \"shearX\": 0, \"shearY\": 0, \"translateX\": 500, \"translateY\": 90, \"unit\": \"PT\" }\n        }\n      }\n    },\n    {\n      \"updateShapeProperties\": {\n        \"objectId\": \"bg_shape_3_\"+ $json.uuid(),\n        \"shapeProperties\": { \"shapeBackgroundFill\": { \"solidFill\": { \"color\": { \"rgbColor\": { \"red\": 1.0, \"green\": 0.5, \"blue\": 0.7 } }, \"alpha\": 0.65 } } },\n        \"fields\": \"shapeBackgroundFill\"\n      }\n    },\n    {\n      \"updateShapeProperties\": {\n        \"objectId\": \"bg_shape_3_\"+ $json.uuid(),\n        \"shapeProperties\": { \"outline\": { \"propertyState\": \"NOT_RENDERED\" } },\n        \"fields\": \"outline.propertyState\"\n      }\n    },\n    {\n      \"createShape\": {\n        \"objectId\": \"bg_shape_4_\"+ $json.uuid(),\n        \"shapeType\": \"ELLIPSE\",\n        \"elementProperties\": {\n          \"pageObjectId\": \"slide_new_\"+ $json.uuid(),\n          \"size\": { \"height\": { \"magnitude\": 200, \"unit\": \"PT\" }, \"width\": { \"magnitude\": 200, \"unit\": \"PT\" } },\n          \"transform\": { \"scaleX\": 0.9, \"scaleY\": 1.2, \"shearX\": 0, \"shearY\": 0, \"translateX\": 550, \"translateY\": 160, \"unit\": \"PT\" }\n        }\n      }\n    },\n    {\n      \"updateShapeProperties\": {\n        \"objectId\": \"bg_shape_4_\"+ $json.uuid(),\n        \"shapeProperties\": { \"shapeBackgroundFill\": { \"solidFill\": { \"color\": { \"rgbColor\": { \"red\": 0.4, \"green\": 0.6, \"blue\": 0.95 } }, \"alpha\": 0.55 } } },\n        \"fields\": \"shapeBackgroundFill\"\n      }\n    },\n    {\n      \"updateShapeProperties\": {\n        \"objectId\": \"bg_shape_4_\"+ $json.uuid(),\n        \"shapeProperties\": { \"outline\": { \"propertyState\": \"NOT_RENDERED\" } },\n        \"fields\": \"outline.propertyState\"\n      }\n    },\n    {\n      \"createShape\": {\n        \"objectId\": \"title_box_\"+ $json.uuid(),\n        \"shapeType\": \"TEXT_BOX\",\n        \"elementProperties\": {\n          \"pageObjectId\": \"slide_new_\"+ $json.uuid(),\n          \"size\": { \"height\": { \"magnitude\": 89, \"unit\": \"PT\" }, \"width\": { \"magnitude\": 681, \"unit\": \"PT\" } },\n          \"transform\": { \"scaleX\": 1, \"scaleY\": 1, \"shearX\": 0, \"shearY\": 0, \"translateX\": 20, \"translateY\": 51, \"unit\": \"PT\" }\n        }\n      }\n    },\n    {\n      \"insertText\": { \"objectId\": \"title_box_\"+ $json.uuid(), \"insertionIndex\": 0, \"text\": \" {{ $json.title }} \" }\n    },\n    {\n      \"updateTextStyle\": {\n        \"objectId\": \"title_box_\"+ $json.uuid(),\n        \"textRange\": { \"type\": \"ALL\" },\n        \"style\": {\n          \"fontFamily\": \"Roboto\",\n          \"fontSize\": { \"magnitude\": 34, \"unit\": \"PT\" },\n          \"foregroundColor\": { \"opaqueColor\": { \"rgbColor\": { \"red\": 0.15, \"green\": 0.15, \"blue\": 0.15 } } },\n          \"bold\": true,\n          \"italic\": false\n        },\n        \"fields\": \"fontFamily,fontSize,foregroundColor,bold,italic\"\n      }\n    },\n    {\n      \"createShape\": {\n        \"objectId\": \"subtitle_box_\"+ $json.uuid(),\n        \"shapeType\": \"TEXT_BOX\",\n        \"elementProperties\": {\n          \"pageObjectId\": \"slide_new_\"+ $json.uuid(),\n          \"size\": { \"height\": { \"magnitude\": 43, \"unit\": \"PT\" }, \"width\": { \"magnitude\": 420, \"unit\": \"PT\" } },\n          \"transform\": { \"scaleX\": 1, \"scaleY\": 1, \"shearX\": 0, \"shearY\": 0, \"translateX\": 20, \"translateY\": 140, \"unit\": \"PT\" }\n        }\n      }\n    },\n    {\n      \"insertText\": { \"objectId\": \"subtitle_box_\"+ $json.uuid(), \"insertionIndex\": 0, \"text\": \"{{  $json.subtitle }}\" }\n    },\n    {\n      \"updateTextStyle\": {\n        \"objectId\": \"subtitle_box_\"+ $json.uuid(),\n        \"textRange\": { \"type\": \"ALL\" },\n        \"style\": {\n          \"fontFamily\": \"Open Sans\",\n          \"fontSize\": { \"magnitude\": 14, \"unit\": \"PT\" },\n          \"foregroundColor\": { \"opaqueColor\": { \"rgbColor\": { \"red\": 0.4, \"green\": 0.4, \"blue\": 0.4 } } },\n          \"bold\": false,\n          \"italic\": false\n        },\n        \"fields\": \"fontFamily,fontSize,foregroundColor,bold,italic\"\n      }\n    },\n    {\n      \"createShape\": {\n        \"objectId\": \"bullet_box_\"+ $json.uuid(),\n        \"shapeType\": \"TEXT_BOX\",\n        \"elementProperties\": {\n          \"pageObjectId\": \"slide_new_\"+ $json.uuid(),\n          \"size\": { \"height\": { \"magnitude\": 197, \"unit\": \"PT\" }, \"width\": { \"magnitude\": 469, \"unit\": \"PT\" } },\n          \"transform\": { \"scaleX\": 1, \"scaleY\": 1, \"shearX\": 0, \"shearY\": 0, \"translateX\": 20, \"translateY\": 194, \"unit\": \"PT\" }\n        }\n      }\n    },\n    {\n      \"insertText\": { \n        \"objectId\": \"slide_new_{{ $uuid }}\", \n        \"insertionIndex\": 0, \n\"text\": \"{{ $json.formattedBullets }}\"\n      }\n    },\n{\n  \"updateTextStyle\": {\n    \"objectId\": \"bullet_box_\"+ $json.uuid(),\n    \"style\": {\n      \"fontSize\": {\n        \"magnitude\": 12,   \n        \"unit\": \"PT\"\n      }\n    },\n    \"textRange\": {\n      \"type\": \"ALL\"\n    },\n    \"fields\": \"fontSize\"\n  }\n},\n    {\n      \"createParagraphBullets\": { \"objectId\": \"bullet_box_\"+ $json.uuid(), \"textRange\": { \"type\": \"ALL\" }, \"bulletPreset\": \"BULLET_DISC_CIRCLE_SQUARE\" }\n    }\n  ]\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2096,
        496
      ],
      "id": "9c7fa463-44e0-4744-ba66-bc1435926804",
      "name": "Google_Slides_Create_Slide"
    }
  ],
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Fetch Discord Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Discord Message": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Analyze audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze audio": {
      "main": [
        [
          {
            "node": "Message a model",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model": {
      "main": [
        [
          {
            "node": "Message a model1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model1": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Gmail - Create Draft",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Message a model2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Message a model3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create a presentation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gmail - Create Draft": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model2": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Markdown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Markdown": {
      "main": [
        [
          {
            "node": "Putting Content in the Google Docs2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Putting Content in the Google Docs2": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Send a message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Markdown1": {
      "main": [
        [
          {
            "node": "Putting Content in the Google Docs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Markdown1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Putting Content in the Google Docs": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "Send a message2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model3": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model4": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create a presentation": {
      "main": [
        [
          {
            "node": "Message a model4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Code7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code7": {
      "main": [
        [
          {
            "node": "Google_Slides_Create_Slide",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google_Slides_Create_Slide": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "2461f6d5-c968-4a1b-96b4-57c9478ee425",
  "triggerCount": 1,
  "shared": [
    {
      "createdAt": "2025-08-22T07:50:40.079Z",
      "updatedAt": "2025-08-22T07:50:40.079Z",
      "role": "workflow:owner",
      "workflowId": "wOAm0TXchgJtkDtD",
      "projectId": "nSUbNPn8P23MJaxQ",
      "project": {
        "createdAt": "2025-08-19T13:24:42.941Z",
        "updatedAt": "2025-08-19T13:25:25.513Z",
        "id": "nSUbNPn8P23MJaxQ",
        "name": "Sanjay Makwana <sanjay.makwana@e2m.solutions>",
        "type": "personal",
        "icon": null,
        "description": null,
        "projectRelations": [
          {
            "createdAt": "2025-08-19T13:24:42.957Z",
            "updatedAt": "2025-08-19T13:24:42.957Z",
            "role": "project:personalOwner",
            "userId": "bec985b6-4c5b-4f76-a28c-588449d2617c",
            "projectId": "nSUbNPn8P23MJaxQ",
            "user": {
              "createdAt": "2025-08-19T13:24:42.285Z",
              "updatedAt": "2025-09-16T09:46:32.000Z",
              "id": "bec985b6-4c5b-4f76-a28c-588449d2617c",
              "email": "sanjay.makwana@e2m.solutions",
              "firstName": "Sanjay",
              "lastName": "Makwana",
              "personalizationAnswers": {
                "version": "v4",
                "personalization_survey_submitted_at": "2025-08-19T13:25:56.618Z",
                "personalization_survey_n8n_version": "1.107.3",
                "automationGoalDevops": [
                  "ticketing-systems-integrations",
                  "data-syncing"
                ],
                "companyIndustryExtended": [
                  "it-industry"
                ],
                "companySize": "<20",
                "companyType": "other",
                "role": "it",
                "reportedSource": "google"
              },
              "settings": {
                "userActivated": true,
                "easyAIWorkflowOnboarded": true,
                "firstSuccessfulWorkflowId": "9HG8S6sJBTFvXXIZ",
                "userActivatedAt": 1755781899419,
                "npsSurvey": {
                  "responded": true,
                  "lastShownAt": 1756103555035
                }
              },
              "role": "global:owner",
              "disabled": false,
              "mfaEnabled": false,
              "lastActiveAt": "2025-09-16",
              "isPending": false
            }
          }
        ]
      }
    }
  ],
  "tags": []
}