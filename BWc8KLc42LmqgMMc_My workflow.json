{
  "createdAt": "2025-08-22T05:50:31.508Z",
  "updatedAt": "2025-08-22T06:28:39.000Z",
  "id": "BWc8KLc42LmqgMMc",
  "name": "My workflow",
  "active": false,
  "isArchived": true,
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "seconds",
              "secondsInterval": 5
            }
          ]
        }
      },
      "id": "2bc21fec-3e07-41b9-9fd2-45bd56018a67",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -176,
        48
      ]
    },
    {
      "parameters": {
        "url": "https://discord.com/api/v10/channels/1408038449503801405/messages?limit=1",
        "options": {}
      },
      "id": "46038fc4-692b-4133-b1e5-d45294024af5",
      "name": "Fetch Discord Message",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        32,
        48
      ]
    },
    {
      "parameters": {
        "jsCode": "const RECENT_WINDOW = 5000;\nconst messageTime = new Date($json.timestamp);\nconst diff = Date.now() - messageTime;\nreturn {\n  content: $json.content,\n  isRecent: diff <= RECENT_WINDOW\n};"
      },
      "id": "14a1b93e-dcdd-414d-b43f-9ed0ad252335",
      "name": "Check Recent Message",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        224,
        48
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "leftValue": "={{ $json.isRecent }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              },
              "id": "969f7311-9b78-4ec3-a513-9d979d59cff1"
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "5839c0c8-748f-4a6d-a7b6-7800626e3538",
      "name": "If Recent?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        384,
        48
      ]
    },
    {
      "parameters": {
        "modelId": "models/gemini-2.0-flash",
        "messages": {
          "values": [
            {
              "content": "={\n  \"role\": \"You are an expert Instagram content creator. When given a topic, always create a detailed, realistic, and visually appealing caption that directly matches the topic.\",\n  \"platform\": \"Instagram\",\n  \"style\": \"viral\",\n  \"rules\": {\n    \"1\": \"Caption must be directly about the given topic only (do not change or generalize).\",\n    \"2\": \"Write a creative caption (max 400 words).\",\n    \"3\": \"Add 8–12 relevant hashtags based strictly on the topic.\",\n    \"4\": \"Output must be ONLY valid JSON.\",\n    \"5\": \"Do not include markdown, code blocks, or extra text.\",\n    \"6\": \"Output ONLY valid JSON as the final result.\",\n    \"7\": \"Do not wrap it in quotes or extra fields.\"\n  },\n  \"output_structure\": {\n    \"caption\": \"string\",\n    \"hashtags\": [\"#tag1\"]\n  },\n  \"topic\": \"{{ $json.content }}\"\n}"
            }
          ]
        },
        "options": {}
      },
      "id": "299d8248-53de-4a81-8a25-01f26a9185df",
      "name": "Generate Caption & Hashtags",
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        592,
        32
      ]
    },
    {
      "parameters": {
        "jsCode": "// Get the text output from previous node\nlet rawText = $input.first().json.content.parts[0].text;\n\n// Remove code block markers if they exist (```json ... ```)\nrawText = rawText.replace(/^```json\\s*/, '').replace(/```$/, '').trim();\n\nlet parsed;\ntry {\n  parsed = JSON.parse(rawText);\n} catch (e) {\n  throw new Error(\"Failed to parse JSON from model output: \" + e.message + \"\\nRaw text:\\n\" + rawText);\n}\n\n// Return caption and hashtags separately\nreturn [\n  {\n    json: {\n      caption: parsed.caption,\n      hashtags: parsed.hashtags\n    }\n  }\n];\n"
      },
      "id": "9c2de804-1eab-4c5b-a2f1-bedb13368c0d",
      "name": "Parse Gemini JSON",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        864,
        32
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api-inference.huggingface.co/models/prompthero/openjourney",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "inputs",
              "value": "={{ $json.caption }}"
            }
          ]
        },
        "options": {}
      },
      "id": "8af104ec-be30-4f0f-a6df-9c0aa94f514b",
      "name": "Generate Image",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1024,
        32
      ]
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "data",
        "options": {}
      },
      "id": "e91af993-5a9d-4e8c-83ff-db3732ea38d0",
      "name": "Convert to File",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        1216,
        32
      ]
    },
    {
      "parameters": {
        "name": "=image_{{ $now.format(\"MMDD_HHmmss\") }}.png",
        "driveId": "My Drive",
        "folderId": "1ic-czhUoqk-Zv_d9UPDfdMfOfuBTT2Ru",
        "options": {}
      },
      "id": "1088f120-2444-4ff6-b135-6910fdd0cfaa",
      "name": "Upload to Drive",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        1408,
        32
      ]
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": "13DDEADwMnbDzVYr_5nLkhLRer2XmqAKfHfNzKvK8ftQ",
        "sheetName": 988067313,
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Caption": "={{ $json.caption }}",
            "Hashtags": "={{ $json.hashtags.join(' ') }}",
            "CreatedAt": "={{ $now.toISOString() }}",
            "Image": "={{ $json.id }}",
            "Image_url": "=https://drive.google.com/file/d/{{ $json.id }}/view",
            "image_name": "={{ $json.name }}"
          }
        },
        "options": {}
      },
      "id": "fee315da-3d58-4984-a40b-ec32807ed1ff",
      "name": "Log in Google Sheets",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        1616,
        32
      ]
    }
  ],
  "connections": {
    "Generate Caption & Hashtags": {
      "main": [
        [
          {
            "node": "Parse Gemini JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Gemini JSON": {
      "main": [
        [
          {
            "node": "Generate Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Image": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Upload to Drive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload to Drive": {
      "main": [
        [
          {
            "node": "Log in Google Sheets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Discord Message": {
      "main": [
        [
          {
            "node": "Check Recent Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Fetch Discord Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Recent Message": {
      "main": [
        [
          {
            "node": "If Recent?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Recent?": {
      "main": [
        [
          {
            "node": "Generate Caption & Hashtags",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "node:Monitor Discord": {
      "recurrenceRules": []
    },
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "meta": null,
  "pinData": {
    "Generate Caption & Hashtags": [
      {
        "json": {
          "content": {
            "parts": [
              {
                "text": "```json\n{\n  \"caption\": \"Believe it! 🍥❤️ When Naruto said 'I never go back on my word, that's my ninja way,' he wasn't just talking about ramen. He was talking about LOVE! This knucklehead ninja stole our hearts with his unwavering determination and that signature smile. Who else teared up when Naruto finally achieved his dream and found his happy ending? 😭\\n\\nFrom his ramen-fueled adventures to protecting the Hidden Leaf Village, Naruto taught us the true meaning of friendship, perseverance, and never giving up on the people you love. Show some love for our favorite number one hyperactive, knucklehead ninja! Double tap if you believe in the power of believing! ✨ Let's flood the comments with your favorite Naruto moments! 👇\",\n  \"hashtags\": [\n    \"#Naruto\",\n    \"#NarutoUzumaki\",\n    \"#NarutoLove\",\n    \"#AnimeLove\",\n    \"#HiddenLeafVillage\",\n    \"#NinjaWay\",\n    \"#Dattebayo\",\n    \"#Anime\",\n    \"#Otaku\",\n    \"#AnimeFan\",\n    \"#BelieveIt\",\n    \"#NarutoShippuden\"\n  ]\n}\n```"
              }
            ],
            "role": "model"
          },
          "finishReason": "STOP",
          "avgLogprobs": -0.28455588931129094
        }
      }
    ]
  },
  "versionId": "13b73196-92de-4547-9deb-49648cd6a549",
  "triggerCount": 1,
  "shared": [
    {
      "createdAt": "2025-08-22T05:50:31.525Z",
      "updatedAt": "2025-08-22T05:50:31.525Z",
      "role": "workflow:owner",
      "workflowId": "BWc8KLc42LmqgMMc",
      "projectId": "nSUbNPn8P23MJaxQ",
      "project": {
        "createdAt": "2025-08-19T13:24:42.941Z",
        "updatedAt": "2025-08-19T13:25:25.513Z",
        "id": "nSUbNPn8P23MJaxQ",
        "name": "Sanjay Makwana <sanjay.makwana@e2m.solutions>",
        "type": "personal",
        "icon": null,
        "description": null,
        "projectRelations": [
          {
            "createdAt": "2025-08-19T13:24:42.957Z",
            "updatedAt": "2025-08-19T13:24:42.957Z",
            "userId": "bec985b6-4c5b-4f76-a28c-588449d2617c",
            "projectId": "nSUbNPn8P23MJaxQ",
            "user": {
              "createdAt": "2025-08-19T13:24:42.285Z",
              "updatedAt": "2025-10-08T04:11:33.000Z",
              "id": "bec985b6-4c5b-4f76-a28c-588449d2617c",
              "email": "sanjay.makwana@e2m.solutions",
              "firstName": "Sanjay",
              "lastName": "Makwana",
              "personalizationAnswers": {
                "version": "v4",
                "personalization_survey_submitted_at": "2025-08-19T13:25:56.618Z",
                "personalization_survey_n8n_version": "1.107.3",
                "automationGoalDevops": [
                  "ticketing-systems-integrations",
                  "data-syncing"
                ],
                "companyIndustryExtended": [
                  "it-industry"
                ],
                "companySize": "<20",
                "companyType": "other",
                "role": "it",
                "reportedSource": "google"
              },
              "settings": {
                "userActivated": true,
                "easyAIWorkflowOnboarded": true,
                "firstSuccessfulWorkflowId": "9HG8S6sJBTFvXXIZ",
                "userActivatedAt": 1755781899419,
                "npsSurvey": {
                  "responded": true,
                  "lastShownAt": 1756103555035
                }
              },
              "disabled": false,
              "mfaEnabled": false,
              "lastActiveAt": "2025-10-08",
              "isPending": false
            }
          }
        ]
      }
    }
  ],
  "tags": []
}